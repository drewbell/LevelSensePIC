

Microchip Technology PIC STD Macro Assembler V1.36 build -262312587 
                                                                                               Thu Feb 04 21:25:22 2016

Microchip Technology Omniscient Code Generator v1.36 (Standard mode) build 201601150325
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	sm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text14,local,class=CODE,merge=1,delta=2
    21                           	psect	text22,local,class=CODE,merge=1,delta=2
    22                           	psect	text32,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	functab,global,reloc=256,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  000A                     	;# 
    40  000B                     	;# 
    41  000C                     	;# 
    42  000D                     	;# 
    43  000E                     	;# 
    44  000E                     	;# 
    45  000F                     	;# 
    46  0010                     	;# 
    47  0011                     	;# 
    48  0012                     	;# 
    49  0013                     	;# 
    50  0014                     	;# 
    51  0015                     	;# 
    52  0015                     	;# 
    53  0016                     	;# 
    54  0017                     	;# 
    55  0018                     	;# 
    56  0019                     	;# 
    57  001A                     	;# 
    58  001C                     	;# 
    59  001D                     	;# 
    60  001E                     	;# 
    61  001F                     	;# 
    62  0081                     	;# 
    63  0085                     	;# 
    64  0086                     	;# 
    65  0087                     	;# 
    66  008C                     	;# 
    67  008D                     	;# 
    68  008E                     	;# 
    69  008F                     	;# 
    70  0090                     	;# 
    71  0092                     	;# 
    72  0093                     	;# 
    73  0093                     	;# 
    74  0093                     	;# 
    75  0094                     	;# 
    76  0095                     	;# 
    77  0095                     	;# 
    78  0096                     	;# 
    79  0096                     	;# 
    80  0097                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009B                     	;# 
    85  009E                     	;# 
    86  009F                     	;# 
    87  010C                     	;# 
    88  010C                     	;# 
    89  010D                     	;# 
    90  010E                     	;# 
    91  010F                     	;# 
    92  0115                     	;# 
    93  0116                     	;# 
    94  0118                     	;# 
    95  0119                     	;# 
    96  011A                     	;# 
    97  011B                     	;# 
    98  011E                     	;# 
    99  011F                     	;# 
   100  018C                     	;# 
   101  018D                     	;# 
   102  019D                     	;# 
   103  019E                     	;# 
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  0087                     	;# 
   139  008C                     	;# 
   140  008D                     	;# 
   141  008E                     	;# 
   142  008F                     	;# 
   143  0090                     	;# 
   144  0092                     	;# 
   145  0093                     	;# 
   146  0093                     	;# 
   147  0093                     	;# 
   148  0094                     	;# 
   149  0095                     	;# 
   150  0095                     	;# 
   151  0096                     	;# 
   152  0096                     	;# 
   153  0097                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009A                     	;# 
   157  009B                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  010F                     	;# 
   165  0115                     	;# 
   166  0116                     	;# 
   167  0118                     	;# 
   168  0119                     	;# 
   169  011A                     	;# 
   170  011B                     	;# 
   171  011E                     	;# 
   172  011F                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175  019D                     	;# 
   176  019E                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  000E                     	;# 
   191  000F                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0013                     	;# 
   196  0014                     	;# 
   197  0015                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001C                     	;# 
   205  001D                     	;# 
   206  001E                     	;# 
   207  001F                     	;# 
   208  0081                     	;# 
   209  0085                     	;# 
   210  0086                     	;# 
   211  0087                     	;# 
   212  008C                     	;# 
   213  008D                     	;# 
   214  008E                     	;# 
   215  008F                     	;# 
   216  0090                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0093                     	;# 
   220  0093                     	;# 
   221  0094                     	;# 
   222  0095                     	;# 
   223  0095                     	;# 
   224  0096                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009E                     	;# 
   232  009F                     	;# 
   233  010C                     	;# 
   234  010C                     	;# 
   235  010D                     	;# 
   236  010E                     	;# 
   237  010F                     	;# 
   238  0115                     	;# 
   239  0116                     	;# 
   240  0118                     	;# 
   241  0119                     	;# 
   242  011A                     	;# 
   243  011B                     	;# 
   244  011E                     	;# 
   245  011F                     	;# 
   246  018C                     	;# 
   247  018D                     	;# 
   248  019D                     	;# 
   249  019E                     	;# 
   250  0000                     	;# 
   251  0001                     	;# 
   252  0002                     	;# 
   253  0003                     	;# 
   254  0004                     	;# 
   255  0005                     	;# 
   256  0006                     	;# 
   257  0007                     	;# 
   258  000A                     	;# 
   259  000B                     	;# 
   260  000C                     	;# 
   261  000D                     	;# 
   262  000E                     	;# 
   263  000E                     	;# 
   264  000F                     	;# 
   265  0010                     	;# 
   266  0011                     	;# 
   267  0012                     	;# 
   268  0013                     	;# 
   269  0014                     	;# 
   270  0015                     	;# 
   271  0015                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001C                     	;# 
   278  001D                     	;# 
   279  001E                     	;# 
   280  001F                     	;# 
   281  0081                     	;# 
   282  0085                     	;# 
   283  0086                     	;# 
   284  0087                     	;# 
   285  008C                     	;# 
   286  008D                     	;# 
   287  008E                     	;# 
   288  008F                     	;# 
   289  0090                     	;# 
   290  0092                     	;# 
   291  0093                     	;# 
   292  0093                     	;# 
   293  0093                     	;# 
   294  0094                     	;# 
   295  0095                     	;# 
   296  0095                     	;# 
   297  0096                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0098                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009E                     	;# 
   305  009F                     	;# 
   306  010C                     	;# 
   307  010C                     	;# 
   308  010D                     	;# 
   309  010E                     	;# 
   310  010F                     	;# 
   311  0115                     	;# 
   312  0116                     	;# 
   313  0118                     	;# 
   314  0119                     	;# 
   315  011A                     	;# 
   316  011B                     	;# 
   317  011E                     	;# 
   318  011F                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  019D                     	;# 
   322  019E                     	;# 
   323  0000                     	;# 
   324  0001                     	;# 
   325  0002                     	;# 
   326  0003                     	;# 
   327  0004                     	;# 
   328  0005                     	;# 
   329  0006                     	;# 
   330  0007                     	;# 
   331  000A                     	;# 
   332  000B                     	;# 
   333  000C                     	;# 
   334  000D                     	;# 
   335  000E                     	;# 
   336  000E                     	;# 
   337  000F                     	;# 
   338  0010                     	;# 
   339  0011                     	;# 
   340  0012                     	;# 
   341  0013                     	;# 
   342  0014                     	;# 
   343  0015                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0017                     	;# 
   347  0018                     	;# 
   348  0019                     	;# 
   349  001A                     	;# 
   350  001C                     	;# 
   351  001D                     	;# 
   352  001E                     	;# 
   353  001F                     	;# 
   354  0081                     	;# 
   355  0085                     	;# 
   356  0086                     	;# 
   357  0087                     	;# 
   358  008C                     	;# 
   359  008D                     	;# 
   360  008E                     	;# 
   361  008F                     	;# 
   362  0090                     	;# 
   363  0092                     	;# 
   364  0093                     	;# 
   365  0093                     	;# 
   366  0093                     	;# 
   367  0094                     	;# 
   368  0095                     	;# 
   369  0095                     	;# 
   370  0096                     	;# 
   371  0096                     	;# 
   372  0097                     	;# 
   373  0098                     	;# 
   374  0099                     	;# 
   375  009A                     	;# 
   376  009B                     	;# 
   377  009E                     	;# 
   378  009F                     	;# 
   379  010C                     	;# 
   380  010C                     	;# 
   381  010D                     	;# 
   382  010E                     	;# 
   383  010F                     	;# 
   384  0115                     	;# 
   385  0116                     	;# 
   386  0118                     	;# 
   387  0119                     	;# 
   388  011A                     	;# 
   389  011B                     	;# 
   390  011E                     	;# 
   391  011F                     	;# 
   392  018C                     	;# 
   393  018D                     	;# 
   394  019D                     	;# 
   395  019E                     	;# 
   396  0000                     	;# 
   397  0001                     	;# 
   398  0002                     	;# 
   399  0003                     	;# 
   400  0004                     	;# 
   401  0005                     	;# 
   402  0006                     	;# 
   403  0007                     	;# 
   404  000A                     	;# 
   405  000B                     	;# 
   406  000C                     	;# 
   407  000D                     	;# 
   408  000E                     	;# 
   409  000E                     	;# 
   410  000F                     	;# 
   411  0010                     	;# 
   412  0011                     	;# 
   413  0012                     	;# 
   414  0013                     	;# 
   415  0014                     	;# 
   416  0015                     	;# 
   417  0015                     	;# 
   418  0016                     	;# 
   419  0017                     	;# 
   420  0018                     	;# 
   421  0019                     	;# 
   422  001A                     	;# 
   423  001C                     	;# 
   424  001D                     	;# 
   425  001E                     	;# 
   426  001F                     	;# 
   427  0081                     	;# 
   428  0085                     	;# 
   429  0086                     	;# 
   430  0087                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  008F                     	;# 
   435  0090                     	;# 
   436  0092                     	;# 
   437  0093                     	;# 
   438  0093                     	;# 
   439  0093                     	;# 
   440  0094                     	;# 
   441  0095                     	;# 
   442  0095                     	;# 
   443  0096                     	;# 
   444  0096                     	;# 
   445  0097                     	;# 
   446  0098                     	;# 
   447  0099                     	;# 
   448  009A                     	;# 
   449  009B                     	;# 
   450  009E                     	;# 
   451  009F                     	;# 
   452  010C                     	;# 
   453  010C                     	;# 
   454  010D                     	;# 
   455  010E                     	;# 
   456  010F                     	;# 
   457  0115                     	;# 
   458  0116                     	;# 
   459  0118                     	;# 
   460  0119                     	;# 
   461  011A                     	;# 
   462  011B                     	;# 
   463  011E                     	;# 
   464  011F                     	;# 
   465  018C                     	;# 
   466  018D                     	;# 
   467  019D                     	;# 
   468  019E                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  000A                     	;# 
   478  000B                     	;# 
   479  000C                     	;# 
   480  000D                     	;# 
   481  000E                     	;# 
   482  000E                     	;# 
   483  000F                     	;# 
   484  0010                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0013                     	;# 
   488  0014                     	;# 
   489  0015                     	;# 
   490  0015                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001C                     	;# 
   497  001D                     	;# 
   498  001E                     	;# 
   499  001F                     	;# 
   500  0081                     	;# 
   501  0085                     	;# 
   502  0086                     	;# 
   503  0087                     	;# 
   504  008C                     	;# 
   505  008D                     	;# 
   506  008E                     	;# 
   507  008F                     	;# 
   508  0090                     	;# 
   509  0092                     	;# 
   510  0093                     	;# 
   511  0093                     	;# 
   512  0093                     	;# 
   513  0094                     	;# 
   514  0095                     	;# 
   515  0095                     	;# 
   516  0096                     	;# 
   517  0096                     	;# 
   518  0097                     	;# 
   519  0098                     	;# 
   520  0099                     	;# 
   521  009A                     	;# 
   522  009B                     	;# 
   523  009E                     	;# 
   524  009F                     	;# 
   525  010C                     	;# 
   526  010C                     	;# 
   527  010D                     	;# 
   528  010E                     	;# 
   529  010F                     	;# 
   530  0115                     	;# 
   531  0116                     	;# 
   532  0118                     	;# 
   533  0119                     	;# 
   534  011A                     	;# 
   535  011B                     	;# 
   536  011E                     	;# 
   537  011F                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  019D                     	;# 
   541  019E                     	;# 
   542  0000                     	;# 
   543  0001                     	;# 
   544  0002                     	;# 
   545  0003                     	;# 
   546  0004                     	;# 
   547  0005                     	;# 
   548  0006                     	;# 
   549  0007                     	;# 
   550  000A                     	;# 
   551  000B                     	;# 
   552  000C                     	;# 
   553  000D                     	;# 
   554  000E                     	;# 
   555  000E                     	;# 
   556  000F                     	;# 
   557  0010                     	;# 
   558  0011                     	;# 
   559  0012                     	;# 
   560  0013                     	;# 
   561  0014                     	;# 
   562  0015                     	;# 
   563  0015                     	;# 
   564  0016                     	;# 
   565  0017                     	;# 
   566  0018                     	;# 
   567  0019                     	;# 
   568  001A                     	;# 
   569  001C                     	;# 
   570  001D                     	;# 
   571  001E                     	;# 
   572  001F                     	;# 
   573  0081                     	;# 
   574  0085                     	;# 
   575  0086                     	;# 
   576  0087                     	;# 
   577  008C                     	;# 
   578  008D                     	;# 
   579  008E                     	;# 
   580  008F                     	;# 
   581  0090                     	;# 
   582  0092                     	;# 
   583  0093                     	;# 
   584  0093                     	;# 
   585  0093                     	;# 
   586  0094                     	;# 
   587  0095                     	;# 
   588  0095                     	;# 
   589  0096                     	;# 
   590  0096                     	;# 
   591  0097                     	;# 
   592  0098                     	;# 
   593  0099                     	;# 
   594  009A                     	;# 
   595  009B                     	;# 
   596  009E                     	;# 
   597  009F                     	;# 
   598  010C                     	;# 
   599  010C                     	;# 
   600  010D                     	;# 
   601  010E                     	;# 
   602  010F                     	;# 
   603  0115                     	;# 
   604  0116                     	;# 
   605  0118                     	;# 
   606  0119                     	;# 
   607  011A                     	;# 
   608  011B                     	;# 
   609  011E                     	;# 
   610  011F                     	;# 
   611  018C                     	;# 
   612  018D                     	;# 
   613  019D                     	;# 
   614  019E                     	;# 
   615  0000                     	;# 
   616  0001                     	;# 
   617  0002                     	;# 
   618  0003                     	;# 
   619  0004                     	;# 
   620  0005                     	;# 
   621  0006                     	;# 
   622  0007                     	;# 
   623  000A                     	;# 
   624  000B                     	;# 
   625  000C                     	;# 
   626  000D                     	;# 
   627  000E                     	;# 
   628  000E                     	;# 
   629  000F                     	;# 
   630  0010                     	;# 
   631  0011                     	;# 
   632  0012                     	;# 
   633  0013                     	;# 
   634  0014                     	;# 
   635  0015                     	;# 
   636  0015                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001C                     	;# 
   643  001D                     	;# 
   644  001E                     	;# 
   645  001F                     	;# 
   646  0081                     	;# 
   647  0085                     	;# 
   648  0086                     	;# 
   649  0087                     	;# 
   650  008C                     	;# 
   651  008D                     	;# 
   652  008E                     	;# 
   653  008F                     	;# 
   654  0090                     	;# 
   655  0092                     	;# 
   656  0093                     	;# 
   657  0093                     	;# 
   658  0093                     	;# 
   659  0094                     	;# 
   660  0095                     	;# 
   661  0095                     	;# 
   662  0096                     	;# 
   663  0096                     	;# 
   664  0097                     	;# 
   665  0098                     	;# 
   666  0099                     	;# 
   667  009A                     	;# 
   668  009B                     	;# 
   669  009E                     	;# 
   670  009F                     	;# 
   671  010C                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  010F                     	;# 
   676  0115                     	;# 
   677  0116                     	;# 
   678  0118                     	;# 
   679  0119                     	;# 
   680  011A                     	;# 
   681  011B                     	;# 
   682  011E                     	;# 
   683  011F                     	;# 
   684  018C                     	;# 
   685  018D                     	;# 
   686  019D                     	;# 
   687  019E                     	;# 
   688  0000                     	;# 
   689  0001                     	;# 
   690  0002                     	;# 
   691  0003                     	;# 
   692  0004                     	;# 
   693  0005                     	;# 
   694  0006                     	;# 
   695  0007                     	;# 
   696  000A                     	;# 
   697  000B                     	;# 
   698  000C                     	;# 
   699  000D                     	;# 
   700  000E                     	;# 
   701  000E                     	;# 
   702  000F                     	;# 
   703  0010                     	;# 
   704  0011                     	;# 
   705  0012                     	;# 
   706  0013                     	;# 
   707  0014                     	;# 
   708  0015                     	;# 
   709  0015                     	;# 
   710  0016                     	;# 
   711  0017                     	;# 
   712  0018                     	;# 
   713  0019                     	;# 
   714  001A                     	;# 
   715  001C                     	;# 
   716  001D                     	;# 
   717  001E                     	;# 
   718  001F                     	;# 
   719  0081                     	;# 
   720  0085                     	;# 
   721  0086                     	;# 
   722  0087                     	;# 
   723  008C                     	;# 
   724  008D                     	;# 
   725  008E                     	;# 
   726  008F                     	;# 
   727  0090                     	;# 
   728  0092                     	;# 
   729  0093                     	;# 
   730  0093                     	;# 
   731  0093                     	;# 
   732  0094                     	;# 
   733  0095                     	;# 
   734  0095                     	;# 
   735  0096                     	;# 
   736  0096                     	;# 
   737  0097                     	;# 
   738  0098                     	;# 
   739  0099                     	;# 
   740  009A                     	;# 
   741  009B                     	;# 
   742  009E                     	;# 
   743  009F                     	;# 
   744  010C                     	;# 
   745  010C                     	;# 
   746  010D                     	;# 
   747  010E                     	;# 
   748  010F                     	;# 
   749  0115                     	;# 
   750  0116                     	;# 
   751  0118                     	;# 
   752  0119                     	;# 
   753  011A                     	;# 
   754  011B                     	;# 
   755  011E                     	;# 
   756  011F                     	;# 
   757  018C                     	;# 
   758  018D                     	;# 
   759  019D                     	;# 
   760  019E                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  000A                     	;# 
   770  000B                     	;# 
   771  000C                     	;# 
   772  000D                     	;# 
   773  000E                     	;# 
   774  000E                     	;# 
   775  000F                     	;# 
   776  0010                     	;# 
   777  0011                     	;# 
   778  0012                     	;# 
   779  0013                     	;# 
   780  0014                     	;# 
   781  0015                     	;# 
   782  0015                     	;# 
   783  0016                     	;# 
   784  0017                     	;# 
   785  0018                     	;# 
   786  0019                     	;# 
   787  001A                     	;# 
   788  001C                     	;# 
   789  001D                     	;# 
   790  001E                     	;# 
   791  001F                     	;# 
   792  0081                     	;# 
   793  0085                     	;# 
   794  0086                     	;# 
   795  0087                     	;# 
   796  008C                     	;# 
   797  008D                     	;# 
   798  008E                     	;# 
   799  008F                     	;# 
   800  0090                     	;# 
   801  0092                     	;# 
   802  0093                     	;# 
   803  0093                     	;# 
   804  0093                     	;# 
   805  0094                     	;# 
   806  0095                     	;# 
   807  0095                     	;# 
   808  0096                     	;# 
   809  0096                     	;# 
   810  0097                     	;# 
   811  0098                     	;# 
   812  0099                     	;# 
   813  009A                     	;# 
   814  009B                     	;# 
   815  009E                     	;# 
   816  009F                     	;# 
   817  010C                     	;# 
   818  010C                     	;# 
   819  010D                     	;# 
   820  010E                     	;# 
   821  010F                     	;# 
   822  0115                     	;# 
   823  0116                     	;# 
   824  0118                     	;# 
   825  0119                     	;# 
   826  011A                     	;# 
   827  011B                     	;# 
   828  011E                     	;# 
   829  011F                     	;# 
   830  018C                     	;# 
   831  018D                     	;# 
   832  019D                     	;# 
   833  019E                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  000E                     	;# 
   848  000F                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0013                     	;# 
   853  0014                     	;# 
   854  0015                     	;# 
   855  0015                     	;# 
   856  0016                     	;# 
   857  0017                     	;# 
   858  0018                     	;# 
   859  0019                     	;# 
   860  001A                     	;# 
   861  001C                     	;# 
   862  001D                     	;# 
   863  001E                     	;# 
   864  001F                     	;# 
   865  0081                     	;# 
   866  0085                     	;# 
   867  0086                     	;# 
   868  0087                     	;# 
   869  008C                     	;# 
   870  008D                     	;# 
   871  008E                     	;# 
   872  008F                     	;# 
   873  0090                     	;# 
   874  0092                     	;# 
   875  0093                     	;# 
   876  0093                     	;# 
   877  0093                     	;# 
   878  0094                     	;# 
   879  0095                     	;# 
   880  0095                     	;# 
   881  0096                     	;# 
   882  0096                     	;# 
   883  0097                     	;# 
   884  0098                     	;# 
   885  0099                     	;# 
   886  009A                     	;# 
   887  009B                     	;# 
   888  009E                     	;# 
   889  009F                     	;# 
   890  010C                     	;# 
   891  010C                     	;# 
   892  010D                     	;# 
   893  010E                     	;# 
   894  010F                     	;# 
   895  0115                     	;# 
   896  0116                     	;# 
   897  0118                     	;# 
   898  0119                     	;# 
   899  011A                     	;# 
   900  011B                     	;# 
   901  011E                     	;# 
   902  011F                     	;# 
   903  018C                     	;# 
   904  018D                     	;# 
   905  019D                     	;# 
   906  019E                     	;# 
   907  0000                     	;# 
   908  0001                     	;# 
   909  0002                     	;# 
   910  0003                     	;# 
   911  0004                     	;# 
   912  0005                     	;# 
   913  0006                     	;# 
   914  0007                     	;# 
   915  000A                     	;# 
   916  000B                     	;# 
   917  000C                     	;# 
   918  000D                     	;# 
   919  000E                     	;# 
   920  000E                     	;# 
   921  000F                     	;# 
   922  0010                     	;# 
   923  0011                     	;# 
   924  0012                     	;# 
   925  0013                     	;# 
   926  0014                     	;# 
   927  0015                     	;# 
   928  0015                     	;# 
   929  0016                     	;# 
   930  0017                     	;# 
   931  0018                     	;# 
   932  0019                     	;# 
   933  001A                     	;# 
   934  001C                     	;# 
   935  001D                     	;# 
   936  001E                     	;# 
   937  001F                     	;# 
   938  0081                     	;# 
   939  0085                     	;# 
   940  0086                     	;# 
   941  0087                     	;# 
   942  008C                     	;# 
   943  008D                     	;# 
   944  008E                     	;# 
   945  008F                     	;# 
   946  0090                     	;# 
   947  0092                     	;# 
   948  0093                     	;# 
   949  0093                     	;# 
   950  0093                     	;# 
   951  0094                     	;# 
   952  0095                     	;# 
   953  0095                     	;# 
   954  0096                     	;# 
   955  0096                     	;# 
   956  0097                     	;# 
   957  0098                     	;# 
   958  0099                     	;# 
   959  009A                     	;# 
   960  009B                     	;# 
   961  009E                     	;# 
   962  009F                     	;# 
   963  010C                     	;# 
   964  010C                     	;# 
   965  010D                     	;# 
   966  010E                     	;# 
   967  010F                     	;# 
   968  0115                     	;# 
   969  0116                     	;# 
   970  0118                     	;# 
   971  0119                     	;# 
   972  011A                     	;# 
   973  011B                     	;# 
   974  011E                     	;# 
   975  011F                     	;# 
   976  018C                     	;# 
   977  018D                     	;# 
   978  019D                     	;# 
   979  019E                     	;# 
   980                           
   981                           	psect	idataBANK0
   982  0000                     __pidataBANK0:	
   983                           
   984                           	psect	idataBANK1
   985  0000                     __pidataBANK1:	
   986                           
   987                           	psect	strings
   988  0040                     __pstrings:	
   989  0040                     stringtab:	
   990  0040                     __stringtab:	
   991  0040                     stringcode:	
   992                           ;	String table - string pointers are 1 byte each
   993                           
   994  0040                     stringdir:	
   995  0040  3000               	movlw	high stringdir
   996  0041  008A               	movwf	10
   997  0042  0804               	movf	4,w
   998  0043  0A84               	incf	4,f
   999  0044  0782               	addwf	2,f
  1000  0045                     __stringbase:	
  1001  0045  3400               	retlw	0
  1002  0046                     __end_of__stringtab:	
  1003  0046                     _Nybble2MSBitNum:	
  1004  0046  3400               	retlw	0
  1005  0047  3401               	retlw	1
  1006  0048  3401               	retlw	1
  1007  0049  3402               	retlw	2
  1008  004A  3402               	retlw	2
  1009  004B  3402               	retlw	2
  1010  004C  3402               	retlw	2
  1011  004D  3403               	retlw	3
  1012  004E  3403               	retlw	3
  1013  004F  3403               	retlw	3
  1014  0050  3403               	retlw	3
  1015  0051  3403               	retlw	3
  1016  0052  3403               	retlw	3
  1017  0053  3403               	retlw	3
  1018  0054  3403               	retlw	3
  1019  0055                     __end_of_Nybble2MSBitNum:	
  1020  0055                     _BitNum2SetMask:	
  1021  0055  3401               	retlw	1
  1022  0056  3402               	retlw	2
  1023  0057  3404               	retlw	4
  1024  0058  3408               	retlw	8
  1025  0059  3410               	retlw	16
  1026  005A  3420               	retlw	32
  1027  005B  3440               	retlw	64
  1028  005C  3480               	retlw	128
  1029  005D                     __end_of_BitNum2SetMask:	
  1030  005D                     _EventQueues:	
  1031  005D  3420               	retlw	low (_Queue0| (0+256))
  1032  005E  3404               	retlw	4
  1033  005F  342C               	retlw	low (_Queue1| (0+256))
  1034  0060  3404               	retlw	4
  1035  0061  3438               	retlw	low (_Queue2| (0+256))
  1036  0062  3404               	retlw	4
  1037  0063  3444               	retlw	low (_Queue3| (0+256))
  1038  0064  3404               	retlw	4
  1039  0065                     __end_of_EventQueues:	
  1040  0065                     _ServDescList:	
  1041  0065  3403               	retlw	low (fp__InitUARTRXService-fpbase)
  1042  0066  3419               	retlw	low (fp__RunUARTRXService-fpbase)
  1043  0067  3401               	retlw	low (fp__InitUARTTXService-fpbase)
  1044  0068  341B               	retlw	low (fp__RunUARTTXService-fpbase)
  1045  0069  3405               	retlw	low (fp__InitSPIService-fpbase)
  1046  006A  3417               	retlw	low (fp__RunSPIService-fpbase)
  1047  006B  3407               	retlw	low (fp__InitPACSystemService-fpbase)
  1048  006C  3415               	retlw	low (fp__RunPACSystemService-fpbase)
  1049  006D                     __end_of_ServDescList:	
  1050  006D                     _Timer2PostFunc:	
  1051  006D  3411               	retlw	low (fp__PostUARTRXService-fpbase)
  1052  006E  340F               	retlw	low (fp__PostUARTTXService-fpbase)
  1053  006F  3413               	retlw	low (fp__PostPACSystemService-fpbase)
  1054  0070  3400               	retlw	0
  1055  0071  3400               	retlw	0
  1056  0072  3400               	retlw	0
  1057  0073  3400               	retlw	0
  1058  0074  3400               	retlw	0
  1059  0075                     __end_of_Timer2PostFunc:	
  1060  0075                     _ES_EventList:	
  1061  0075  340B               	retlw	low (fp__CheckUARTRXEvent-fpbase)
  1062  0076  340D               	retlw	low (fp__CheckUARTTXEvent-fpbase)
  1063  0077  3409               	retlw	low (fp__CheckSPIEvent-fpbase)
  1064  0078                     __end_of_ES_EventList:	
  1065  000B                     _INTCON	set	11
  1066  0007                     _PORTC	set	7
  1067  001A                     _RCREG	set	26
  1068  0013                     _SSPBUF	set	19
  1069  0014                     _SSPCON	set	20
  1070  0001                     _TMR0	set	1
  1071  0019                     _TXREG	set	25
  1072  00C4                     _CREN	set	196
  1073  005F                     _GIE	set	95
  1074  005E                     _PEIE	set	94
  1075  0038                     _RC0	set	56
  1076  003B                     _RC3	set	59
  1077  003F                     _RC7	set	63
  1078  0065                     _RCIF	set	101
  1079  00C7                     _SPEN	set	199
  1080  0063                     _SSPIF	set	99
  1081  005D                     _T0IE	set	93
  1082  005A                     _T0IF	set	90
  1083  0064                     _TXIF	set	100
  1084  008F                     _OSCCON	set	143
  1085  0099                     _SPBRG	set	153
  1086  009A                     _SPBRGH	set	154
  1087  0094                     _SSPSTAT	set	148
  1088  04A0                     _BF	set	1184
  1089  04DB                     _BRG16	set	1243
  1090  04C2                     _BRGH	set	1218
  1091  0408                     _PS0	set	1032
  1092  0409                     _PS1	set	1033
  1093  040A                     _PS2	set	1034
  1094  040B                     _PSA	set	1035
  1095  0465                     _RCIE	set	1125
  1096  0463                     _SSPIE	set	1123
  1097  04C4                     _SYNC	set	1220
  1098  040D                     _T0CS	set	1037
  1099  0434                     _TRISB4	set	1076
  1100  0436                     _TRISB6	set	1078
  1101  0438                     _TRISC0	set	1080
  1102  043B                     _TRISC3	set	1083
  1103  043E                     _TRISC6	set	1086
  1104  043F                     _TRISC7	set	1087
  1105  04C5                     _TXEN	set	1221
  1106  0464                     _TXIE	set	1124
  1107  08FB                     _ANS11	set	2299
  1108  08F4                     _ANS4	set	2292
  1109  08F7                     _ANS7	set	2295
  1110  08F9                     _ANS9	set	2297
  1111                           
  1112                           ; #config settings
  1113  0000                     
  1114                           	psect	cinit
  1115  0013                     start_initialization:	
  1116  0013                     __initialization:	
  1117                           
  1118                           ; Clear objects allocated to COMMON
  1119  0013  01FD               	clrf	__pbssCOMMON& (0+127)
  1120                           
  1121                           ; Clear objects allocated to BANK0
  1122  0014  1383               	bcf	3,7	;select IRP bank0
  1123  0015  304E               	movlw	low __pbssBANK0
  1124  0016  0084               	movwf	4
  1125  0017  306D               	movlw	low (__pbssBANK0+31)
  1126  0018  118A  27F3  118A   	fcall	clear_ram0
  1127                           
  1128                           ; Clear objects allocated to BANK1
  1129  001B  30A0               	movlw	low __pbssBANK1
  1130  001C  0084               	movwf	4
  1131  001D  30E1               	movlw	low (__pbssBANK1+65)
  1132  001E  118A  27F3  118A   	fcall	clear_ram0
  1133                           
  1134                           ; Clear objects allocated to BANK2
  1135  0021  1783               	bsf	3,7	;select IRP bank2
  1136  0022  3020               	movlw	low __pbssBANK2
  1137  0023  0084               	movwf	4
  1138  0024  3050               	movlw	low (__pbssBANK2+48)
  1139  0025  118A  27F3         	fcall	clear_ram0
  1140                           
  1141                           ; Initialize objects allocated to BANK1
  1142  0027  1683               	bsf	3,5	;RP0=1, select bank1
  1143  0028  1303               	bcf	3,6	;RP1=0, select bank1
  1144                           
  1145                           ;initializer for _statusBuffer
  1146  0029  30FF               	movlw	255
  1147  002A  00E1               	movwf	__pdataBANK1& (0+127)
  1148  002B  30FF               	movlw	255
  1149  002C  00E2               	movwf	(__pdataBANK1+1)& (0+127)
  1150  002D  30FF               	movlw	255
  1151  002E  00E3               	movwf	(__pdataBANK1+2)& (0+127)
  1152  002F  30FF               	movlw	255
  1153  0030  00E4               	movwf	(__pdataBANK1+3)& (0+127)
  1154  0031  30FF               	movlw	255
  1155  0032  00E5               	movwf	(__pdataBANK1+4)& (0+127)
  1156  0033  30FF               	movlw	255
  1157  0034  00E6               	movwf	(__pdataBANK1+5)& (0+127)
  1158                           
  1159                           ; Initialize objects allocated to BANK0
  1160  0035  1283               	bcf	3,5	;RP0=0, select bank0
  1161  0036  1303               	bcf	3,6	;RP1=0, select bank0
  1162                           
  1163                           ;initializer for _responseBytes
  1164  0037  30FF               	movlw	255
  1165  0038  00ED               	movwf	__pdataBANK0& (0+127)
  1166  0039  30FF               	movlw	255
  1167  003A  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  1168  003B  30FF               	movlw	255
  1169  003C  00EF               	movwf	(__pdataBANK0+2)& (0+127)
  1170  003D                     end_of_initialization:	
  1171                           ;End of C runtime variable initialization code
  1172                           
  1173  003D                     __end_of__initialization:	
  1174  003D  0183               	clrf	3
  1175  003E  118A  2878         	ljmp	_main	;jump to C main() function
  1176                           
  1177                           	psect	bssCOMMON
  1178  007D                     __pbssCOMMON:	
  1179  007D                     UARTRXIntResponse@currentByteIndex:	
  1180  007D                     	ds	1
  1181                           
  1182                           	psect	bssBANK0
  1183  004E                     __pbssBANK0:	
  1184  004E                     ES_Timer_RTI_Resp@NeedsProcessing:	
  1185  004E                     	ds	1
  1186  004F                     ES_Timer_RTI_Resp@NextTimer2Process:	
  1187  004F                     	ds	1
  1188  0050                     PACSystemService@MyPriority:	
  1189  0050                     	ds	1
  1190  0051                     SPI_SM@MyPriority:	
  1191  0051                     	ds	1
  1192  0052                     SPI_SM@currentState:	
  1193  0052                     	ds	1
  1194  0053                     UARTRXIntResponse@bodyByteCount:	
  1195  0053                     	ds	1
  1196  0054                     UARTRXIntResponse@checksum:	
  1197  0054                     	ds	1
  1198  0055                     UART_TX_SM@MyPriority:	
  1199  0055                     	ds	1
  1200  0056                     UART_TX_SM@currentState:	
  1201  0056                     	ds	1
  1202  0057                     _MyPriority:	
  1203  0057                     	ds	1
  1204  0058                     _RXFlag:	
  1205  0058                     	ds	1
  1206  0059                     _Ready:	
  1207  0059                     	ds	1
  1208  005A                     _SPIBuffer:	
  1209  005A                     	ds	1
  1210  005B                     _TMR_ActiveFlags:	
  1211  005B                     	ds	1
  1212  005C                     _TickCount:	
  1213  005C                     	ds	1
  1214  005D                     _colorRequestData:	
  1215  005D                     	ds	1
  1216  005E                     _commOpen:	
  1217  005E                     	ds	1
  1218  005F                     _currentState:	
  1219  005F                     	ds	1
  1220  0060                     _hasHeartbeat:	
  1221  0060                     	ds	1
  1222  0061                     _index:	
  1223  0061                     	ds	1
  1224  0062                     _length:	
  1225  0062                     	ds	1
  1226  0063                     _newRequest:	
  1227  0063                     	ds	1
  1228  0064                     _newResponseAvailable:	
  1229  0064                     	ds	1
  1230  0065                     _radioPing:	
  1231  0065                     	ds	1
  1232  0066                     _readRXIndex:	
  1233  0066                     	ds	1
  1234  0067                     _readRespIndex:	
  1235  0067                     	ds	1
  1236  0068                     _readStatIndex:	
  1237  0068                     	ds	1
  1238  0069                     _sendCompleteFlag:	
  1239  0069                     	ds	1
  1240  006A                     _writeRXIndex:	
  1241  006A                     	ds	1
  1242  006B                     _writeRespIndex:	
  1243  006B                     	ds	1
  1244  006C                     _writeStatIndex:	
  1245  006C                     	ds	1
  1246                           
  1247                           	psect	dataBANK0
  1248  006D                     __pdataBANK0:	
  1249  006D                     _responseBytes:	
  1250  006D                     	ds	3
  1251                           
  1252                           	psect	bssBANK1
  1253  00A0                     __pbssBANK1:	
  1254  00A0                     _RXBuffer:	
  1255  00A0                     	ds	20
  1256  00B4                     _TMR_TimerArray:	
  1257  00B4                     	ds	16
  1258  00C4                     _XBeePacket:	
  1259  00C4                     	ds	10
  1260  00CE                     ES_Timer_RTI_Resp@NewEvent:	
  1261  00CE                     	ds	3
  1262  00D1                     UART_TX_SM@superPACAddr:	
  1263  00D1                     	ds	2
  1264  00D3                     _superPACAddr:	
  1265  00D3                     	ds	2
  1266  00D5                     _time:	
  1267  00D5                     	ds	2
  1268  00D7                     _TXError:	
  1269  00D7                     	ds	1
  1270  00D8                     _responseBuffer:	
  1271  00D8                     	ds	6
  1272  00DE                     ES_Run@ThisEvent:	
  1273  00DE                     	ds	3
  1274                           
  1275                           	psect	dataBANK1
  1276  00E1                     __pdataBANK1:	
  1277  00E1                     _statusBuffer:	
  1278  00E1                     	ds	6
  1279                           
  1280                           	psect	bssBANK2
  1281  0120                     __pbssBANK2:	
  1282  0120                     _Queue0:	
  1283  0120                     	ds	12
  1284  012C                     _Queue1:	
  1285  012C                     	ds	12
  1286  0138                     _Queue2:	
  1287  0138                     	ds	12
  1288  0144                     _Queue3:	
  1289  0144                     	ds	12
  1290                           
  1291                           	psect	clrtext
  1292  07F3                     clear_ram0:	
  1293                           ;	Called with FSR containing the base address, and
  1294                           ;	W with the last address+1
  1295                           
  1296  07F3  0064               	clrwdt	;clear the watchdog before getting into this loop
  1297  07F4                     clrloop0:	
  1298  07F4  0180               	clrf	0	;clear RAM location pointed to by FSR
  1299  07F5  0A84               	incf	4,f	;increment pointer
  1300  07F6  0604               	xorwf	4,w	;XOR with final address
  1301  07F7  1903               	btfsc	3,2	;have we reached the end yet?
  1302  07F8  3400               	retlw	0	;all done for this memory range, return
  1303  07F9  0604               	xorwf	4,w	;XOR again to restore value
  1304  07FA  2FF4               	goto	clrloop0	;do the next byte
  1305                           
  1306                           	psect	cstackCOMMON
  1307  0070                     __pcstackCOMMON:	
  1308  0070                     ?_CheckUARTRXEvent:	
  1309  0070                     ?_CheckUARTTXEvent:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312  0070                     ?_CheckSPIEvent:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0070                     ?_ES_Sys_Timer_Init:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0070                     ?_ES_GetMSBitSet:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0070                     ?_ES_Timer_RTI_Resp:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0070                     ?_IsTimerPending:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0070                     ?_SPIIntResponse:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0070                     ?_UARTRXIntResponse:	
  1331                           ; 1 bytes @ 0x0
  1332                           
  1333  0070                     ?_UARTTXIntResponse:	
  1334                           ; 1 bytes @ 0x0
  1335                           
  1336  0070                     ??_UARTTXIntResponse:	
  1337                           ; 1 bytes @ 0x0
  1338                           
  1339  0070                     ?_TX_clearXBeePacket:	
  1340                           ; 1 bytes @ 0x0
  1341                           
  1342  0070                     ?_TX_appendXBeePacket:	
  1343                           ; 1 bytes @ 0x0
  1344                           
  1345  0070                     ?_TX_getChecksum:	
  1346                           ; 1 bytes @ 0x0
  1347                           
  1348  0070                     ?_retrySend:	
  1349                           ; 1 bytes @ 0x0
  1350                           
  1351  0070                     ?_ES_Initialize:	
  1352                           ; 1 bytes @ 0x0
  1353                           
  1354  0070                     ?_ES_Run:	
  1355                           ; 1 bytes @ 0x0
  1356                           
  1357  0070                     ?_ISR:	
  1358                           ; 1 bytes @ 0x0
  1359                           
  1360  0070                     ?_USART_Init:	
  1361                           ; 1 bytes @ 0x0
  1362                           
  1363  0070                     ?_main:	
  1364                           ; 1 bytes @ 0x0
  1365                           
  1366  0070                     ?_RX_newResponseReady:	
  1367                           ; 1 bytes @ 0x0
  1368                           
  1369  0070                     ??_RX_newResponseReady:	
  1370                           ; 1 bytes @ 0x0
  1371                           
  1372  0070                     ?_RX_clearResponseReady:	
  1373                           ; 1 bytes @ 0x0
  1374                           
  1375  0070                     ??_RX_clearResponseReady:	
  1376                           ; 1 bytes @ 0x0
  1377                           
  1378  0070                     ?_RX_getStatusBuffer:	
  1379                           ; 1 bytes @ 0x0
  1380                           
  1381  0070                     ?_RX_getResponseBuffer:	
  1382                           ; 1 bytes @ 0x0
  1383                           
  1384  0070                     ?i1___bmul:	
  1385                           ; 1 bytes @ 0x0
  1386                           
  1387  0070                     ES_Initialize@NewRate:	
  1388                           ; 1 bytes @ 0x0
  1389                           
  1390  0070                     i1___bmul@multiplicand:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393                           
  1394                           ; 1 bytes @ 0x0
  1395  0070                     	ds	1
  1396  0071                     ??i1___bmul:	
  1397                           
  1398                           ; 1 bytes @ 0x1
  1399  0071                     	ds	1
  1400  0072                     i1___bmul@multiplier:	
  1401                           
  1402                           ; 1 bytes @ 0x2
  1403  0072                     	ds	1
  1404  0073                     i1___bmul@product:	
  1405                           
  1406                           ; 1 bytes @ 0x3
  1407  0073                     	ds	1
  1408  0074                     ??_UARTRXIntResponse:	
  1409  0074                     ??_RX_getStatusBuffer:	
  1410                           ; 1 bytes @ 0x4
  1411                           
  1412  0074                     ??_RX_getResponseBuffer:	
  1413                           ; 1 bytes @ 0x4
  1414                           
  1415                           
  1416                           ; 1 bytes @ 0x4
  1417  0074                     	ds	1
  1418  0075                     ??_SPIIntResponse:	
  1419                           
  1420                           ; 1 bytes @ 0x5
  1421  0075                     	ds	1
  1422  0076                     SPIIntResponse@readByte:	
  1423                           
  1424                           ; 1 bytes @ 0x6
  1425  0076                     	ds	1
  1426  0077                     UARTRXIntResponse@newByte:	
  1427                           
  1428                           ; 1 bytes @ 0x7
  1429  0077                     	ds	1
  1430  0078                     ??_ISR:	
  1431                           
  1432                           ; 1 bytes @ 0x8
  1433  0078                     	ds	5
  1434                           
  1435                           	psect	cstackBANK0
  1436  0020                     __pcstackBANK0:	
  1437  0020                     ??_ES_Sys_Timer_Init:	
  1438  0020                     ?_ES_InitQueue:	
  1439                           ; 1 bytes @ 0x0
  1440                           
  1441  0020                     ??_ES_GetMSBitSet:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0020                     ??_IsTimerPending:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0020                     ??_TX_clearXBeePacket:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0020                     ??_TX_appendXBeePacket:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0020                     ??_TX_getChecksum:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0020                     ?_ES_Timer_InitTimer:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0020                     ??_USART_Init:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462  0020                     ?___bmul:	
  1463                           ; 1 bytes @ 0x0
  1464                           
  1465  0020                     ?_RunSPIService:	
  1466                           ; 1 bytes @ 0x0
  1467                           
  1468  0020                     ES_InitQueue@BlockSize:	
  1469                           ; 3 bytes @ 0x0
  1470                           
  1471  0020                     ___bmul@multiplicand:	
  1472                           ; 1 bytes @ 0x0
  1473                           
  1474  0020                     ES_Timer_InitTimer@NewTime:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  0020                     RunSPIService@ThisEvent:	
  1478                           ; 2 bytes @ 0x0
  1479                           
  1480                           
  1481                           ; 3 bytes @ 0x0
  1482  0020                     	ds	1
  1483  0021                     ??_ES_InitQueue:	
  1484  0021                     ??___bmul:	
  1485                           ; 1 bytes @ 0x1
  1486                           
  1487  0021                     TX_appendXBeePacket@newByte:	
  1488                           ; 1 bytes @ 0x1
  1489                           
  1490  0021                     TX_getChecksum@chk:	
  1491                           ; 1 bytes @ 0x1
  1492                           
  1493                           
  1494                           ; 1 bytes @ 0x1
  1495  0021                     	ds	1
  1496  0022                     ??_ES_Timer_InitTimer:	
  1497  0022                     ES_InitQueue@pBlock:	
  1498                           ; 1 bytes @ 0x2
  1499                           
  1500  0022                     TX_getChecksum@i:	
  1501                           ; 1 bytes @ 0x2
  1502                           
  1503  0022                     ___bmul@product:	
  1504                           ; 1 bytes @ 0x2
  1505                           
  1506                           
  1507                           ; 1 bytes @ 0x2
  1508  0022                     	ds	1
  1509  0023                     ??_RunSPIService:	
  1510  0023                     ES_GetMSBitSet@Val2Check:	
  1511                           ; 1 bytes @ 0x3
  1512                           
  1513  0023                     ES_InitQueue@pThisQueue:	
  1514                           ; 1 bytes @ 0x3
  1515                           
  1516  0023                     ES_Timer_InitTimer@Num:	
  1517                           ; 1 bytes @ 0x3
  1518                           
  1519  0023                     ___bmul@multiplier:	
  1520                           ; 1 bytes @ 0x3
  1521                           
  1522  0023                     RunSPIService@ReturnEvent:	
  1523                           ; 1 bytes @ 0x3
  1524                           
  1525                           
  1526                           ; 3 bytes @ 0x3
  1527  0023                     	ds	1
  1528  0024                     ?_ES_DeQueue:	
  1529  0024                     ?_ES_EnQueueFIFO:	
  1530                           ; 1 bytes @ 0x4
  1531                           
  1532  0024                     ?_RunPACSystemService:	
  1533                           ; 1 bytes @ 0x4
  1534                           
  1535  0024                     ES_GetMSBitSet@ReturnVal:	
  1536                           ; 3 bytes @ 0x4
  1537                           
  1538  0024                     ES_DeQueue@pReturnEvent:	
  1539                           ; 1 bytes @ 0x4
  1540                           
  1541  0024                     ES_EnQueueFIFO@Event2Add:	
  1542                           ; 1 bytes @ 0x4
  1543                           
  1544  0024                     RunPACSystemService@ThisEvent:	
  1545                           ; 3 bytes @ 0x4
  1546                           
  1547                           
  1548                           ; 3 bytes @ 0x4
  1549  0024                     	ds	1
  1550  0025                     ??_ES_DeQueue:	
  1551  0025                     ES_GetMSBitSet@Nybble2Test:	
  1552                           ; 1 bytes @ 0x5
  1553                           
  1554                           
  1555                           ; 1 bytes @ 0x5
  1556  0025                     	ds	1
  1557  0026                     ES_GetMSBitSet@LoopCntr:	
  1558                           
  1559                           ; 1 bytes @ 0x6
  1560  0026                     	ds	1
  1561  0027                     ??_RunPACSystemService:	
  1562  0027                     ??_ES_EnQueueFIFO:	
  1563                           ; 1 bytes @ 0x7
  1564                           
  1565                           
  1566                           ; 1 bytes @ 0x7
  1567  0027                     	ds	1
  1568  0028                     RunPACSystemService@ReturnEvent:	
  1569                           
  1570                           ; 3 bytes @ 0x8
  1571  0028                     	ds	1
  1572  0029                     ES_EnQueueFIFO@saveCrit:	
  1573                           
  1574                           ; 1 bytes @ 0x9
  1575  0029                     	ds	1
  1576  002A                     ES_EnQueueFIFO@InsertionPoint:	
  1577  002A                     ES_DeQueue@saveCrit:	
  1578                           ; 1 bytes @ 0xA
  1579                           
  1580                           
  1581                           ; 1 bytes @ 0xA
  1582  002A                     	ds	1
  1583  002B                     ES_EnQueueFIFO@pBlock:	
  1584  002B                     ES_DeQueue@NumLeft:	
  1585                           ; 1 bytes @ 0xB
  1586                           
  1587                           
  1588                           ; 1 bytes @ 0xB
  1589  002B                     	ds	1
  1590  002C                     ES_EnQueueFIFO@pThisQueue:	
  1591  002C                     ES_DeQueue@pBlock:	
  1592                           ; 1 bytes @ 0xC
  1593                           
  1594                           
  1595                           ; 1 bytes @ 0xC
  1596  002C                     	ds	1
  1597  002D                     ?_ES_PostToService:	
  1598  002D                     ES_DeQueue@pThisQueue:	
  1599                           ; 1 bytes @ 0xD
  1600                           
  1601  002D                     ES_PostToService@TheEvent:	
  1602                           ; 1 bytes @ 0xD
  1603                           
  1604                           
  1605                           ; 3 bytes @ 0xD
  1606  002D                     	ds	3
  1607  0030                     ??_ES_PostToService:	
  1608                           
  1609                           ; 1 bytes @ 0x10
  1610  0030                     	ds	1
  1611  0031                     ES_PostToService@WhichService:	
  1612                           
  1613                           ; 1 bytes @ 0x11
  1614  0031                     	ds	1
  1615  0032                     ??_CheckUARTRXEvent:	
  1616  0032                     ??_CheckUARTTXEvent:	
  1617                           ; 1 bytes @ 0x12
  1618                           
  1619  0032                     ??_CheckSPIEvent:	
  1620                           ; 1 bytes @ 0x12
  1621                           
  1622  0032                     ?_InitUARTRXService:	
  1623                           ; 1 bytes @ 0x12
  1624                           
  1625  0032                     ?_InitUARTTXService:	
  1626                           ; 1 bytes @ 0x12
  1627                           
  1628  0032                     ?_InitSPIService:	
  1629                           ; 1 bytes @ 0x12
  1630                           
  1631  0032                     ?_InitPACSystemService:	
  1632                           ; 1 bytes @ 0x12
  1633                           
  1634  0032                     ?_PostUARTRXService:	
  1635                           ; 1 bytes @ 0x12
  1636                           
  1637  0032                     ?_PostUARTTXService:	
  1638                           ; 1 bytes @ 0x12
  1639                           
  1640  0032                     ?_PostPACSystemService:	
  1641                           ; 1 bytes @ 0x12
  1642                           
  1643  0032                     ??_retrySend:	
  1644                           ; 1 bytes @ 0x12
  1645                           
  1646  0032                     ?_RunUARTRXService:	
  1647                           ; 1 bytes @ 0x12
  1648                           
  1649  0032                     InitUARTRXService@Priority:	
  1650                           ; 3 bytes @ 0x12
  1651                           
  1652  0032                     InitUARTTXService@Priority:	
  1653                           ; 1 bytes @ 0x12
  1654                           
  1655  0032                     InitPACSystemService@Priority:	
  1656                           ; 1 bytes @ 0x12
  1657                           
  1658  0032                     InitSPIService@Priority:	
  1659                           ; 1 bytes @ 0x12
  1660                           
  1661  0032                     PostUARTRXService@ThisEvent:	
  1662                           ; 1 bytes @ 0x12
  1663                           
  1664  0032                     RunUARTRXService@ThisEvent:	
  1665                           ; 3 bytes @ 0x12
  1666                           
  1667  0032                     PostUARTTXService@ThisEvent:	
  1668                           ; 3 bytes @ 0x12
  1669                           
  1670  0032                     PostPACSystemService@ThisEvent:	
  1671                           ; 3 bytes @ 0x12
  1672                           
  1673                           
  1674                           ; 3 bytes @ 0x12
  1675  0032                     	ds	1
  1676  0033                     ??_InitUARTRXService:	
  1677  0033                     ??_InitUARTTXService:	
  1678                           ; 1 bytes @ 0x13
  1679                           
  1680  0033                     ??_InitSPIService:	
  1681                           ; 1 bytes @ 0x13
  1682                           
  1683  0033                     ??_InitPACSystemService:	
  1684                           ; 1 bytes @ 0x13
  1685                           
  1686  0033                     CheckUARTRXEvent@CommEvent:	
  1687                           ; 1 bytes @ 0x13
  1688                           
  1689  0033                     CheckUARTTXEvent@TXEvent:	
  1690                           ; 3 bytes @ 0x13
  1691                           
  1692  0033                     retrySend@LEDEvent:	
  1693                           ; 3 bytes @ 0x13
  1694                           
  1695                           
  1696                           ; 3 bytes @ 0x13
  1697  0033                     	ds	1
  1698  0034                     InitUARTRXService@ThisEvent:	
  1699  0034                     InitUARTTXService@ThisEvent:	
  1700                           ; 3 bytes @ 0x14
  1701                           
  1702  0034                     InitPACSystemService@ThisEvent:	
  1703                           ; 3 bytes @ 0x14
  1704                           
  1705  0034                     InitSPIService@ThisEvent:	
  1706                           ; 3 bytes @ 0x14
  1707                           
  1708  0034                     CheckSPIEvent@SPIEvent:	
  1709                           ; 3 bytes @ 0x14
  1710                           
  1711                           
  1712                           ; 3 bytes @ 0x14
  1713  0034                     	ds	1
  1714  0035                     ??_RunUARTRXService:	
  1715  0035                     ??_ES_Timer_RTI_Resp:	
  1716                           ; 1 bytes @ 0x15
  1717                           
  1718  0035                     ??_PostUARTRXService:	
  1719                           ; 1 bytes @ 0x15
  1720                           
  1721  0035                     ??_PostUARTTXService:	
  1722                           ; 1 bytes @ 0x15
  1723                           
  1724  0035                     ??_PostPACSystemService:	
  1725                           ; 1 bytes @ 0x15
  1726                           
  1727                           
  1728                           ; 1 bytes @ 0x15
  1729  0035                     	ds	1
  1730  0036                     ?_RunUARTTXService:	
  1731  0036                     RunUARTTXService@ThisEvent:	
  1732                           ; 3 bytes @ 0x16
  1733                           
  1734                           
  1735                           ; 3 bytes @ 0x16
  1736  0036                     	ds	1
  1737  0037                     ??_ES_Initialize:	
  1738                           
  1739                           ; 1 bytes @ 0x17
  1740  0037                     	ds	2
  1741  0039                     ??_RunUARTTXService:	
  1742  0039                     ES_Initialize@i:	
  1743                           ; 1 bytes @ 0x19
  1744                           
  1745                           
  1746                           ; 1 bytes @ 0x19
  1747  0039                     	ds	3
  1748  003C                     RunUARTRXService@ReturnEvent:	
  1749                           
  1750                           ; 3 bytes @ 0x1C
  1751  003C                     	ds	1
  1752  003D                     RunUARTTXService@ReturnEvent:	
  1753                           
  1754                           ; 3 bytes @ 0x1D
  1755  003D                     	ds	2
  1756  003F                     RunUARTRXService@msgAddr:	
  1757                           
  1758                           ; 2 bytes @ 0x1F
  1759  003F                     	ds	1
  1760  0040                     _RunUARTTXService$644:	
  1761                           
  1762                           ; 2 bytes @ 0x20
  1763  0040                     	ds	1
  1764  0041                     RunUARTRXService@addrEvent:	
  1765                           
  1766                           ; 3 bytes @ 0x21
  1767  0041                     	ds	3
  1768  0044                     RunUARTRXService@TXEvent:	
  1769                           
  1770                           ; 3 bytes @ 0x24
  1771  0044                     	ds	3
  1772  0047                     RunUARTRXService@i:	
  1773                           
  1774                           ; 1 bytes @ 0x27
  1775  0047                     	ds	1
  1776  0048                     RunUARTRXService@i_541:	
  1777                           
  1778                           ; 1 bytes @ 0x28
  1779  0048                     	ds	1
  1780  0049                     ??_ES_Run:	
  1781                           
  1782                           ; 1 bytes @ 0x29
  1783  0049                     	ds	2
  1784  004B                     ES_Run@HighestPrior:	
  1785                           
  1786                           ; 1 bytes @ 0x2B
  1787  004B                     	ds	1
  1788  004C                     ??_main:	
  1789                           
  1790                           ; 1 bytes @ 0x2C
  1791  004C                     	ds	1
  1792  004D                     main@ErrorType:	
  1793                           
  1794                           ; 1 bytes @ 0x2D
  1795  004D                     	ds	1
  1796                           
  1797                           	psect	maintext
  1798  0078                     __pmaintext:	
  1799 ;;
  1800 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1801 ;;
  1802 ;; *************** function _main *****************
  1803 ;; Defined at:
  1804 ;;		line 21 in file "main.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;		None
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;  ErrorType       1   45[BANK0 ] enum E1641
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1813 ;; Tracked objects:
  1814 ;;		On entry : B00/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1818 ;;      Params:         0       0       0       0
  1819 ;;      Locals:         0       1       0       0
  1820 ;;      Temps:          0       1       0       0
  1821 ;;      Totals:         0       2       0       0
  1822 ;;Total ram usage:        2 bytes
  1823 ;; Hardware stack levels required when called:   10
  1824 ;; This function calls:
  1825 ;;		_ES_Initialize
  1826 ;;		_ES_Run
  1827 ;;		_USART_Init
  1828 ;; This function is called by:
  1829 ;;		Startup code after reset
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           
  1834                           ;psect for function _main
  1835  0078                     _main:	
  1836                           
  1837                           ;main.c: 22: ES_Return_t ErrorType;
  1838                           ;main.c: 28: OSCCON = 0b01110000;
  1839                           
  1840                           ;incstack = 0
  1841 ;; hardware stack exceeded
  1842                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1843  0078  3070               	movlw	112
  1844  0079  1683               	bsf	3,5	;RP0=1, select bank1
  1845  007A  1303               	bcf	3,6	;RP1=0, select bank1
  1846  007B  008F               	movwf	15	;volatile
  1847                           
  1848                           ;main.c: 30: USART_Init();
  1849  007C  118A  27D9  118A   	fcall	_USART_Init
  1850                           
  1851                           ;main.c: 33: TRISC3 = 0;
  1852  007F  1683               	bsf	3,5	;RP0=1, select bank1
  1853  0080  1303               	bcf	3,6	;RP1=0, select bank1
  1854  0081  1187               	bcf	7,3	;volatile
  1855                           
  1856                           ;main.c: 34: ANS7 = 0;
  1857  0082  1283               	bcf	3,5	;RP0=0, select bank2
  1858  0083  1703               	bsf	3,6	;RP1=1, select bank2
  1859  0084  139E               	bcf	30,7	;volatile
  1860                           
  1861                           ;main.c: 35: RC3 = 0;
  1862  0085  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0086  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0087  1187               	bcf	7,3	;volatile
  1865                           
  1866                           ;main.c: 38: ErrorType = ES_Initialize(ES_Timer_RATE_1MS);
  1867  0088  3001               	movlw	1
  1868  0089  118A  2759  118A   	fcall	_ES_Initialize
  1869  008C  1283               	bcf	3,5	;RP0=0, select bank0
  1870  008D  1303               	bcf	3,6	;RP1=0, select bank0
  1871  008E  00CC               	movwf	??_main
  1872  008F  00CD               	movwf	main@ErrorType
  1873                           
  1874                           ;main.c: 41: if (ErrorType == Success) {
  1875  0090  084D               	movf	main@ErrorType,w
  1876  0091  1D03               	btfss	3,2
  1877  0092  289A               	goto	l3206
  1878                           
  1879                           ;main.c: 43: ErrorType = ES_Run();
  1880  0093  118A  2154  118A   	fcall	_ES_Run
  1881  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1883  0098  00CC               	movwf	??_main
  1884  0099  00CD               	movwf	main@ErrorType
  1885  009A                     l3206:	
  1886                           ;main.c: 57: }
  1887                           
  1888                           ;main.c: 56: break;
  1889                           
  1890                           ;main.c: 54: default:
  1891                           
  1892                           ;main.c: 53: break;
  1893                           
  1894                           ;main.c: 51: case FailedInit:
  1895                           
  1896                           ;main.c: 50: break;
  1897                           
  1898                           ;main.c: 48: case FailedPointer:
  1899                           
  1900                           ;main.c: 45: }
  1901                           ;main.c: 47: switch (ErrorType) {
  1902                           
  1903  009A  084D               	movf	main@ErrorType,w
  1904                           
  1905                           ; Switch size 1, requested type "space"
  1906                           ; Number of cases is 2, Range of values is 3 to 5
  1907                           ; switch strategies available:
  1908                           ; Name         Instructions Cycles
  1909                           ; simple_byte            7     4 (average)
  1910                           ; direct_byte           16    10 (fixed)
  1911                           ; jumptable            263     9 (fixed)
  1912                           ;	Chosen strategy is simple_byte
  1913  009B  3A03               	xorlw	3	; case 3
  1914  009C  1903               	skipnz
  1915  009D  28A2               	goto	l354
  1916  009E  3A06               	xorlw	6	; case 5
  1917  009F  1903               	skipnz
  1918  00A0  28A2               	goto	l354
  1919  00A1  28A2               	goto	l354
  1920  00A2                     l354:	
  1921                           ;main.c: 58: for (;;)
  1922                           
  1923                           
  1924                           ;main.c: 59: ;
  1925  00A2  28A2               	goto	l354
  1926  00A3                     __end_of_main:	
  1927                           
  1928                           	psect	text1
  1929  07D9                     __ptext1:	
  1930 ;; *************** function _USART_Init *****************
  1931 ;; Defined at:
  1932 ;;		line 11 in file "sci.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1946 ;;      Params:         0       0       0       0
  1947 ;;      Locals:         0       0       0       0
  1948 ;;      Temps:          0       0       0       0
  1949 ;;      Totals:         0       0       0       0
  1950 ;;Total ram usage:        0 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    4
  1953 ;; This function calls:
  1954 ;;		Nothing
  1955 ;; This function is called by:
  1956 ;;		_main
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           
  1961                           ;psect for function _USART_Init
  1962  07D9                     _USART_Init:	
  1963                           
  1964                           ;sci.c: 13: GIE = 0;
  1965                           
  1966                           ;incstack = 0
  1967                           ; Regs used in _USART_Init: [wreg+status,2]
  1968  07D9  138B               	bcf	11,7	;volatile
  1969                           
  1970                           ;sci.c: 16: SPBRG = 129;
  1971  07DA  3081               	movlw	129
  1972  07DB  1683               	bsf	3,5	;RP0=1, select bank1
  1973  07DC  1303               	bcf	3,6	;RP1=0, select bank1
  1974  07DD  0099               	movwf	25	;volatile
  1975                           
  1976                           ;sci.c: 17: SPBRGH = 0;
  1977  07DE  019A               	clrf	26	;volatile
  1978                           
  1979                           ;sci.c: 18: BRGH = 1;
  1980  07DF  1518               	bsf	24,2	;volatile
  1981                           
  1982                           ;sci.c: 19: BRG16 = 0;
  1983  07E0  119B               	bcf	27,3	;volatile
  1984                           
  1985                           ;sci.c: 22: SYNC = 0;
  1986  07E1  1218               	bcf	24,4	;volatile
  1987                           
  1988                           ;sci.c: 23: SPEN = 1;
  1989  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  1990  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  1991  07E4  1798               	bsf	24,7	;volatile
  1992                           
  1993                           ;sci.c: 26: TXIE = 0;
  1994  07E5  1683               	bsf	3,5	;RP0=1, select bank1
  1995  07E6  1303               	bcf	3,6	;RP1=0, select bank1
  1996  07E7  120C               	bcf	12,4	;volatile
  1997                           
  1998                           ;sci.c: 27: RCIE = 0;
  1999  07E8  128C               	bcf	12,5	;volatile
  2000                           
  2001                           ;sci.c: 28: PEIE = 0;
  2002  07E9  130B               	bcf	11,6	;volatile
  2003                           
  2004                           ;sci.c: 31: TXEN = 1;
  2005  07EA  1698               	bsf	24,5	;volatile
  2006                           
  2007                           ;sci.c: 34: CREN = 1;
  2008  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  2009  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  2010  07ED  1618               	bsf	24,4	;volatile
  2011                           
  2012                           ;sci.c: 35: ANS11 = 0;
  2013  07EE  1283               	bcf	3,5	;RP0=0, select bank2
  2014  07EF  1703               	bsf	3,6	;RP1=1, select bank2
  2015  07F0  119F               	bcf	31,3	;volatile
  2016                           
  2017                           ;sci.c: 38: GIE = 1;
  2018  07F1  178B               	bsf	11,7	;volatile
  2019  07F2  0008               	return
  2020  07F3                     __end_of_USART_Init:	
  2021                           
  2022                           	psect	text4
  2023  0000                     __ptext4:	
  2024 ;; *************** function _retrySend *****************
  2025 ;; Defined at:
  2026 ;;		line 306 in file "UART_TX_SM.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  LEDEvent        3   19[BANK0 ] struct ES_Event_t
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2040 ;;      Params:         0       0       0       0
  2041 ;;      Locals:         0       3       0       0
  2042 ;;      Temps:          0       1       0       0
  2043 ;;      Totals:         0       4       0       0
  2044 ;;Total ram usage:        4 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    7
  2047 ;; This function calls:
  2048 ;;		_ES_PostToService
  2049 ;; This function is called by:
  2050 ;;		_RunUARTTXService
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054  0000                     _retrySend:	
  2055                           ;psect for function _retrySend
  2056                           
  2057  0000                     __end_of_retrySend:	
  2058                           ;UART_TX_SM.c: 315: TXIE = 1;
  2059                           
  2060                           ;UART_TX_SM.c: 314: currentState = TX_SendMSG;
  2061                           
  2062                           ;UART_TX_SM.c: 313: index = 0;
  2063                           
  2064                           ;UART_TX_SM.c: 310: ES_PostToService(3, LEDEvent);
  2065                           
  2066                           ;UART_TX_SM.c: 309: LEDEvent.EventParam = TX_ERR_TIMEOUT;
  2067                           
  2068                           ;UART_TX_SM.c: 307: ES_Event LEDEvent;
  2069                           ;UART_TX_SM.c: 308: LEDEvent.EventType = ES_TOGGLE_LED;
  2070                           
  2071                           ;incstack = 0
  2072 ;; hardware stack exceeded
  2073                           ; Regs used in _retrySend: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2074                           
  2075                           
  2076                           	psect	text14
  2077  0122                     __ptext14:	
  2078 ;; *************** function _PostPACSystemService *****************
  2079 ;; Defined at:
  2080 ;;		line 92 in file "PACSystemService.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;  ThisEvent       3   18[BANK0 ] struct ES_Event_t
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;		None
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  1    wreg      unsigned char 
  2087 ;; Registers used:
  2088 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 0/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2094 ;;      Params:         0       3       0       0
  2095 ;;      Locals:         0       0       0       0
  2096 ;;      Temps:          0       0       0       0
  2097 ;;      Totals:         0       3       0       0
  2098 ;;Total ram usage:        3 bytes
  2099 ;; Hardware stack levels used:    1
  2100 ;; Hardware stack levels required when called:    7
  2101 ;; This function calls:
  2102 ;;		_ES_PostToService
  2103 ;; This function is called by:
  2104 ;;		_ES_Timer_RTI_Resp
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           
  2109                           ;psect for function _PostPACSystemService
  2110  0122                     _PostPACSystemService:	
  2111                           
  2112                           ;PACSystemService.c: 93: return ES_PostToService(MyPriority, ThisEvent);
  2113                           ;	Return value of _PostPACSystemService is never used
  2114                           
  2115                           ;incstack = 0
  2116 ;; hardware stack exceeded
  2117                           ; Regs used in _PostPACSystemService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2118  0122  1283               	bcf	3,5	;RP0=0, select bank0
  2119  0123  1303               	bcf	3,6	;RP1=0, select bank0
  2120  0124  0832               	movf	PostPACSystemService@ThisEvent,w
  2121  0125  00AD               	movwf	ES_PostToService@TheEvent
  2122  0126  0833               	movf	PostPACSystemService@ThisEvent+1,w
  2123  0127  00AE               	movwf	ES_PostToService@TheEvent+1
  2124  0128  0834               	movf	PostPACSystemService@ThisEvent+2,w
  2125  0129  00AF               	movwf	ES_PostToService@TheEvent+2
  2126  012A  0850               	movf	PACSystemService@MyPriority,w
  2127  012B  2E68               	ljmp	_ES_PostToService
  2128  012C                     __end_of_PostPACSystemService:	
  2129  012C                     __ptext15:	
  2130 ;; *************** function _PostUARTRXService *****************
  2131 ;; Defined at:
  2132 ;;		line 183 in file "UART_RX_SM.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;  ThisEvent       3   18[BANK0 ] struct ES_Event_t
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;		None
  2137 ;; Return value:  Size  Location     Type
  2138 ;;                  1    wreg      unsigned char 
  2139 ;; Registers used:
  2140 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2141 ;; Tracked objects:
  2142 ;;		On entry : 0/0
  2143 ;;		On exit  : 0/0
  2144 ;;		Unchanged: 0/0
  2145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2146 ;;      Params:         0       3       0       0
  2147 ;;      Locals:         0       0       0       0
  2148 ;;      Temps:          0       0       0       0
  2149 ;;      Totals:         0       3       0       0
  2150 ;;Total ram usage:        3 bytes
  2151 ;; Hardware stack levels used:    1
  2152 ;; Hardware stack levels required when called:    7
  2153 ;; This function calls:
  2154 ;;		_ES_PostToService
  2155 ;; This function is called by:
  2156 ;;		_ES_Timer_RTI_Resp
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           
  2161                           ;psect for function _PostUARTRXService
  2162  012C                     _PostUARTRXService:	
  2163                           
  2164                           ;UART_RX_SM.c: 184: return ES_PostToService(MyPriority, ThisEvent);
  2165                           ;	Return value of _PostUARTRXService is never used
  2166                           
  2167                           ;incstack = 0
  2168 ;; hardware stack exceeded
  2169                           ; Regs used in _PostUARTRXService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2170  012C  1283               	bcf	3,5	;RP0=0, select bank0
  2171  012D  1303               	bcf	3,6	;RP1=0, select bank0
  2172  012E  0832               	movf	PostUARTRXService@ThisEvent,w
  2173  012F  00AD               	movwf	ES_PostToService@TheEvent
  2174  0130  0833               	movf	PostUARTRXService@ThisEvent+1,w
  2175  0131  00AE               	movwf	ES_PostToService@TheEvent+1
  2176  0132  0834               	movf	PostUARTRXService@ThisEvent+2,w
  2177  0133  00AF               	movwf	ES_PostToService@TheEvent+2
  2178  0134  0857               	movf	_MyPriority,w
  2179  0135  2E68               	ljmp	_ES_PostToService
  2180  0136                     __end_of_PostUARTRXService:	
  2181  0136                     __ptext16:	
  2182 ;; *************** function _PostUARTTXService *****************
  2183 ;; Defined at:
  2184 ;;		line 125 in file "UART_TX_SM.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;  ThisEvent       3   18[BANK0 ] struct ES_Event_t
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      unsigned char 
  2191 ;; Registers used:
  2192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2198 ;;      Params:         0       3       0       0
  2199 ;;      Locals:         0       0       0       0
  2200 ;;      Temps:          0       0       0       0
  2201 ;;      Totals:         0       3       0       0
  2202 ;;Total ram usage:        3 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    7
  2205 ;; This function calls:
  2206 ;;		_ES_PostToService
  2207 ;; This function is called by:
  2208 ;;		_ES_Timer_RTI_Resp
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           
  2213                           ;psect for function _PostUARTTXService
  2214  0136                     _PostUARTTXService:	
  2215                           
  2216                           ;UART_TX_SM.c: 126: return ES_PostToService(MyPriority, ThisEvent);
  2217                           ;	Return value of _PostUARTTXService is never used
  2218                           
  2219                           ;incstack = 0
  2220 ;; hardware stack exceeded
  2221                           ; Regs used in _PostUARTTXService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2222  0136  1283               	bcf	3,5	;RP0=0, select bank0
  2223  0137  1303               	bcf	3,6	;RP1=0, select bank0
  2224  0138  0832               	movf	PostUARTTXService@ThisEvent,w
  2225  0139  00AD               	movwf	ES_PostToService@TheEvent
  2226  013A  0833               	movf	PostUARTTXService@ThisEvent+1,w
  2227  013B  00AE               	movwf	ES_PostToService@TheEvent+1
  2228  013C  0834               	movf	PostUARTTXService@ThisEvent+2,w
  2229  013D  00AF               	movwf	ES_PostToService@TheEvent+2
  2230  013E  0855               	movf	UART_TX_SM@MyPriority,w
  2231  013F  2E68               	ljmp	_ES_PostToService
  2232  0140                     __end_of_PostUARTTXService:	
  2233  0140                     __ptext23:	
  2234 ;; *************** function _InitPACSystemService *****************
  2235 ;; Defined at:
  2236 ;;		line 61 in file "PACSystemService.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  Priority        1   18[BANK0 ] unsigned char 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  ThisEvent       3   20[BANK0 ] struct ES_Event_t
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      unsigned char 
  2243 ;; Registers used:
  2244 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2250 ;;      Params:         0       1       0       0
  2251 ;;      Locals:         0       3       0       0
  2252 ;;      Temps:          0       1       0       0
  2253 ;;      Totals:         0       5       0       0
  2254 ;;Total ram usage:        5 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    7
  2257 ;; This function calls:
  2258 ;;		_ES_PostToService
  2259 ;; This function is called by:
  2260 ;;		_ES_Initialize
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           
  2265                           ;psect for function _InitPACSystemService
  2266  0140                     _InitPACSystemService:	
  2267                           
  2268                           ;PACSystemService.c: 62: ES_Event ThisEvent;
  2269                           ;PACSystemService.c: 64: MyPriority = Priority;
  2270                           
  2271                           ;incstack = 0
  2272 ;; hardware stack exceeded
  2273                           ; Regs used in _InitPACSystemService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2274  0140  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0141  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0142  0832               	movf	InitPACSystemService@Priority,w
  2277  0143  00B3               	movwf	??_InitPACSystemService
  2278  0144  00D0               	movwf	PACSystemService@MyPriority
  2279                           
  2280                           ;PACSystemService.c: 67: ThisEvent.EventType = ES_INIT;
  2281  0145  3002               	movlw	2
  2282  0146  00B3               	movwf	??_InitPACSystemService
  2283  0147  00B4               	movwf	InitPACSystemService@ThisEvent
  2284                           
  2285                           ;PACSystemService.c: 68: if (ES_PostToService(MyPriority, ThisEvent) == ((boolean) !((bo
      +                          olean) 0))) {
  2286  0148  00AD               	movwf	ES_PostToService@TheEvent
  2287  0149  0835               	movf	InitPACSystemService@ThisEvent+1,w
  2288  014A  00AE               	movwf	ES_PostToService@TheEvent+1
  2289  014B  0836               	movf	InitPACSystemService@ThisEvent+2,w
  2290  014C  00AF               	movwf	ES_PostToService@TheEvent+2
  2291  014D  0850               	movf	PACSystemService@MyPriority,w
  2292  014E  2668  118A         	fcall	_ES_PostToService
  2293  0150  3A01               	xorlw	1
  2294  0151  1903               	btfsc	3,2
  2295                           
  2296                           ;PACSystemService.c: 69: return ((boolean) !((boolean) 0));
  2297  0152  3401               	retlw	1
  2298                           
  2299                           ;PACSystemService.c: 71: return ((boolean) 0);
  2300                           
  2301                           ;PACSystemService.c: 70: } else {
  2302  0153  3400               	retlw	0
  2303  0154                     __end_of_InitPACSystemService:	
  2304  0154                     __ptext2:	
  2305 ;; *************** function _ES_Run *****************
  2306 ;; Defined at:
  2307 ;;		line 224 in file "ES_Framework.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;		None
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  HighestPrior    1   43[BANK0 ] unsigned char 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      enum E1594
  2314 ;; Registers used:
  2315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2321 ;;      Params:         0       0       0       0
  2322 ;;      Locals:         0       1       0       0
  2323 ;;      Temps:          0       2       0       0
  2324 ;;      Totals:         0       3       0       0
  2325 ;;Total ram usage:        3 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    9
  2328 ;; This function calls:
  2329 ;;		_CheckSPIEvent
  2330 ;;		_CheckUARTRXEvent
  2331 ;;		_CheckUARTTXEvent
  2332 ;;		_ES_DeQueue
  2333 ;;		_ES_GetMSBitSet
  2334 ;;		_ES_Timer_RTI_Resp
  2335 ;;		_IsTimerPending
  2336 ;;		_RunPACSystemService
  2337 ;;		_RunSPIService
  2338 ;;		_RunUARTRXService
  2339 ;;		_RunUARTTXService
  2340 ;; This function is called by:
  2341 ;;		_main
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           
  2346                           ;psect for function _ES_Run
  2347  0154                     _ES_Run:	
  2348                           
  2349                           ;ES_Framework.c: 237: }
  2350                           ;ES_Framework.c: 243: switch (HighestPrior) {
  2351  0154  29B6               	goto	l2940
  2352  0155                     l2912:	
  2353                           ;ES_Framework.c: 244: case 0:
  2354                           
  2355                           
  2356                           ;ES_Framework.c: 245: if (RunUARTRXService(ThisEvent).EventType != ES_NO_EVENT) return F
      +                          ailedRun;
  2357  0155  1683               	bsf	3,5	;RP0=1, select bank1
  2358  0156  1303               	bcf	3,6	;RP1=0, select bank1
  2359  0157  085E               	movf	ES_Run@ThisEvent^(0+128),w
  2360  0158  1283               	bcf	3,5	;RP0=0, select bank0
  2361  0159  1303               	bcf	3,6	;RP1=0, select bank0
  2362  015A  00B2               	movwf	RunUARTRXService@ThisEvent
  2363  015B  1683               	bsf	3,5	;RP0=1, select bank1
  2364  015C  1303               	bcf	3,6	;RP1=0, select bank1
  2365  015D  085F               	movf	(ES_Run@ThisEvent+1)^(0+128),w
  2366  015E  1283               	bcf	3,5	;RP0=0, select bank0
  2367  015F  1303               	bcf	3,6	;RP1=0, select bank0
  2368  0160  00B3               	movwf	RunUARTRXService@ThisEvent+1
  2369  0161  1683               	bsf	3,5	;RP0=1, select bank1
  2370  0162  1303               	bcf	3,6	;RP1=0, select bank1
  2371  0163  0860               	movf	(ES_Run@ThisEvent+2)^(0+128),w
  2372  0164  1283               	bcf	3,5	;RP0=0, select bank0
  2373  0165  1303               	bcf	3,6	;RP1=0, select bank0
  2374  0166  00B4               	movwf	RunUARTRXService@ThisEvent+2
  2375  0167  24EE  118A         	fcall	_RunUARTRXService
  2376  0169  1283               	bcf	3,5	;RP0=0, select bank0
  2377  016A  1303               	bcf	3,6	;RP1=0, select bank0
  2378  016B  0832               	movf	?_RunUARTRXService,w
  2379  016C  29B4               	goto	L3
  2380  016D                     l2918:	
  2381                           ;ES_Framework.c: 247: case 1:
  2382                           
  2383                           ;ES_Framework.c: 246: break;
  2384                           
  2385                           
  2386                           ;ES_Framework.c: 248: if (RunUARTTXService(ThisEvent).EventType != ES_NO_EVENT) return F
      +                          ailedRun;
  2387  016D  1683               	bsf	3,5	;RP0=1, select bank1
  2388  016E  1303               	bcf	3,6	;RP1=0, select bank1
  2389  016F  085E               	movf	ES_Run@ThisEvent^(0+128),w
  2390  0170  1283               	bcf	3,5	;RP0=0, select bank0
  2391  0171  1303               	bcf	3,6	;RP1=0, select bank0
  2392  0172  00B6               	movwf	RunUARTTXService@ThisEvent
  2393  0173  1683               	bsf	3,5	;RP0=1, select bank1
  2394  0174  1303               	bcf	3,6	;RP1=0, select bank1
  2395  0175  085F               	movf	(ES_Run@ThisEvent+1)^(0+128),w
  2396  0176  1283               	bcf	3,5	;RP0=0, select bank0
  2397  0177  1303               	bcf	3,6	;RP1=0, select bank0
  2398  0178  00B7               	movwf	RunUARTTXService@ThisEvent+1
  2399  0179  1683               	bsf	3,5	;RP0=1, select bank1
  2400  017A  1303               	bcf	3,6	;RP1=0, select bank1
  2401  017B  0860               	movf	(ES_Run@ThisEvent+2)^(0+128),w
  2402  017C  1283               	bcf	3,5	;RP0=0, select bank0
  2403  017D  1303               	bcf	3,6	;RP1=0, select bank0
  2404  017E  00B8               	movwf	RunUARTTXService@ThisEvent+2
  2405  017F  23DF  118A         	fcall	_RunUARTTXService
  2406  0181  1283               	bcf	3,5	;RP0=0, select bank0
  2407  0182  1303               	bcf	3,6	;RP1=0, select bank0
  2408  0183  0836               	movf	?_RunUARTTXService,w
  2409  0184  29B4               	goto	L3
  2410  0185                     l2924:	
  2411                           ;ES_Framework.c: 250: case 2:
  2412                           
  2413                           ;ES_Framework.c: 249: break;
  2414                           
  2415                           
  2416                           ;ES_Framework.c: 251: if (RunSPIService(ThisEvent).EventType != ES_NO_EVENT) return Fail
      +                          edRun;
  2417  0185  1683               	bsf	3,5	;RP0=1, select bank1
  2418  0186  1303               	bcf	3,6	;RP1=0, select bank1
  2419  0187  085E               	movf	ES_Run@ThisEvent^(0+128),w
  2420  0188  1283               	bcf	3,5	;RP0=0, select bank0
  2421  0189  1303               	bcf	3,6	;RP1=0, select bank0
  2422  018A  00A0               	movwf	RunSPIService@ThisEvent
  2423  018B  1683               	bsf	3,5	;RP0=1, select bank1
  2424  018C  1303               	bcf	3,6	;RP1=0, select bank1
  2425  018D  085F               	movf	(ES_Run@ThisEvent+1)^(0+128),w
  2426  018E  1283               	bcf	3,5	;RP0=0, select bank0
  2427  018F  1303               	bcf	3,6	;RP1=0, select bank0
  2428  0190  00A1               	movwf	RunSPIService@ThisEvent+1
  2429  0191  1683               	bsf	3,5	;RP0=1, select bank1
  2430  0192  1303               	bcf	3,6	;RP1=0, select bank1
  2431  0193  0860               	movf	(ES_Run@ThisEvent+2)^(0+128),w
  2432  0194  1283               	bcf	3,5	;RP0=0, select bank0
  2433  0195  1303               	bcf	3,6	;RP1=0, select bank0
  2434  0196  00A2               	movwf	RunSPIService@ThisEvent+2
  2435  0197  2357  118A         	fcall	_RunSPIService
  2436  0199  1283               	bcf	3,5	;RP0=0, select bank0
  2437  019A  1303               	bcf	3,6	;RP1=0, select bank0
  2438  019B  0820               	movf	?_RunSPIService,w
  2439  019C  29B4               	goto	L3
  2440  019D                     l2930:	
  2441                           ;ES_Framework.c: 253: case 3:
  2442                           
  2443                           ;ES_Framework.c: 252: break;
  2444                           
  2445                           
  2446                           ;ES_Framework.c: 254: if (RunPACSystemService(ThisEvent).EventType != ES_NO_EVENT) retur
      +                          n FailedRun;
  2447  019D  1683               	bsf	3,5	;RP0=1, select bank1
  2448  019E  1303               	bcf	3,6	;RP1=0, select bank1
  2449  019F  085E               	movf	ES_Run@ThisEvent^(0+128),w
  2450  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  2451  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  2452  01A2  00A4               	movwf	RunPACSystemService@ThisEvent
  2453  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  2454  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  2455  01A5  085F               	movf	(ES_Run@ThisEvent+1)^(0+128),w
  2456  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  2457  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  2458  01A8  00A5               	movwf	RunPACSystemService@ThisEvent+1
  2459  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  2460  01AA  1303               	bcf	3,6	;RP1=0, select bank1
  2461  01AB  0860               	movf	(ES_Run@ThisEvent+2)^(0+128),w
  2462  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  2463  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  2464  01AE  00A6               	movwf	RunPACSystemService@ThisEvent+2
  2465  01AF  268C  118A         	fcall	_RunPACSystemService
  2466  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  2467  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  2468  01B3  0824               	movf	?_RunPACSystemService,w
  2469  01B4                     L3:	
  2470  01B4  1D03               	btfss	3,2
  2471  01B5  3402               	retlw	2
  2472  01B6                     l2940:	
  2473                           ;ES_Framework.c: 233: while (Ready != 0) {
  2474                           
  2475                           ;incstack = 0
  2476 ;; hardware stack exceeded
  2477                           ; Regs used in _ES_Run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2478                           ;ES_Framework.c: 226: uint8_t HighestPrior;
  2479                           ;ES_Framework.c: 227: static ES_Event ThisEvent;
  2480                           ;ES_Framework.c: 229: while (1) {
  2481                           
  2482  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  2483  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  2484  01B8  0859               	movf	_Ready,w
  2485  01B9  1903               	btfsc	3,2
  2486  01BA  29F1               	goto	l2944
  2487                           
  2488                           ;ES_Framework.c: 234: HighestPrior = ES_GetMSBitSet(Ready);
  2489  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  2490  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  2491  01BD  0859               	movf	_Ready,w
  2492  01BE  226C               	fcall	_ES_GetMSBitSet
  2493  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  2494  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  2495  01C1  00C9               	movwf	??_ES_Run
  2496  01C2  00CB               	movwf	ES_Run@HighestPrior
  2497                           
  2498                           ;ES_Framework.c: 235: if (ES_DeQueue(EventQueues[HighestPrior].pMem, &ThisEvent) == 0) {
  2499  01C3  30DE               	movlw	(low (ES_Run@ThisEvent| 0))& (0+255)
  2500  01C4  00C9               	movwf	??_ES_Run
  2501  01C5  00A4               	movwf	ES_DeQueue@pReturnEvent
  2502  01C6  084B               	movf	ES_Run@HighestPrior,w
  2503  01C7  00CA               	movwf	??_ES_Run+1
  2504  01C8  074A               	addwf	??_ES_Run+1,w
  2505  01C9  3E18               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  2506  01CA  0084               	movwf	4
  2507  01CB  118A  2040  118A   	fcall	stringdir
  2508  01CE  22F1  118A         	fcall	_ES_DeQueue
  2509  01D0  3A00               	xorlw	0
  2510  01D1  1D03               	skipz
  2511  01D2  29DE               	goto	l2938
  2512                           
  2513                           ;ES_Framework.c: 236: Ready &= ~BitNum2SetMask[HighestPrior];
  2514  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  2515  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  2516  01D5  084B               	movf	ES_Run@HighestPrior,w
  2517  01D6  3E10               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  2518  01D7  0084               	movwf	4
  2519  01D8  118A  2040  118A   	fcall	stringdir
  2520  01DB  3AFF               	xorlw	255
  2521  01DC  00C9               	movwf	??_ES_Run
  2522  01DD  05D9               	andwf	_Ready,f
  2523  01DE                     l2938:	
  2524                           ;ES_Framework.c: 256: }
  2525                           
  2526                           ;ES_Framework.c: 255: break;
  2527                           
  2528  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  2529  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  2530  01E0  084B               	movf	ES_Run@HighestPrior,w
  2531                           
  2532                           ; Switch size 1, requested type "space"
  2533                           ; Number of cases is 4, Range of values is 0 to 3
  2534                           ; switch strategies available:
  2535                           ; Name         Instructions Cycles
  2536                           ; simple_byte           13     7 (average)
  2537                           ; direct_byte           15     7 (fixed)
  2538                           ; jumptable            260     6 (fixed)
  2539                           ;	Chosen strategy is simple_byte
  2540  01E1  3A00               	xorlw	0	; case 0
  2541  01E2  1903               	skipnz
  2542  01E3  2955               	goto	l2912
  2543  01E4  3A01               	xorlw	1	; case 1
  2544  01E5  1903               	skipnz
  2545  01E6  296D               	goto	l2918
  2546  01E7  3A03               	xorlw	3	; case 2
  2547  01E8  1903               	skipnz
  2548  01E9  2985               	goto	l2924
  2549  01EA  3A01               	xorlw	1	; case 3
  2550  01EB  1903               	skipnz
  2551  01EC  299D               	goto	l2930
  2552  01ED  29B6               	goto	l2940
  2553  01EE  29B6               	goto	l2940
  2554  01EF                     l2942:	
  2555                           ;ES_Framework.c: 257: }
  2556                           ;ES_Framework.c: 260: while (IsTimerPending() > 0)
  2557                           
  2558                           
  2559                           ;ES_Framework.c: 261: ES_Timer_RTI_Resp();
  2560  01EF  21FD  118A         	fcall	_ES_Timer_RTI_Resp
  2561  01F1                     l2944:	
  2562  01F1  234F  118A         	fcall	_IsTimerPending
  2563  01F3  3A00               	xorlw	0
  2564  01F4  1D03               	skipz
  2565  01F5  29EF               	goto	l2942
  2566                           
  2567                           ;ES_Framework.c: 265: CheckSPIEvent();
  2568  01F6  22AA  118A         	fcall	_CheckSPIEvent
  2569                           
  2570                           ;ES_Framework.c: 266: CheckUARTRXEvent();
  2571  01F8  22C5  118A         	fcall	_CheckUARTRXEvent
  2572                           
  2573                           ;ES_Framework.c: 267: CheckUARTTXEvent();
  2574  01FA  22DB  118A         	fcall	_CheckUARTTXEvent
  2575  01FC  29B6               	goto	l2940
  2576  01FD                     __end_of_ES_Run:	
  2577                           ;ES_Framework.c: 268: }
  2578                           ;ES_Framework.c: 269: return 0;
  2579                           
  2580  01FD                     __ptext13:	
  2581 ;; *************** function _ES_Timer_RTI_Resp *****************
  2582 ;; Defined at:
  2583 ;;		line 258 in file "ES_Timers.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;		None
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;		None
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : 0/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2597 ;;      Params:         0       0       0       0
  2598 ;;      Locals:         0       0       0       0
  2599 ;;      Temps:          0       3       0       0
  2600 ;;      Totals:         0       3       0       0
  2601 ;;Total ram usage:        3 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    8
  2604 ;; This function calls:
  2605 ;;		Absolute function
  2606 ;;		_ES_GetMSBitSet
  2607 ;;		_PostPACSystemService
  2608 ;;		_PostUARTRXService
  2609 ;;		_PostUARTTXService
  2610 ;; This function is called by:
  2611 ;;		_ES_Run
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _ES_Timer_RTI_Resp
  2617  01FD                     _ES_Timer_RTI_Resp:	
  2618                           
  2619                           ;ES_Timers.c: 259: static Tflag_t NeedsProcessing;
  2620                           ;ES_Timers.c: 260: static uint8_t NextTimer2Process;
  2621                           ;ES_Timers.c: 261: static ES_Event NewEvent;
  2622                           ;ES_Timers.c: 263: ++time;
  2623                           
  2624                           ;incstack = 0
  2625 ;; hardware stack exceeded
  2626                           ; Regs used in _ES_Timer_RTI_Resp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2627  01FD  3001               	movlw	1
  2628  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  2629  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  2630  0200  07D5               	addwf	_time^(0+128),f	;volatile
  2631  0201  1803               	skipnc
  2632  0202  0AD6               	incf	(_time+1)^(0+128),f	;volatile
  2633  0203  3000               	movlw	0
  2634  0204  07D6               	addwf	(_time+1)^(0+128),f	;volatile
  2635                           
  2636                           ;ES_Timers.c: 264: if (TMR_ActiveFlags != 0) {
  2637  0205  1283               	bcf	3,5	;RP0=0, select bank0
  2638  0206  1303               	bcf	3,6	;RP1=0, select bank0
  2639  0207  085B               	movf	_TMR_ActiveFlags,w
  2640  0208  1903               	btfsc	3,2
  2641  0209  0008               	return
  2642                           
  2643                           ;ES_Timers.c: 266: NeedsProcessing = TMR_ActiveFlags;
  2644  020A  00B5               	movwf	??_ES_Timer_RTI_Resp
  2645  020B  00CE               	movwf	ES_Timer_RTI_Resp@NeedsProcessing
  2646  020C                     l2720:	
  2647                           ;ES_Timers.c: 267: do {
  2648                           
  2649                           
  2650                           ;ES_Timers.c: 269: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  2651  020C  084E               	movf	ES_Timer_RTI_Resp@NeedsProcessing,w
  2652  020D  226C  118A         	fcall	_ES_GetMSBitSet
  2653  020F  1283               	bcf	3,5	;RP0=0, select bank0
  2654  0210  1303               	bcf	3,6	;RP1=0, select bank0
  2655  0211  00B5               	movwf	??_ES_Timer_RTI_Resp
  2656  0212  00CF               	movwf	ES_Timer_RTI_Resp@NextTimer2Process
  2657                           
  2658                           ;ES_Timers.c: 271: if (--TMR_TimerArray[NextTimer2Process] == 0) {
  2659  0213  00B5               	movwf	??_ES_Timer_RTI_Resp
  2660  0214  0735               	addwf	??_ES_Timer_RTI_Resp,w
  2661  0215  3EB4               	addlw	(low (_TMR_TimerArray| 0))& (0+255)
  2662  0216  0084               	movwf	4
  2663  0217  3001               	movlw	1
  2664  0218  1383               	bcf	3,7	;select IRP bank1
  2665  0219  0280               	subwf	0,f
  2666  021A  0F84               	incfsz	4,f
  2667  021B  3000               	movlw	0
  2668  021C  1C03               	skipc
  2669  021D  0380               	decf	0,f
  2670  021E  0280               	subwf	0,f
  2671  021F  0384               	decf	4,f
  2672  0220  0800               	movf	0,w
  2673  0221  00B6               	movwf	??_ES_Timer_RTI_Resp+1
  2674  0222  0A84               	incf	4,f
  2675  0223  0800               	movf	0,w
  2676  0224  00B7               	movwf	??_ES_Timer_RTI_Resp+2
  2677  0225  0436               	iorwf	??_ES_Timer_RTI_Resp+1,w
  2678  0226  1D03               	btfss	3,2
  2679  0227  2A5F               	goto	l2730
  2680                           
  2681                           ;ES_Timers.c: 272: NewEvent.EventType = ES_TIMEOUT;
  2682  0228  3004               	movlw	4
  2683  0229  00B5               	movwf	??_ES_Timer_RTI_Resp
  2684  022A  1683               	bsf	3,5	;RP0=1, select bank1
  2685  022B  1303               	bcf	3,6	;RP1=0, select bank1
  2686  022C  00CE               	movwf	ES_Timer_RTI_Resp@NewEvent^(0+128)
  2687                           
  2688                           ;ES_Timers.c: 273: NewEvent.EventParam = NextTimer2Process;
  2689  022D  1283               	bcf	3,5	;RP0=0, select bank0
  2690  022E  1303               	bcf	3,6	;RP1=0, select bank0
  2691  022F  084F               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  2692  0230  00B5               	movwf	??_ES_Timer_RTI_Resp
  2693  0231  01B6               	clrf	??_ES_Timer_RTI_Resp+1
  2694  0232  1683               	bsf	3,5	;RP0=1, select bank1
  2695  0233  1303               	bcf	3,6	;RP1=0, select bank1
  2696  0234  00CF               	movwf	(ES_Timer_RTI_Resp@NewEvent^(0+128)+1)
  2697  0235  1283               	bcf	3,5	;RP0=0, select bank0
  2698  0236  1303               	bcf	3,6	;RP1=0, select bank0
  2699  0237  0836               	movf	??_ES_Timer_RTI_Resp+1,w
  2700  0238  1683               	bsf	3,5	;RP0=1, select bank1
  2701  0239  1303               	bcf	3,6	;RP1=0, select bank1
  2702  023A  00D0               	movwf	((ES_Timer_RTI_Resp@NewEvent+1)^(0+128)+1)
  2703                           
  2704                           ;ES_Timers.c: 275: Timer2PostFunc[NextTimer2Process](NewEvent);
  2705  023B  084E               	movf	ES_Timer_RTI_Resp@NewEvent^(0+128),w
  2706  023C  1283               	bcf	3,5	;RP0=0, select bank0
  2707  023D  1303               	bcf	3,6	;RP1=0, select bank0
  2708  023E  00B2               	movwf	PostPACSystemService@ThisEvent
  2709  023F  1683               	bsf	3,5	;RP0=1, select bank1
  2710  0240  1303               	bcf	3,6	;RP1=0, select bank1
  2711  0241  084F               	movf	(ES_Timer_RTI_Resp@NewEvent+1)^(0+128),w
  2712  0242  1283               	bcf	3,5	;RP0=0, select bank0
  2713  0243  1303               	bcf	3,6	;RP1=0, select bank0
  2714  0244  00B3               	movwf	PostPACSystemService@ThisEvent+1
  2715  0245  1683               	bsf	3,5	;RP0=1, select bank1
  2716  0246  1303               	bcf	3,6	;RP1=0, select bank1
  2717  0247  0850               	movf	(ES_Timer_RTI_Resp@NewEvent+2)^(0+128),w
  2718  0248  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0249  1303               	bcf	3,6	;RP1=0, select bank0
  2720  024A  00B4               	movwf	PostPACSystemService@ThisEvent+2
  2721  024B  084F               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  2722  024C  3E28               	addlw	low ((_Timer2PostFunc-__stringbase)| (0+32768))
  2723  024D  0084               	movwf	4
  2724  024E  118A  2040  118A   	fcall	stringdir
  2725  0251  118A  2100  118A   	fcall	fptable
  2726                           
  2727                           ;ES_Timers.c: 277: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  2728  0254  1283               	bcf	3,5	;RP0=0, select bank0
  2729  0255  1303               	bcf	3,6	;RP1=0, select bank0
  2730  0256  084F               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  2731  0257  3E10               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  2732  0258  0084               	movwf	4
  2733  0259  118A  2040  118A   	fcall	stringdir
  2734  025C  3AFF               	xorlw	255
  2735  025D  00B5               	movwf	??_ES_Timer_RTI_Resp
  2736  025E  05DB               	andwf	_TMR_ActiveFlags,f
  2737  025F                     l2730:	
  2738                           
  2739                           ;ES_Timers.c: 278: }
  2740                           ;ES_Timers.c: 280: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  2741  025F  084F               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  2742  0260  3E10               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  2743  0261  0084               	movwf	4
  2744  0262  118A  2040  118A   	fcall	stringdir
  2745  0265  3AFF               	xorlw	255
  2746  0266  00B5               	movwf	??_ES_Timer_RTI_Resp
  2747  0267  05CE               	andwf	ES_Timer_RTI_Resp@NeedsProcessing,f
  2748                           
  2749                           ;ES_Timers.c: 281: } while (NeedsProcessing != 0);
  2750  0268  084E               	movf	ES_Timer_RTI_Resp@NeedsProcessing,w
  2751  0269  1903               	btfsc	3,2
  2752  026A  0008               	return
  2753  026B  2A0C               	goto	l2720
  2754  026C                     __end_of_ES_Timer_RTI_Resp:	
  2755  026C                     __ptext17:	
  2756 ;; *************** function _ES_GetMSBitSet *****************
  2757 ;; Defined at:
  2758 ;;		line 78 in file "ES_LookupTables.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;  Val2Check       1    wreg     unsigned char 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  Val2Check       1    3[BANK0 ] unsigned char 
  2763 ;;  LoopCntr        1    6[BANK0 ] char 
  2764 ;;  Nybble2Test     1    5[BANK0 ] unsigned char 
  2765 ;;  ReturnVal       1    4[BANK0 ] unsigned char 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      unsigned char 
  2768 ;; Registers used:
  2769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2775 ;;      Params:         0       0       0       0
  2776 ;;      Locals:         0       4       0       0
  2777 ;;      Temps:          0       3       0       0
  2778 ;;      Totals:         0       7       0       0
  2779 ;;Total ram usage:        7 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    4
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_ES_Run
  2786 ;;		_ES_Timer_RTI_Resp
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           
  2791                           ;psect for function _ES_GetMSBitSet
  2792  026C                     _ES_GetMSBitSet:	
  2793                           
  2794                           ;incstack = 0
  2795                           ; Regs used in _ES_GetMSBitSet: [wreg-fsr0h+status,2+status,0+pclath]
  2796                           ;ES_GetMSBitSet@Val2Check stored from wreg
  2797  026C  1283               	bcf	3,5	;RP0=0, select bank0
  2798  026D  1303               	bcf	3,6	;RP1=0, select bank0
  2799  026E  00A3               	movwf	ES_GetMSBitSet@Val2Check
  2800                           
  2801                           ;ES_LookupTables.c: 80: int8_t LoopCntr;
  2802                           ;ES_LookupTables.c: 81: uint8_t Nybble2Test;
  2803                           ;ES_LookupTables.c: 82: uint8_t ReturnVal = 128;
  2804  026F  3080               	movlw	128
  2805  0270  00A0               	movwf	??_ES_GetMSBitSet
  2806  0271  00A4               	movwf	ES_GetMSBitSet@ReturnVal
  2807                           
  2808                           ;ES_LookupTables.c: 85: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2809  0272  01A6               	clrf	ES_GetMSBitSet@LoopCntr
  2810  0273  0AA6               	incf	ES_GetMSBitSet@LoopCntr,f
  2811                           
  2812                           ;ES_LookupTables.c: 86: LoopCntr >= 0; LoopCntr--) {
  2813  0274  1BA6               	btfsc	ES_GetMSBitSet@LoopCntr,7
  2814  0275  2AA8               	goto	l2316
  2815  0276                     l2308:	
  2816                           
  2817                           ;ES_LookupTables.c: 88: Nybble2Test = (uint8_t)
  2818                           ;ES_LookupTables.c: 89: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2819                           ;ES_LookupTables.c: 90: 0x0F);
  2820  0276  0823               	movf	ES_GetMSBitSet@Val2Check,w
  2821  0277  00A0               	movwf	??_ES_GetMSBitSet
  2822  0278  0826               	movf	ES_GetMSBitSet@LoopCntr,w
  2823  0279  00A1               	movwf	??_ES_GetMSBitSet+1
  2824  027A  3001               	movlw	1
  2825  027B  1003               	clrc
  2826  027C                     L7:	
  2827  027C  0DA1               	rlf	??_ES_GetMSBitSet+1,f
  2828  027D  3EFF               	addlw	-1
  2829  027E  1003               	clrc
  2830  027F  1D03               	skipz
  2831  0280  2A7C               	goto	L7
  2832  0281  0D21               	rlf	??_ES_GetMSBitSet+1,w
  2833  0282  3E01               	addlw	1
  2834  0283  2A86               	goto	u1184
  2835  0284                     u1185:	
  2836  0284  1003               	clrc
  2837  0285  0CA0               	rrf	??_ES_GetMSBitSet,f
  2838  0286                     u1184:	
  2839  0286  3EFF               	addlw	-1
  2840  0287  1D03               	skipz
  2841  0288  2A84               	goto	u1185
  2842  0289  0820               	movf	??_ES_GetMSBitSet,w
  2843  028A  390F               	andlw	15
  2844  028B  00A2               	movwf	??_ES_GetMSBitSet+2
  2845  028C  00A5               	movwf	ES_GetMSBitSet@Nybble2Test
  2846                           
  2847                           ;ES_LookupTables.c: 91: if ( Nybble2Test != 0){
  2848  028D  0825               	movf	ES_GetMSBitSet@Nybble2Test,w
  2849  028E  1903               	btfsc	3,2
  2850  028F  2AA3               	goto	l2312
  2851                           
  2852                           ;ES_LookupTables.c: 93: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2853                           ;ES_LookupTables.c: 94: (LoopCntr * 4);
  2854  0290  0826               	movf	ES_GetMSBitSet@LoopCntr,w
  2855  0291  00A0               	movwf	??_ES_GetMSBitSet
  2856  0292  3002               	movlw	2
  2857  0293                     u1205:	
  2858  0293  1003               	clrc
  2859  0294  0DA0               	rlf	??_ES_GetMSBitSet,f
  2860  0295  3EFF               	addlw	-1
  2861  0296  1D03               	skipz
  2862  0297  2A93               	goto	u1205
  2863  0298  0825               	movf	ES_GetMSBitSet@Nybble2Test,w
  2864  0299  3EFF               	addlw	255
  2865  029A  3E01               	addlw	low ((_Nybble2MSBitNum-__stringbase)| (0+32768))
  2866  029B  0084               	movwf	4
  2867  029C  118A  2040  118A   	fcall	stringdir
  2868  029F  0720               	addwf	??_ES_GetMSBitSet,w
  2869  02A0  00A1               	movwf	??_ES_GetMSBitSet+1
  2870  02A1  00A4               	movwf	ES_GetMSBitSet@ReturnVal
  2871                           
  2872                           ;ES_LookupTables.c: 95: break;
  2873  02A2  2AA8               	goto	l2316
  2874  02A3                     l2312:	
  2875  02A3  30FF               	movlw	255
  2876  02A4  00A0               	movwf	??_ES_GetMSBitSet
  2877  02A5  07A6               	addwf	ES_GetMSBitSet@LoopCntr,f
  2878  02A6  1FA6               	btfss	ES_GetMSBitSet@LoopCntr,7
  2879  02A7  2A76               	goto	l2308
  2880  02A8                     l2316:	
  2881                           
  2882                           ;ES_LookupTables.c: 96: }
  2883                           ;ES_LookupTables.c: 97: }
  2884                           ;ES_LookupTables.c: 98: return ReturnVal;
  2885  02A8  0824               	movf	ES_GetMSBitSet@ReturnVal,w
  2886  02A9  0008               	return
  2887  02AA                     __end_of_ES_GetMSBitSet:	
  2888  02AA                     __ptext21:	
  2889 ;; *************** function _CheckSPIEvent *****************
  2890 ;; Defined at:
  2891 ;;		line 287 in file "SPI_SM.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;		None
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  SPIEvent        3   20[BANK0 ] struct ES_Event_t
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      unsigned char 
  2898 ;; Registers used:
  2899 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2905 ;;      Params:         0       0       0       0
  2906 ;;      Locals:         0       3       0       0
  2907 ;;      Temps:          0       2       0       0
  2908 ;;      Totals:         0       5       0       0
  2909 ;;Total ram usage:        5 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    7
  2912 ;; This function calls:
  2913 ;;		_ES_PostToService
  2914 ;; This function is called by:
  2915 ;;		_ES_Run
  2916 ;;		_ES_CheckUserEvents
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           
  2921                           ;psect for function _CheckSPIEvent
  2922  02AA                     _CheckSPIEvent:	
  2923                           
  2924                           ;SPI_SM.c: 288: if (newRequest) {
  2925                           
  2926                           ;incstack = 0
  2927 ;; hardware stack exceeded
  2928                           ; Regs used in _CheckSPIEvent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2929  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2930  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2931  02AC  0863               	movf	_newRequest,w
  2932  02AD  1903               	btfsc	3,2
  2933  02AE  3400               	retlw	0
  2934                           
  2935                           ;SPI_SM.c: 289: ES_Event SPIEvent;
  2936                           ;SPI_SM.c: 290: SPIEvent.EventType = ES_TX_REQUEST_SEND;
  2937  02AF  300D               	movlw	13
  2938  02B0  00B2               	movwf	??_CheckSPIEvent
  2939  02B1  00B4               	movwf	CheckSPIEvent@SPIEvent
  2940                           
  2941                           ;SPI_SM.c: 291: SPIEvent.EventParam = colorRequestData;
  2942  02B2  085D               	movf	_colorRequestData,w
  2943  02B3  00B2               	movwf	??_CheckSPIEvent
  2944  02B4  01B3               	clrf	??_CheckSPIEvent+1
  2945  02B5  00B5               	movwf	CheckSPIEvent@SPIEvent+1
  2946  02B6  0833               	movf	??_CheckSPIEvent+1,w
  2947  02B7  00B6               	movwf	CheckSPIEvent@SPIEvent+2
  2948                           
  2949                           ;SPI_SM.c: 292: ES_PostToService(1, SPIEvent);
  2950  02B8  0834               	movf	CheckSPIEvent@SPIEvent,w
  2951  02B9  00AD               	movwf	ES_PostToService@TheEvent
  2952  02BA  0835               	movf	CheckSPIEvent@SPIEvent+1,w
  2953  02BB  00AE               	movwf	ES_PostToService@TheEvent+1
  2954  02BC  0836               	movf	CheckSPIEvent@SPIEvent+2,w
  2955  02BD  00AF               	movwf	ES_PostToService@TheEvent+2
  2956  02BE  3001               	movlw	1
  2957  02BF  2668               	fcall	_ES_PostToService
  2958                           
  2959                           ;SPI_SM.c: 294: newRequest = ((boolean) 0);
  2960  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  2961  02C1  3001               	movlw	1
  2962  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  2963  02C3  01E3               	clrf	_newRequest
  2964                           
  2965                           ;SPI_SM.c: 295: return ((boolean) !((boolean) 0));
  2966  02C4  0008               	return
  2967  02C5                     __end_of_CheckSPIEvent:	
  2968                           ;SPI_SM.c: 296: }
  2969                           ;SPI_SM.c: 297: return ((boolean) 0);
  2970                           
  2971  02C5                     __ptext20:	
  2972 ;; *************** function _CheckUARTRXEvent *****************
  2973 ;; Defined at:
  2974 ;;		line 343 in file "UART_RX_SM.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  CommEvent       3   19[BANK0 ] struct ES_Event_t
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      unsigned char 
  2981 ;; Registers used:
  2982 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2988 ;;      Params:         0       0       0       0
  2989 ;;      Locals:         0       3       0       0
  2990 ;;      Temps:          0       1       0       0
  2991 ;;      Totals:         0       4       0       0
  2992 ;;Total ram usage:        4 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    7
  2995 ;; This function calls:
  2996 ;;		_ES_PostToService
  2997 ;; This function is called by:
  2998 ;;		_ES_Run
  2999 ;;		_ES_CheckUserEvents
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           
  3004                           ;psect for function _CheckUARTRXEvent
  3005  02C5                     _CheckUARTRXEvent:	
  3006                           
  3007                           ;UART_RX_SM.c: 344: if (RXFlag) {
  3008                           
  3009                           ;incstack = 0
  3010 ;; hardware stack exceeded
  3011                           ; Regs used in _CheckUARTRXEvent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3012  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  3013  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  3014  02C7  0858               	movf	_RXFlag,w
  3015  02C8  1903               	btfsc	3,2
  3016  02C9  3400               	retlw	0
  3017                           
  3018                           ;UART_RX_SM.c: 345: ES_Event CommEvent;
  3019                           ;UART_RX_SM.c: 347: CommEvent.EventType = ES_RX_NEW_PACKET;
  3020  02CA  3007               	movlw	7
  3021  02CB  00B2               	movwf	??_CheckUARTRXEvent
  3022  02CC  00B3               	movwf	CheckUARTRXEvent@CommEvent
  3023                           
  3024                           ;UART_RX_SM.c: 348: CommEvent.EventParam = 0;
  3025  02CD  01B4               	clrf	CheckUARTRXEvent@CommEvent+1
  3026  02CE  01B5               	clrf	CheckUARTRXEvent@CommEvent+2
  3027                           
  3028                           ;UART_RX_SM.c: 349: ES_PostToService(0, CommEvent);
  3029  02CF  00AD               	movwf	ES_PostToService@TheEvent
  3030  02D0  0834               	movf	CheckUARTRXEvent@CommEvent+1,w
  3031  02D1  00AE               	movwf	ES_PostToService@TheEvent+1
  3032  02D2  0835               	movf	CheckUARTRXEvent@CommEvent+2,w
  3033  02D3  00AF               	movwf	ES_PostToService@TheEvent+2
  3034  02D4  3000               	movlw	0
  3035  02D5  2668               	fcall	_ES_PostToService
  3036                           
  3037                           ;UART_RX_SM.c: 351: RXFlag = ((boolean) 0);
  3038  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  3039  02D7  3001               	movlw	1
  3040  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  3041  02D9  01D8               	clrf	_RXFlag
  3042                           
  3043                           ;UART_RX_SM.c: 352: return ((boolean) !((boolean) 0));
  3044  02DA  0008               	return
  3045  02DB                     __end_of_CheckUARTRXEvent:	
  3046                           ;UART_RX_SM.c: 353: }
  3047                           ;UART_RX_SM.c: 354: return ((boolean) 0);
  3048                           
  3049  02DB                     __ptext19:	
  3050 ;; *************** function _CheckUARTTXEvent *****************
  3051 ;; Defined at:
  3052 ;;		line 284 in file "UART_TX_SM.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;		None
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  TXEvent         3   19[BANK0 ] struct ES_Event_t
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      unsigned char 
  3059 ;; Registers used:
  3060 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3066 ;;      Params:         0       0       0       0
  3067 ;;      Locals:         0       3       0       0
  3068 ;;      Temps:          0       1       0       0
  3069 ;;      Totals:         0       4       0       0
  3070 ;;Total ram usage:        4 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    7
  3073 ;; This function calls:
  3074 ;;		_ES_PostToService
  3075 ;; This function is called by:
  3076 ;;		_ES_Run
  3077 ;;		_ES_CheckUserEvents
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           
  3082                           ;psect for function _CheckUARTTXEvent
  3083  02DB                     _CheckUARTTXEvent:	
  3084                           
  3085                           ;UART_TX_SM.c: 285: if (sendCompleteFlag) {
  3086                           
  3087                           ;incstack = 0
  3088 ;; hardware stack exceeded
  3089                           ; Regs used in _CheckUARTTXEvent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3090  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  3091  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  3092  02DD  0869               	movf	_sendCompleteFlag,w
  3093  02DE  1903               	btfsc	3,2
  3094  02DF  3400               	retlw	0
  3095                           
  3096                           ;UART_TX_SM.c: 286: ES_Event TXEvent;
  3097                           ;UART_TX_SM.c: 287: TXEvent.EventType = ES_TX_SEND_COMPLETE;
  3098  02E0  300C               	movlw	12
  3099  02E1  00B2               	movwf	??_CheckUARTTXEvent
  3100  02E2  00B3               	movwf	CheckUARTTXEvent@TXEvent
  3101                           
  3102                           ;UART_TX_SM.c: 288: TXEvent.EventParam = 0;
  3103  02E3  01B4               	clrf	CheckUARTTXEvent@TXEvent+1
  3104  02E4  01B5               	clrf	CheckUARTTXEvent@TXEvent+2
  3105                           
  3106                           ;UART_TX_SM.c: 289: ES_PostToService(MyPriority, TXEvent);
  3107  02E5  00AD               	movwf	ES_PostToService@TheEvent
  3108  02E6  0834               	movf	CheckUARTTXEvent@TXEvent+1,w
  3109  02E7  00AE               	movwf	ES_PostToService@TheEvent+1
  3110  02E8  0835               	movf	CheckUARTTXEvent@TXEvent+2,w
  3111  02E9  00AF               	movwf	ES_PostToService@TheEvent+2
  3112  02EA  0855               	movf	UART_TX_SM@MyPriority,w
  3113  02EB  2668               	fcall	_ES_PostToService
  3114                           
  3115                           ;UART_TX_SM.c: 291: sendCompleteFlag = ((boolean) 0);
  3116  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  3117  02ED  3001               	movlw	1
  3118  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  3119  02EF  01E9               	clrf	_sendCompleteFlag
  3120                           
  3121                           ;UART_TX_SM.c: 292: return ((boolean) !((boolean) 0));
  3122  02F0  0008               	return
  3123  02F1                     __end_of_CheckUARTTXEvent:	
  3124                           ;UART_TX_SM.c: 293: }
  3125                           ;UART_TX_SM.c: 294: return ((boolean) 0);
  3126                           
  3127  02F1                     __ptext18:	
  3128 ;; *************** function _ES_DeQueue *****************
  3129 ;; Defined at:
  3130 ;;		line 125 in file "ES_Queue.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  pBlock          1    wreg     PTR struct ES_Event_t
  3133 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  3134 ;;  pReturnEvent    1    4[BANK0 ] PTR struct ES_Event_t
  3135 ;;		 -> ES_Run@ThisEvent(3), 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  pBlock          1   12[BANK0 ] PTR struct ES_Event_t
  3138 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  3139 ;;  pThisQueue      1   13[BANK0 ] PTR struct .
  3140 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  3141 ;;  NumLeft         1   11[BANK0 ] unsigned char 
  3142 ;;  saveCrit        1   10[BANK0 ] unsigned char 
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      unsigned char 
  3145 ;; Registers used:
  3146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3152 ;;      Params:         0       1       0       0
  3153 ;;      Locals:         0       4       0       0
  3154 ;;      Temps:          0       5       0       0
  3155 ;;      Totals:         0      10       0       0
  3156 ;;Total ram usage:       10 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    5
  3159 ;; This function calls:
  3160 ;;		___bmul
  3161 ;; This function is called by:
  3162 ;;		_ES_Run
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _ES_DeQueue
  3168  02F1                     _ES_DeQueue:	
  3169                           
  3170                           ;incstack = 0
  3171                           ; Regs used in _ES_DeQueue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3172                           ;ES_DeQueue@pBlock stored from wreg
  3173  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  3174  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  3175  02F3  00AC               	movwf	ES_DeQueue@pBlock
  3176                           
  3177                           ;ES_Queue.c: 127: unsigned char saveCrit;
  3178                           ;ES_Queue.c: 128: pQueue_t pThisQueue;
  3179                           ;ES_Queue.c: 129: uint8_t NumLeft;
  3180                           ;ES_Queue.c: 131: pThisQueue = (pQueue_t)pBlock;
  3181  02F4  00A5               	movwf	??_ES_DeQueue
  3182  02F5  00AD               	movwf	ES_DeQueue@pThisQueue
  3183                           
  3184                           ;ES_Queue.c: 132: if ( pThisQueue->NumEntries > 0)
  3185  02F6  3E02               	addlw	2
  3186  02F7  0084               	movwf	4
  3187  02F8  1783               	bsf	3,7	;select IRP bank2
  3188  02F9  0800               	movf	0,w
  3189  02FA  1903               	btfsc	3,2
  3190  02FB  2B43               	goto	l2498
  3191                           
  3192                           ;ES_Queue.c: 133: {
  3193                           ;ES_Queue.c: 134: do{ saveCrit = INTCON; GIE = 0;}while(0);
  3194  02FC  080B               	movf	11,w	;volatile
  3195  02FD  00A5               	movwf	??_ES_DeQueue
  3196  02FE  00AA               	movwf	ES_DeQueue@saveCrit
  3197  02FF  138B               	bcf	11,7	;volatile
  3198                           
  3199                           ;ES_Queue.c: 135: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  3200  0300  3003               	movlw	3
  3201  0301  00A5               	movwf	??_ES_DeQueue
  3202  0302  00A0               	movwf	___bmul@multiplicand
  3203  0303  0A2D               	incf	ES_DeQueue@pThisQueue,w
  3204  0304  0084               	movwf	4
  3205  0305  0800               	movf	0,w
  3206  0306  3E01               	addlw	1
  3207  0307  2656  118A         	fcall	___bmul
  3208  0309  1283               	bcf	3,5	;RP0=0, select bank0
  3209  030A  1303               	bcf	3,6	;RP1=0, select bank0
  3210  030B  072C               	addwf	ES_DeQueue@pBlock,w
  3211  030C  00A6               	movwf	??_ES_DeQueue+1
  3212  030D  0084               	movwf	4
  3213  030E  1783               	bsf	3,7	;select IRP bank2
  3214  030F  0800               	movf	0,w
  3215  0310  00A7               	movwf	??_ES_DeQueue+2
  3216  0311  0A84               	incf	4,f
  3217  0312  0800               	movf	0,w
  3218  0313  00A8               	movwf	??_ES_DeQueue+3
  3219  0314  0A84               	incf	4,f
  3220  0315  0800               	movf	0,w
  3221  0316  00A9               	movwf	??_ES_DeQueue+4
  3222  0317  0824               	movf	ES_DeQueue@pReturnEvent,w
  3223  0318  0084               	movwf	4
  3224  0319  0827               	movf	??_ES_DeQueue+2,w
  3225  031A  1383               	bcf	3,7	;select IRP bank0
  3226  031B  0080               	movwf	0
  3227  031C  0A84               	incf	4,f
  3228  031D  0828               	movf	??_ES_DeQueue+3,w
  3229  031E  0080               	movwf	0
  3230  031F  0A84               	incf	4,f
  3231  0320  0829               	movf	??_ES_DeQueue+4,w
  3232  0321  0080               	movwf	0
  3233                           
  3234                           ;ES_Queue.c: 137: pThisQueue->CurrentIndex++;
  3235  0322  3001               	movlw	1
  3236  0323  00A5               	movwf	??_ES_DeQueue
  3237  0324  0A2D               	incf	ES_DeQueue@pThisQueue,w
  3238  0325  0084               	movwf	4
  3239  0326  0825               	movf	??_ES_DeQueue,w
  3240  0327  1783               	bsf	3,7	;select IRP bank2
  3241  0328  0780               	addwf	0,f
  3242                           
  3243                           ;ES_Queue.c: 138: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  3244  0329  082D               	movf	ES_DeQueue@pThisQueue,w
  3245  032A  0084               	movwf	4
  3246  032B  0800               	movf	0,w
  3247  032C  00A5               	movwf	??_ES_DeQueue
  3248  032D  0A2D               	incf	ES_DeQueue@pThisQueue,w
  3249  032E  0084               	movwf	4
  3250  032F  0800               	movf	0,w
  3251  0330  00A6               	movwf	??_ES_DeQueue+1
  3252  0331  0825               	movf	??_ES_DeQueue,w
  3253  0332  0226               	subwf	??_ES_DeQueue+1,w
  3254  0333  1C03               	skipc
  3255  0334  2B38               	goto	l2494
  3256                           
  3257                           ;ES_Queue.c: 139: pThisQueue->CurrentIndex = 0;
  3258  0335  0A2D               	incf	ES_DeQueue@pThisQueue,w
  3259  0336  0084               	movwf	4
  3260  0337  0180               	clrf	0
  3261  0338                     l2494:	
  3262                           
  3263                           ;ES_Queue.c: 141: NumLeft = --pThisQueue->NumEntries;
  3264  0338  082D               	movf	ES_DeQueue@pThisQueue,w
  3265  0339  3E02               	addlw	2
  3266  033A  0084               	movwf	4
  3267  033B  3001               	movlw	1
  3268  033C  0280               	subwf	0,f
  3269  033D  0800               	movf	0,w
  3270  033E  00A5               	movwf	??_ES_DeQueue
  3271  033F  00AB               	movwf	ES_DeQueue@NumLeft
  3272                           
  3273                           ;ES_Queue.c: 142: {INTCON = saveCrit;};
  3274  0340  082A               	movf	ES_DeQueue@saveCrit,w
  3275  0341  008B               	movwf	11	;volatile
  3276                           
  3277                           ;ES_Queue.c: 143: }else {
  3278  0342  2B4D               	goto	l2504
  3279  0343                     l2498:	
  3280                           
  3281                           ;ES_Queue.c: 144: (*pReturnEvent).EventType = ES_NO_EVENT;
  3282  0343  0824               	movf	ES_DeQueue@pReturnEvent,w
  3283  0344  0084               	movwf	4
  3284  0345  1383               	bcf	3,7	;select IRP bank0
  3285  0346  0180               	clrf	0
  3286                           
  3287                           ;ES_Queue.c: 145: (*pReturnEvent).EventParam = 0;
  3288  0347  0A24               	incf	ES_DeQueue@pReturnEvent,w
  3289  0348  0084               	movwf	4
  3290  0349  0180               	clrf	0
  3291  034A  0A84               	incf	4,f
  3292  034B  0180               	clrf	0
  3293                           
  3294                           ;ES_Queue.c: 146: NumLeft = 0;
  3295  034C  01AB               	clrf	ES_DeQueue@NumLeft
  3296  034D                     l2504:	
  3297                           
  3298                           ;ES_Queue.c: 147: }
  3299                           ;ES_Queue.c: 148: return NumLeft;
  3300  034D  082B               	movf	ES_DeQueue@NumLeft,w
  3301  034E  0008               	return
  3302  034F                     __end_of_ES_DeQueue:	
  3303  034F                     __ptext12:	
  3304 ;; *************** function _IsTimerPending *****************
  3305 ;; Defined at:
  3306 ;;		line 78 in file "ES_Port.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;		None
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;		None
  3311 ;; Return value:  Size  Location     Type
  3312 ;;                  1    wreg      unsigned char 
  3313 ;; Registers used:
  3314 ;;		wreg, status,2, status,0
  3315 ;; Tracked objects:
  3316 ;;		On entry : 0/0
  3317 ;;		On exit  : 0/0
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3320 ;;      Params:         0       0       0       0
  3321 ;;      Locals:         0       0       0       0
  3322 ;;      Temps:          0       0       0       0
  3323 ;;      Totals:         0       0       0       0
  3324 ;;Total ram usage:        0 bytes
  3325 ;; Hardware stack levels used:    1
  3326 ;; Hardware stack levels required when called:    4
  3327 ;; This function calls:
  3328 ;;		Nothing
  3329 ;; This function is called by:
  3330 ;;		_ES_Run
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           
  3335                           ;psect for function _IsTimerPending
  3336  034F                     _IsTimerPending:	
  3337                           
  3338                           ;ES_Port.c: 79: if (TickCount > 0) {
  3339                           
  3340                           ;incstack = 0
  3341                           ; Regs used in _IsTimerPending: [wreg+status,2+status,0]
  3342  034F  1283               	bcf	3,5	;RP0=0, select bank0
  3343  0350  1303               	bcf	3,6	;RP1=0, select bank0
  3344  0351  085C               	movf	_TickCount,w
  3345  0352  1903               	btfsc	3,2
  3346  0353  3400               	retlw	0
  3347                           
  3348                           ;ES_Port.c: 80: TickCount--;
  3349  0354  3001               	movlw	1
  3350  0355  02DC               	subwf	_TickCount,f
  3351                           
  3352                           ;ES_Port.c: 81: return (1);
  3353  0356  3401               	retlw	1
  3354  0357                     __end_of_IsTimerPending:	
  3355                           ;ES_Port.c: 83: return (0);
  3356                           
  3357                           ;ES_Port.c: 82: } else
  3358                           
  3359  0357                     __ptext9:	
  3360 ;; *************** function _RunSPIService *****************
  3361 ;; Defined at:
  3362 ;;		line 170 in file "SPI_SM.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  ReturnEvent     3    3[BANK0 ] struct ES_Event_t
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  3    0[BANK0 ] struct ES_Event_t
  3369 ;; Registers used:
  3370 ;;		wreg, status,2
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3376 ;;      Params:         0       3       0       0
  3377 ;;      Locals:         0       3       0       0
  3378 ;;      Temps:          0       0       0       0
  3379 ;;      Totals:         0       6       0       0
  3380 ;;Total ram usage:        6 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    4
  3383 ;; This function calls:
  3384 ;;		Nothing
  3385 ;; This function is called by:
  3386 ;;		_ES_Run
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           
  3391                           ;psect for function _RunSPIService
  3392  0357                     _RunSPIService:	
  3393                           
  3394                           ;SPI_SM.c: 171: ES_Event ReturnEvent;
  3395                           ;SPI_SM.c: 172: ReturnEvent.EventType = ES_NO_EVENT;
  3396                           
  3397                           ;incstack = 0
  3398                           ; Regs used in _RunSPIService: [wreg+status,2]
  3399  0357  1283               	bcf	3,5	;RP0=0, select bank0
  3400  0358  1303               	bcf	3,6	;RP1=0, select bank0
  3401  0359  01A3               	clrf	RunSPIService@ReturnEvent
  3402                           
  3403                           ;SPI_SM.c: 176: return ReturnEvent;
  3404  035A  0823               	movf	RunSPIService@ReturnEvent,w
  3405  035B  00A0               	movwf	?_RunSPIService
  3406  035C  0824               	movf	RunSPIService@ReturnEvent+1,w
  3407  035D  00A1               	movwf	?_RunSPIService+1
  3408  035E  0825               	movf	RunSPIService@ReturnEvent+2,w
  3409  035F  00A2               	movwf	?_RunSPIService+2
  3410  0360  0008               	return
  3411  0361                     __end_of_RunSPIService:	
  3412  0361                     __ptext26:	
  3413 ;; *************** function _InitUARTTXService *****************
  3414 ;; Defined at:
  3415 ;;		line 91 in file "UART_TX_SM.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;  Priority        1   18[BANK0 ] unsigned char 
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;  ThisEvent       3   20[BANK0 ] struct ES_Event_t
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      unsigned char 
  3422 ;; Registers used:
  3423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3429 ;;      Params:         0       1       0       0
  3430 ;;      Locals:         0       3       0       0
  3431 ;;      Temps:          0       1       0       0
  3432 ;;      Totals:         0       5       0       0
  3433 ;;Total ram usage:        5 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    7
  3436 ;; This function calls:
  3437 ;;		_ES_PostToService
  3438 ;; This function is called by:
  3439 ;;		_ES_Initialize
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _InitUARTTXService
  3445  0361                     _InitUARTTXService:	
  3446                           
  3447                           ;UART_TX_SM.c: 92: ES_Event ThisEvent;
  3448                           ;UART_TX_SM.c: 94: MyPriority = Priority;
  3449                           
  3450                           ;incstack = 0
  3451 ;; hardware stack exceeded
  3452                           ; Regs used in _InitUARTTXService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3453  0361  1283               	bcf	3,5	;RP0=0, select bank0
  3454  0362  1303               	bcf	3,6	;RP1=0, select bank0
  3455  0363  0832               	movf	InitUARTTXService@Priority,w
  3456  0364  00B3               	movwf	??_InitUARTTXService
  3457  0365  00D5               	movwf	UART_TX_SM@MyPriority
  3458  0366  3002               	movlw	2
  3459                           
  3460                           ;UART_TX_SM.c: 96: length = 0;
  3461  0367  01E2               	clrf	_length
  3462  0368  01E1               	clrf	_index
  3463                           
  3464                           ;UART_TX_SM.c: 100: ThisEvent.EventType = ES_INIT;
  3465  0369  00B3               	movwf	??_InitUARTTXService
  3466  036A  00B4               	movwf	InitUARTTXService@ThisEvent
  3467                           
  3468                           ;UART_TX_SM.c: 101: if (ES_PostToService(MyPriority, ThisEvent) == ((boolean) !((boolean
      +                          ) 0))) {
  3469  036B  00AD               	movwf	ES_PostToService@TheEvent
  3470  036C  0835               	movf	InitUARTTXService@ThisEvent+1,w
  3471  036D  00AE               	movwf	ES_PostToService@TheEvent+1
  3472  036E  0836               	movf	InitUARTTXService@ThisEvent+2,w
  3473  036F  00AF               	movwf	ES_PostToService@TheEvent+2
  3474  0370  0855               	movf	UART_TX_SM@MyPriority,w
  3475  0371  2668  118A         	fcall	_ES_PostToService
  3476  0373  3A01               	xorlw	1
  3477  0374  1903               	btfsc	3,2
  3478                           
  3479                           ;UART_TX_SM.c: 102: return ((boolean) !((boolean) 0));
  3480  0375  3401               	retlw	1
  3481                           
  3482                           ;UART_TX_SM.c: 104: return ((boolean) 0);
  3483                           
  3484                           ;UART_TX_SM.c: 103: } else {
  3485  0376  3400               	retlw	0
  3486  0377                     __end_of_InitUARTTXService:	
  3487  0377                     __ptext24:	
  3488 ;; *************** function _InitSPIService *****************
  3489 ;; Defined at:
  3490 ;;		line 83 in file "SPI_SM.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;  Priority        1   18[BANK0 ] unsigned char 
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;  ThisEvent       3   20[BANK0 ] struct ES_Event_t
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      unsigned char 
  3497 ;; Registers used:
  3498 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3504 ;;      Params:         0       1       0       0
  3505 ;;      Locals:         0       3       0       0
  3506 ;;      Temps:          0       1       0       0
  3507 ;;      Totals:         0       5       0       0
  3508 ;;Total ram usage:        5 bytes
  3509 ;; Hardware stack levels used:    1
  3510 ;; Hardware stack levels required when called:    7
  3511 ;; This function calls:
  3512 ;;		_ES_PostToService
  3513 ;; This function is called by:
  3514 ;;		_ES_Initialize
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           
  3519                           ;psect for function _InitSPIService
  3520  0377                     _InitSPIService:	
  3521                           
  3522                           ;SPI_SM.c: 84: ES_Event ThisEvent;
  3523                           ;SPI_SM.c: 86: MyPriority = Priority;
  3524                           
  3525                           ;incstack = 0
  3526 ;; hardware stack exceeded
  3527                           ; Regs used in _InitSPIService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3528  0377  1283               	bcf	3,5	;RP0=0, select bank0
  3529  0378  1303               	bcf	3,6	;RP1=0, select bank0
  3530  0379  0832               	movf	InitSPIService@Priority,w
  3531  037A  00B3               	movwf	??_InitSPIService
  3532  037B  00D1               	movwf	SPI_SM@MyPriority
  3533                           
  3534                           ;SPI_SM.c: 88: radioPing = ((boolean) 0);
  3535  037C  01E5               	clrf	_radioPing
  3536                           
  3537                           ;SPI_SM.c: 90: GIE = 0;
  3538  037D  138B               	bcf	11,7	;volatile
  3539                           
  3540                           ;SPI_SM.c: 94: SSPSTAT = 0b00000000;
  3541  037E  1683               	bsf	3,5	;RP0=1, select bank1
  3542  037F  1303               	bcf	3,6	;RP1=0, select bank1
  3543  0380  0194               	clrf	20	;volatile
  3544                           
  3545                           ;SPI_SM.c: 102: TRISC7 = 0;
  3546  0381  1387               	bcf	7,7	;volatile
  3547                           
  3548                           ;SPI_SM.c: 103: TRISB4 = 1;
  3549  0382  1606               	bsf	6,4	;volatile
  3550                           
  3551                           ;SPI_SM.c: 104: TRISB6 = 1;
  3552  0383  1706               	bsf	6,6	;volatile
  3553                           
  3554                           ;SPI_SM.c: 105: TRISC6 = 1;
  3555  0384  1707               	bsf	7,6	;volatile
  3556                           
  3557                           ;SPI_SM.c: 109: SSPBUF = 0xFF;
  3558  0385  30FF               	movlw	255
  3559  0386  1283               	bcf	3,5	;RP0=0, select bank0
  3560  0387  1303               	bcf	3,6	;RP1=0, select bank0
  3561  0388  0093               	movwf	19	;volatile
  3562                           
  3563                           ;SPI_SM.c: 114: SSPCON = 0b00110100;
  3564  0389  3034               	movlw	52
  3565  038A  0094               	movwf	20	;volatile
  3566                           
  3567                           ;SPI_SM.c: 117: currentState = Waiting4Command;
  3568  038B  01D2               	clrf	SPI_SM@currentState
  3569                           
  3570                           ;SPI_SM.c: 119: SSPIE = 0;
  3571  038C  1683               	bsf	3,5	;RP0=1, select bank1
  3572  038D  1303               	bcf	3,6	;RP1=0, select bank1
  3573  038E  118C               	bcf	12,3	;volatile
  3574                           
  3575                           ;SPI_SM.c: 120: PEIE = 0;
  3576  038F  130B               	bcf	11,6	;volatile
  3577                           
  3578                           ;SPI_SM.c: 121: GIE = 1;
  3579  0390  178B               	bsf	11,7	;volatile
  3580                           
  3581                           ;SPI_SM.c: 124: ThisEvent.EventType = ES_INIT;
  3582  0391  3002               	movlw	2
  3583  0392  1283               	bcf	3,5	;RP0=0, select bank0
  3584  0393  1303               	bcf	3,6	;RP1=0, select bank0
  3585  0394  00B3               	movwf	??_InitSPIService
  3586  0395  00B4               	movwf	InitSPIService@ThisEvent
  3587                           
  3588                           ;SPI_SM.c: 125: if (ES_PostToService(MyPriority, ThisEvent) == ((boolean) !((boolean) 0)
      +                          )) {
  3589  0396  00AD               	movwf	ES_PostToService@TheEvent
  3590  0397  0835               	movf	InitSPIService@ThisEvent+1,w
  3591  0398  00AE               	movwf	ES_PostToService@TheEvent+1
  3592  0399  0836               	movf	InitSPIService@ThisEvent+2,w
  3593  039A  00AF               	movwf	ES_PostToService@TheEvent+2
  3594  039B  0851               	movf	SPI_SM@MyPriority,w
  3595  039C  2668  118A         	fcall	_ES_PostToService
  3596  039E  3A01               	xorlw	1
  3597  039F  1903               	btfsc	3,2
  3598                           
  3599                           ;SPI_SM.c: 126: return ((boolean) !((boolean) 0));
  3600  03A0  3401               	retlw	1
  3601                           
  3602                           ;SPI_SM.c: 128: return ((boolean) 0);
  3603                           
  3604                           ;SPI_SM.c: 127: } else {
  3605  03A1  3400               	retlw	0
  3606  03A2                     __end_of_InitSPIService:	
  3607  03A2                     __ptext25:	
  3608 ;; *************** function _InitUARTRXService *****************
  3609 ;; Defined at:
  3610 ;;		line 143 in file "UART_RX_SM.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  Priority        1   18[BANK0 ] unsigned char 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  ThisEvent       3   20[BANK0 ] struct ES_Event_t
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  1    wreg      unsigned char 
  3617 ;; Registers used:
  3618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3624 ;;      Params:         0       1       0       0
  3625 ;;      Locals:         0       3       0       0
  3626 ;;      Temps:          0       1       0       0
  3627 ;;      Totals:         0       5       0       0
  3628 ;;Total ram usage:        5 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    7
  3631 ;; This function calls:
  3632 ;;		_ES_PostToService
  3633 ;; This function is called by:
  3634 ;;		_ES_Initialize
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           
  3639                           ;psect for function _InitUARTRXService
  3640  03A2                     _InitUARTRXService:	
  3641                           
  3642                           ;UART_RX_SM.c: 144: ES_Event ThisEvent;
  3643                           ;UART_RX_SM.c: 146: MyPriority = Priority;
  3644                           
  3645                           ;incstack = 0
  3646 ;; hardware stack exceeded
  3647                           ; Regs used in _InitUARTRXService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3648  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  3649  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  3650  03A4  0832               	movf	InitUARTRXService@Priority,w
  3651  03A5  00B3               	movwf	??_InitUARTRXService
  3652  03A6  00D7               	movwf	_MyPriority
  3653                           
  3654                           ;UART_RX_SM.c: 149: readRXIndex = readStatIndex = readRespIndex = 1;
  3655  03A7  3001               	movlw	1
  3656  03A8  00E7               	movwf	_readRespIndex
  3657  03A9  00E8               	movwf	_readStatIndex
  3658  03AA  00B3               	movwf	??_InitUARTRXService
  3659  03AB  00E6               	movwf	_readRXIndex
  3660                           
  3661                           ;UART_RX_SM.c: 150: do{ if (readRXIndex == 0) { readRXIndex = 1; writeRXIndex = 0; } els
      +                          e { readRXIndex = 0; writeRXIndex = 1; } }while(0);
  3662  03AC  0866               	movf	_readRXIndex,w
  3663  03AD  1D03               	btfss	3,2
  3664  03AE  2BB3               	goto	l2756
  3665  03AF  01E6               	clrf	_readRXIndex
  3666  03B0  0AE6               	incf	_readRXIndex,f
  3667  03B1  01EA               	clrf	_writeRXIndex
  3668  03B2  2BB6               	goto	l2760
  3669  03B3                     l2756:	
  3670  03B3  01E6               	clrf	_readRXIndex
  3671  03B4  01EA               	clrf	_writeRXIndex
  3672  03B5  0AEA               	incf	_writeRXIndex,f
  3673  03B6                     l2760:	
  3674                           ;UART_RX_SM.c: 151: do{ if (readStatIndex == 0) { readStatIndex = 1; writeStatIndex = 0;
      +                           } else { readStatIndex = 0; writeStatIndex = 1; } }while(0);
  3675                           
  3676  03B6  0868               	movf	_readStatIndex,w
  3677  03B7  1D03               	btfss	3,2
  3678  03B8  2BBD               	goto	l2766
  3679  03B9  01E8               	clrf	_readStatIndex
  3680  03BA  0AE8               	incf	_readStatIndex,f
  3681  03BB  01EC               	clrf	_writeStatIndex
  3682  03BC  2BC0               	goto	l2770
  3683  03BD                     l2766:	
  3684  03BD  01E8               	clrf	_readStatIndex
  3685  03BE  01EC               	clrf	_writeStatIndex
  3686  03BF  0AEC               	incf	_writeStatIndex,f
  3687  03C0                     l2770:	
  3688                           ;UART_RX_SM.c: 152: do{ if (readRespIndex == 0) { readRespIndex = 1; writeRespIndex = 0;
      +                           } else { readRespIndex = 0; writeRespIndex = 1; } }while(0);
  3689                           
  3690  03C0  0867               	movf	_readRespIndex,w
  3691  03C1  1D03               	btfss	3,2
  3692  03C2  2BC7               	goto	l2776
  3693  03C3  01E7               	clrf	_readRespIndex
  3694  03C4  0AE7               	incf	_readRespIndex,f
  3695  03C5  01EB               	clrf	_writeRespIndex
  3696  03C6  2BCA               	goto	l406
  3697  03C7                     l2776:	
  3698  03C7  01E7               	clrf	_readRespIndex
  3699  03C8  01EB               	clrf	_writeRespIndex
  3700  03C9  0AEB               	incf	_writeRespIndex,f
  3701  03CA                     l406:	
  3702                           
  3703                           ;UART_RX_SM.c: 155: superPACAddr = 0;
  3704  03CA  1683               	bsf	3,5	;RP0=1, select bank1
  3705  03CB  3002               	movlw	2
  3706  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  3707  03CD  01D3               	clrf	_superPACAddr^(0+128)
  3708  03CE  01D4               	clrf	(_superPACAddr+1)^(0+128)
  3709                           
  3710                           ;UART_RX_SM.c: 158: ThisEvent.EventType = ES_INIT;
  3711  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  3712  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  3713  03D1  00B3               	movwf	??_InitUARTRXService
  3714  03D2  00B4               	movwf	InitUARTRXService@ThisEvent
  3715                           
  3716                           ;UART_RX_SM.c: 159: if (ES_PostToService(MyPriority, ThisEvent) == ((boolean) !((boolean
      +                          ) 0))) {
  3717  03D3  00AD               	movwf	ES_PostToService@TheEvent
  3718  03D4  0835               	movf	InitUARTRXService@ThisEvent+1,w
  3719  03D5  00AE               	movwf	ES_PostToService@TheEvent+1
  3720  03D6  0836               	movf	InitUARTRXService@ThisEvent+2,w
  3721  03D7  00AF               	movwf	ES_PostToService@TheEvent+2
  3722  03D8  0857               	movf	_MyPriority,w
  3723  03D9  2668  118A         	fcall	_ES_PostToService
  3724  03DB  3A01               	xorlw	1
  3725  03DC  1903               	btfsc	3,2
  3726                           
  3727                           ;UART_RX_SM.c: 160: return ((boolean) !((boolean) 0));
  3728  03DD  3401               	retlw	1
  3729                           
  3730                           ;UART_RX_SM.c: 162: return ((boolean) 0);
  3731                           
  3732                           ;UART_RX_SM.c: 161: } else {
  3733  03DE  3400               	retlw	0
  3734  03DF                     __end_of_InitUARTRXService:	
  3735  03DF                     __ptext3:	
  3736 ;; *************** function _RunUARTTXService *****************
  3737 ;; Defined at:
  3738 ;;		line 146 in file "UART_TX_SM.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;  ThisEvent       3   22[BANK0 ] struct ES_Event_t
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;  ReturnEvent     3   29[BANK0 ] struct ES_Event_t
  3743 ;; Return value:  Size  Location     Type
  3744 ;;                  3   22[BANK0 ] struct ES_Event_t
  3745 ;; Registers used:
  3746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3747 ;; Tracked objects:
  3748 ;;		On entry : 0/0
  3749 ;;		On exit  : 0/0
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3752 ;;      Params:         0       3       0       0
  3753 ;;      Locals:         0       5       0       0
  3754 ;;      Temps:          0       4       0       0
  3755 ;;      Totals:         0      12       0       0
  3756 ;;Total ram usage:       12 bytes
  3757 ;; Hardware stack levels used:    1
  3758 ;; Hardware stack levels required when called:    8
  3759 ;; This function calls:
  3760 ;;		_ES_Timer_InitTimer
  3761 ;;		_TX_appendXBeePacket
  3762 ;;		_TX_clearXBeePacket
  3763 ;;		_TX_getChecksum
  3764 ;;		_retrySend
  3765 ;; This function is called by:
  3766 ;;		_ES_Run
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           
  3771                           ;psect for function _RunUARTTXService
  3772  03DF                     _RunUARTTXService:	
  3773                           
  3774                           ;UART_TX_SM.c: 147: ES_Event ReturnEvent;
  3775                           ;UART_TX_SM.c: 148: ReturnEvent.EventType = ES_NO_EVENT;
  3776                           
  3777                           ;incstack = 0
  3778 ;; hardware stack exceeded
  3779                           ; Regs used in _RunUARTTXService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3780  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  3781  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  3782  03E1  01BD               	clrf	RunUARTTXService@ReturnEvent
  3783                           
  3784                           ;UART_TX_SM.c: 150: switch (currentState) {
  3785  03E2  2CC0               	goto	l2672
  3786  03E3                     l2600:	
  3787                           ;UART_TX_SM.c: 151: case InitPTXState:
  3788                           
  3789                           
  3790                           ;UART_TX_SM.c: 152: if (ThisEvent.EventType == ES_INIT)
  3791  03E3  3002               	movlw	2
  3792  03E4  0636               	xorwf	RunUARTTXService@ThisEvent,w
  3793  03E5  1D03               	btfss	3,2
  3794  03E6  2CCE               	goto	l2674
  3795  03E7  2C8D               	goto	l552
  3796  03E8                     l2604:	
  3797                           ;UART_TX_SM.c: 157: case TX_Idle:
  3798                           
  3799                           ;UART_TX_SM.c: 155: }
  3800                           ;UART_TX_SM.c: 156: break;
  3801                           
  3802                           ;UART_TX_SM.c: 153: {
  3803                           ;UART_TX_SM.c: 154: currentState = TX_Idle;
  3804                           
  3805                           
  3806                           ;UART_TX_SM.c: 158: if (ThisEvent.EventType == ES_TX_REQUEST_SEND) {
  3807  03E8  300D               	movlw	13
  3808  03E9  0636               	xorwf	RunUARTTXService@ThisEvent,w
  3809  03EA  1D03               	btfss	3,2
  3810  03EB  2C41               	goto	l2640
  3811                           
  3812                           ;UART_TX_SM.c: 160: if (((superPACAddr[0] | superPACAddr[1] == 0) ? ((boolean) 0) : ((bo
      +                          olean) !((boolean) 0)))) {
  3813  03EC  1683               	bsf	3,5	;RP0=1, select bank1
  3814  03ED  1303               	bcf	3,6	;RP1=0, select bank1
  3815  03EE  0852               	movf	(UART_TX_SM@superPACAddr^(0+128)+1),w
  3816  03EF  1D03               	btfss	3,2
  3817  03F0  2BF3               	goto	u1490
  3818  03F1  3001               	movlw	1
  3819  03F2  2BF4               	goto	u1500
  3820  03F3                     u1490:	
  3821  03F3  3000               	movlw	0
  3822  03F4                     u1500:	
  3823  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  3824  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  3825  03F6  00B9               	movwf	??_RunUARTTXService
  3826  03F7  01BA               	clrf	??_RunUARTTXService+1
  3827  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  3828  03F9  1303               	bcf	3,6	;RP1=0, select bank1
  3829  03FA  0451               	iorwf	UART_TX_SM@superPACAddr^(0+128),w
  3830  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  3831  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  3832  03FD  00BB               	movwf	??_RunUARTTXService+2
  3833  03FE  083A               	movf	??_RunUARTTXService+1,w
  3834  03FF  00BC               	movwf	??_RunUARTTXService+3
  3835  0400  043B               	iorwf	??_RunUARTTXService+2,w
  3836  0401  1D03               	btfss	3,2
  3837  0402  2C06               	goto	l2610
  3838  0403  3001               	movlw	1
  3839  0404  00C0               	movwf	_RunUARTTXService$644
  3840  0405  2C07               	goto	L5
  3841  0406                     l2610:	
  3842  0406  01C0               	clrf	_RunUARTTXService$644
  3843  0407                     L5:	
  3844  0407  01C1               	clrf	_RunUARTTXService$644+1
  3845  0408  0840               	movf	_RunUARTTXService$644,w
  3846  0409  0441               	iorwf	_RunUARTTXService$644+1,w
  3847  040A  1903               	btfsc	3,2
  3848  040B  2C3C               	goto	l536
  3849                           
  3850                           ;UART_TX_SM.c: 162: TXError = ((boolean) 0);
  3851  040C  1683               	bsf	3,5	;RP0=1, select bank1
  3852  040D  1303               	bcf	3,6	;RP1=0, select bank1
  3853  040E  01D7               	clrf	_TXError^(0+128)
  3854                           
  3855                           ;UART_TX_SM.c: 164: TX_clearXBeePacket();
  3856  040F  273A  118A         	fcall	_TX_clearXBeePacket
  3857                           
  3858                           ;UART_TX_SM.c: 165: TX_appendXBeePacket(0x7E);
  3859  0411  307E               	movlw	126
  3860  0412  24DA  118A         	fcall	_TX_appendXBeePacket
  3861                           
  3862                           ;UART_TX_SM.c: 166: TX_appendXBeePacket(0x00);
  3863  0414  3000               	movlw	0
  3864  0415  24DA  118A         	fcall	_TX_appendXBeePacket
  3865                           
  3866                           ;UART_TX_SM.c: 167: TX_appendXBeePacket(0x05);
  3867  0417  3005               	movlw	5
  3868  0418  24DA  118A         	fcall	_TX_appendXBeePacket
  3869                           
  3870                           ;UART_TX_SM.c: 168: TX_appendXBeePacket(0x01);
  3871  041A  3001               	movlw	1
  3872  041B  24DA  118A         	fcall	_TX_appendXBeePacket
  3873                           
  3874                           ;UART_TX_SM.c: 169: TX_appendXBeePacket(0x01);
  3875  041D  3001               	movlw	1
  3876  041E  24DA  118A         	fcall	_TX_appendXBeePacket
  3877                           
  3878                           ;UART_TX_SM.c: 170: TX_appendXBeePacket(superPACAddr[0]);
  3879  0420  1683               	bsf	3,5	;RP0=1, select bank1
  3880  0421  1303               	bcf	3,6	;RP1=0, select bank1
  3881  0422  0851               	movf	UART_TX_SM@superPACAddr^(0+128),w
  3882  0423  24DA  118A         	fcall	_TX_appendXBeePacket
  3883                           
  3884                           ;UART_TX_SM.c: 171: TX_appendXBeePacket(superPACAddr[1]);
  3885  0425  1683               	bsf	3,5	;RP0=1, select bank1
  3886  0426  1303               	bcf	3,6	;RP1=0, select bank1
  3887  0427  0852               	movf	(UART_TX_SM@superPACAddr^(0+128)+1),w
  3888  0428  24DA  118A         	fcall	_TX_appendXBeePacket
  3889                           
  3890                           ;UART_TX_SM.c: 172: TX_appendXBeePacket((uint8_t) ThisEvent.EventParam);
  3891  042A  1283               	bcf	3,5	;RP0=0, select bank0
  3892  042B  1303               	bcf	3,6	;RP1=0, select bank0
  3893  042C  0837               	movf	RunUARTTXService@ThisEvent+1,w
  3894  042D  24DA  118A         	fcall	_TX_appendXBeePacket
  3895                           
  3896                           ;UART_TX_SM.c: 173: TX_appendXBeePacket(TX_getChecksum());
  3897  042F  2740  118A         	fcall	_TX_getChecksum
  3898  0431  24DA  118A         	fcall	_TX_appendXBeePacket
  3899                           
  3900                           ;UART_TX_SM.c: 176: currentState = TX_SendMSG;
  3901  0433  3002               	movlw	2
  3902  0434  1283               	bcf	3,5	;RP0=0, select bank0
  3903  0435  1303               	bcf	3,6	;RP1=0, select bank0
  3904  0436  00B9               	movwf	??_RunUARTTXService
  3905  0437  00D6               	movwf	UART_TX_SM@currentState
  3906                           
  3907                           ;UART_TX_SM.c: 177: TXIE = 1;
  3908  0438  1683               	bsf	3,5	;RP0=1, select bank1
  3909  0439  1303               	bcf	3,6	;RP1=0, select bank1
  3910  043A  160C               	bsf	12,4	;volatile
  3911                           
  3912                           ;UART_TX_SM.c: 178: } else {
  3913  043B  2CCE               	goto	l2674
  3914  043C                     l536:	
  3915                           
  3916                           ;UART_TX_SM.c: 179: TXError = ((boolean) !((boolean) 0));
  3917  043C  1683               	bsf	3,5	;RP0=1, select bank1
  3918  043D  1303               	bcf	3,6	;RP1=0, select bank1
  3919  043E  01D7               	clrf	_TXError^(0+128)
  3920  043F  0AD7               	incf	_TXError^(0+128),f
  3921                           
  3922                           ;UART_TX_SM.c: 180: }
  3923                           ;UART_TX_SM.c: 181: } else if (ThisEvent.EventType == ES_TX_NEW_ADDR) {
  3924  0440  2CCE               	goto	l2674
  3925  0441                     l2640:	
  3926  0441  300B               	movlw	11
  3927  0442  1283               	bcf	3,5	;RP0=0, select bank0
  3928  0443  0636               	xorwf	RunUARTTXService@ThisEvent,w
  3929  0444  1D03               	btfss	3,2
  3930  0445  2CCE               	goto	l2674
  3931                           
  3932                           ;UART_TX_SM.c: 182: superPACAddr[0] = (ThisEvent.EventParam >> 8) & 0xFF;
  3933  0446  0838               	movf	RunUARTTXService@ThisEvent+2,w
  3934  0447  00B9               	movwf	??_RunUARTTXService
  3935  0448  1683               	bsf	3,5	;RP0=1, select bank1
  3936  0449  1303               	bcf	3,6	;RP1=0, select bank1
  3937  044A  00D1               	movwf	UART_TX_SM@superPACAddr^(0+128)
  3938                           
  3939                           ;UART_TX_SM.c: 183: superPACAddr[1] = ThisEvent.EventParam & 0xFF;
  3940  044B  1283               	bcf	3,5	;RP0=0, select bank0
  3941  044C  1303               	bcf	3,6	;RP1=0, select bank0
  3942  044D  0837               	movf	RunUARTTXService@ThisEvent+1,w
  3943  044E  00B9               	movwf	??_RunUARTTXService
  3944  044F  1683               	bsf	3,5	;RP0=1, select bank1
  3945  0450  1303               	bcf	3,6	;RP1=0, select bank1
  3946  0451  00D2               	movwf	(UART_TX_SM@superPACAddr^(0+128)+1)
  3947                           
  3948                           ;UART_TX_SM.c: 187: }
  3949                           ;UART_TX_SM.c: 188: break;
  3950  0452  2CCE               	goto	l2674
  3951  0453                     l2646:	
  3952                           ;UART_TX_SM.c: 190: case TX_SendMSG:
  3953                           
  3954                           
  3955                           ;UART_TX_SM.c: 191: if (ThisEvent.EventType == ES_TX_SEND_COMPLETE) {
  3956  0453  300C               	movlw	12
  3957  0454  1283               	bcf	3,5	;RP0=0, select bank0
  3958  0455  0636               	xorwf	RunUARTTXService@ThisEvent,w
  3959  0456  1D03               	btfss	3,2
  3960  0457  2CCE               	goto	l2674
  3961                           
  3962                           ;UART_TX_SM.c: 192: currentState = TX_WaitStatus;
  3963  0458  3003               	movlw	3
  3964  0459  00B9               	movwf	??_RunUARTTXService
  3965  045A  00D6               	movwf	UART_TX_SM@currentState
  3966                           
  3967                           ;UART_TX_SM.c: 193: ES_Timer_InitTimer(1, (76 / 4));
  3968  045B  3013               	movlw	19
  3969  045C  00A0               	movwf	ES_Timer_InitTimer@NewTime
  3970  045D  3001               	movlw	1
  3971  045E  01A1               	clrf	ES_Timer_InitTimer@NewTime+1
  3972  045F  26CA  118A         	fcall	_ES_Timer_InitTimer
  3973                           
  3974                           ;UART_TX_SM.c: 194: }
  3975                           ;UART_TX_SM.c: 195: break;
  3976  0461  2CCE               	goto	l2674
  3977  0462                     l2652:	
  3978                           ;UART_TX_SM.c: 197: case TX_WaitStatus:
  3979                           
  3980                           
  3981                           ;UART_TX_SM.c: 198: {
  3982                           ;UART_TX_SM.c: 200: if (ThisEvent.EventType == ES_TIMEOUT) {
  3983  0462  3004               	movlw	4
  3984  0463  1283               	bcf	3,5	;RP0=0, select bank0
  3985  0464  1303               	bcf	3,6	;RP1=0, select bank0
  3986  0465  0636               	xorwf	RunUARTTXService@ThisEvent,w
  3987  0466  1D03               	btfss	3,2
  3988  0467  2C88               	goto	l2660
  3989                           
  3990                           ;UART_TX_SM.c: 201: if (ThisEvent.EventParam == 1) {
  3991  0468  0337               	decf	RunUARTTXService@ThisEvent+1,w
  3992  0469  0438               	iorwf	RunUARTTXService@ThisEvent+2,w
  3993  046A  1D03               	btfss	3,2
  3994  046B  2C85               	goto	l2658
  3995                           
  3996                           ;psect for function _retrySend
  3997                           
  3998                           ;UART_TX_SM.c: 203: retrySend();
  3999  046C                     i1L_retrySend:	
  4000  046C                     i1Ll2376:	
  4001                           
  4002                           ;UART_TX_SM.c: 307: ES_Event LEDEvent;
  4003                           ;UART_TX_SM.c: 308: LEDEvent.EventType = ES_TOGGLE_LED;
  4004  046C  300F               	movlw	15
  4005  046D  1283               	bcf	3,5	;RP0=0, select bank0
  4006  046E  1303               	bcf	3,6	;RP1=0, select bank0
  4007  046F  00B2               	movwf	??_retrySend
  4008  0470  00B3               	movwf	retrySend@LEDEvent
  4009  0471                     i1Ll2378:	
  4010                           
  4011                           ;UART_TX_SM.c: 309: LEDEvent.EventParam = TX_ERR_TIMEOUT;
  4012  0471  01B4               	clrf	retrySend@LEDEvent+1
  4013  0472  01B5               	clrf	retrySend@LEDEvent+2
  4014  0473                     i1Ll2380:	
  4015                           
  4016                           ;UART_TX_SM.c: 310: ES_PostToService(3, LEDEvent);
  4017  0473  0833               	movf	retrySend@LEDEvent,w
  4018  0474  00AD               	movwf	ES_PostToService@TheEvent
  4019  0475  0834               	movf	retrySend@LEDEvent+1,w
  4020  0476  00AE               	movwf	ES_PostToService@TheEvent+1
  4021  0477  0835               	movf	retrySend@LEDEvent+2,w
  4022  0478  00AF               	movwf	ES_PostToService@TheEvent+2
  4023  0479  3003               	movlw	3
  4024  047A  2668  118A         	fcall	_ES_PostToService
  4025  047C                     i1Ll2382:	
  4026                           
  4027                           ;UART_TX_SM.c: 313: index = 0;
  4028  047C  1283               	bcf	3,5	;RP0=0, select bank0
  4029  047D  1303               	bcf	3,6	;RP1=0, select bank0
  4030  047E  01E1               	clrf	_index
  4031  047F                     i1Ll2384:	
  4032                           
  4033                           ;UART_TX_SM.c: 314: currentState = TX_SendMSG;
  4034  047F  3002               	movlw	2
  4035  0480  00B2               	movwf	??_retrySend
  4036  0481  00D6               	movwf	UART_TX_SM@currentState
  4037  0482                     i1Ll2386:	
  4038                           
  4039                           ;UART_TX_SM.c: 315: TXIE = 1;
  4040  0482  1683               	bsf	3,5	;RP0=1, select bank1
  4041  0483  1303               	bcf	3,6	;RP1=0, select bank1
  4042  0484  160C               	bsf	12,4	;volatile
  4043  0485                     i1Ll595:	
  4044  0485                     l2658:	
  4045                           
  4046                           ;UART_TX_SM.c: 204: }
  4047                           ;UART_TX_SM.c: 205: currentState = TX_Idle;
  4048  0485  1283               	bcf	3,5	;RP0=0, select bank0
  4049  0486  1303               	bcf	3,6	;RP1=0, select bank0
  4050  0487  2C8D               	goto	l552
  4051  0488                     l2660:	
  4052                           ;UART_TX_SM.c: 206: } else if (ThisEvent.EventType == ES_TX_STATUS) {
  4053                           
  4054  0488  300E               	movlw	14
  4055  0489  0636               	xorwf	RunUARTTXService@ThisEvent,w
  4056  048A  1903               	btfsc	3,2
  4057  048B  2CAA               	goto	l2668
  4058  048C  2CCE               	goto	l2674
  4059  048D                     l552:	
  4060                           ;UART_TX_SM.c: 208: case 0:
  4061                           
  4062                           ;UART_TX_SM.c: 207: switch (ThisEvent.EventParam) {
  4063                           
  4064                           
  4065                           ;UART_TX_SM.c: 209: currentState = TX_Idle;
  4066  048D  01D6               	clrf	UART_TX_SM@currentState
  4067  048E  0AD6               	incf	UART_TX_SM@currentState,f
  4068                           
  4069                           ;UART_TX_SM.c: 210: break;
  4070  048F  2CCE               	goto	l2674
  4071  0490                     l2664:	
  4072                           ;UART_TX_SM.c: 211: case 1:
  4073                           
  4074  0490                     i2L__ptext4:	
  4075                           ;UART_TX_SM.c: 212: case 2:
  4076                           ;UART_TX_SM.c: 213: case 3:
  4077                           ;UART_TX_SM.c: 214: retrySend();
  4078                           
  4079                           
  4080                           ;psect for function _retrySend
  4081  0490                     i2L_retrySend:	
  4082  0490                     i2Ll2376:	
  4083                           
  4084                           ;UART_TX_SM.c: 307: ES_Event LEDEvent;
  4085                           ;UART_TX_SM.c: 308: LEDEvent.EventType = ES_TOGGLE_LED;
  4086  0490  300F               	movlw	15
  4087  0491  1283               	bcf	3,5	;RP0=0, select bank0
  4088  0492  1303               	bcf	3,6	;RP1=0, select bank0
  4089  0493  00B2               	movwf	??_retrySend
  4090  0494  00B3               	movwf	retrySend@LEDEvent
  4091  0495                     i2Ll2378:	
  4092                           
  4093                           ;UART_TX_SM.c: 309: LEDEvent.EventParam = TX_ERR_TIMEOUT;
  4094  0495  01B4               	clrf	retrySend@LEDEvent+1
  4095  0496  01B5               	clrf	retrySend@LEDEvent+2
  4096  0497                     i2Ll2380:	
  4097                           
  4098                           ;UART_TX_SM.c: 310: ES_PostToService(3, LEDEvent);
  4099  0497  0833               	movf	retrySend@LEDEvent,w
  4100  0498  00AD               	movwf	ES_PostToService@TheEvent
  4101  0499  0834               	movf	retrySend@LEDEvent+1,w
  4102  049A  00AE               	movwf	ES_PostToService@TheEvent+1
  4103  049B  0835               	movf	retrySend@LEDEvent+2,w
  4104  049C  00AF               	movwf	ES_PostToService@TheEvent+2
  4105  049D  3003               	movlw	3
  4106  049E  2668  118A         	fcall	_ES_PostToService
  4107  04A0                     i2Ll2382:	
  4108                           
  4109                           ;UART_TX_SM.c: 313: index = 0;
  4110  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  4111  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  4112  04A2  01E1               	clrf	_index
  4113  04A3                     i2Ll2384:	
  4114                           
  4115                           ;UART_TX_SM.c: 314: currentState = TX_SendMSG;
  4116  04A3  3002               	movlw	2
  4117  04A4  00B2               	movwf	??_retrySend
  4118  04A5  00D6               	movwf	UART_TX_SM@currentState
  4119  04A6                     i2Ll2386:	
  4120                           
  4121                           ;UART_TX_SM.c: 315: TXIE = 1;
  4122  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  4123  04A7  1303               	bcf	3,6	;RP1=0, select bank1
  4124  04A8  160C               	bsf	12,4	;volatile
  4125  04A9                     i2Ll595:	
  4126                           
  4127                           ;UART_TX_SM.c: 218: }
  4128                           
  4129                           ;UART_TX_SM.c: 217: break;
  4130                           
  4131                           ;UART_TX_SM.c: 216: default:
  4132                           
  4133                           ;UART_TX_SM.c: 215: break;
  4134  04A9  2CCE               	goto	l2674
  4135  04AA                     l2668:	
  4136                           
  4137                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4138                           ; Switch size 1, requested type "space"
  4139                           ; Number of cases is 1, Range of values is 0 to 0
  4140                           ; switch strategies available:
  4141                           ; Name         Instructions Cycles
  4142                           ; simple_byte            4     3 (average)
  4143                           ; direct_byte            9     7 (fixed)
  4144                           ; jumptable            260     6 (fixed)
  4145                           ;	Chosen strategy is simple_byte
  4146  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  4147  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  4148  04AC  0838               	movf	RunUARTTXService@ThisEvent+2,w
  4149  04AD  3A00               	xorlw	0	; case 0
  4150  04AE  1903               	skipnz
  4151  04AF  2CB1               	goto	l3234
  4152  04B0  2CCE               	goto	l2674
  4153  04B1                     l3234:	
  4154                           
  4155                           ; Switch size 1, requested type "space"
  4156                           ; Number of cases is 4, Range of values is 0 to 3
  4157                           ; switch strategies available:
  4158                           ; Name         Instructions Cycles
  4159                           ; simple_byte           13     7 (average)
  4160                           ; direct_byte           15     7 (fixed)
  4161                           ; jumptable            260     6 (fixed)
  4162                           ;	Chosen strategy is simple_byte
  4163  04B1  0837               	movf	RunUARTTXService@ThisEvent+1,w
  4164  04B2  3A00               	xorlw	0	; case 0
  4165  04B3  1903               	skipnz
  4166  04B4  2C8D               	goto	l552
  4167  04B5  3A01               	xorlw	1	; case 1
  4168  04B6  1903               	skipnz
  4169  04B7  2C90               	goto	l2664
  4170  04B8  3A03               	xorlw	3	; case 2
  4171  04B9  1903               	skipnz
  4172  04BA  2C90               	goto	l2664
  4173  04BB  3A01               	xorlw	1	; case 3
  4174  04BC  1903               	skipnz
  4175  04BD  2C90               	goto	l2664
  4176  04BE  2CCE               	goto	l2674
  4177                           
  4178                           ;UART_TX_SM.c: 224: }
  4179                           
  4180                           ;UART_TX_SM.c: 219: }
  4181                           ;UART_TX_SM.c: 220: }
  4182                           ;UART_TX_SM.c: 221: break;
  4183  04BF  2CCE               	goto	l2674
  4184  04C0                     l2672:	
  4185  04C0  0856               	movf	UART_TX_SM@currentState,w
  4186                           
  4187                           ; Switch size 1, requested type "space"
  4188                           ; Number of cases is 4, Range of values is 0 to 3
  4189                           ; switch strategies available:
  4190                           ; Name         Instructions Cycles
  4191                           ; simple_byte           13     7 (average)
  4192                           ; direct_byte           15     7 (fixed)
  4193                           ; jumptable            260     6 (fixed)
  4194                           ;	Chosen strategy is simple_byte
  4195  04C1  3A00               	xorlw	0	; case 0
  4196  04C2  1903               	skipnz
  4197  04C3  2BE3               	goto	l2600
  4198  04C4  3A01               	xorlw	1	; case 1
  4199  04C5  1903               	skipnz
  4200  04C6  2BE8               	goto	l2604
  4201  04C7  3A03               	xorlw	3	; case 2
  4202  04C8  1903               	skipnz
  4203  04C9  2C53               	goto	l2646
  4204  04CA  3A01               	xorlw	1	; case 3
  4205  04CB  1903               	skipnz
  4206  04CC  2C62               	goto	l2652
  4207  04CD  2CCE               	goto	l2674
  4208  04CE                     l2674:	
  4209                           
  4210                           ;UART_TX_SM.c: 227: if (currentState == TX_Idle) {
  4211  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  4212  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  4213  04D0  0B56               	decfsz	UART_TX_SM@currentState,w
  4214  04D1  2CD3               	goto	l2678
  4215                           
  4216                           ;UART_TX_SM.c: 228: index = 0;
  4217  04D2  01E1               	clrf	_index
  4218  04D3                     l2678:	
  4219                           
  4220                           ;UART_TX_SM.c: 229: }
  4221                           ;UART_TX_SM.c: 231: return ReturnEvent;
  4222  04D3  083D               	movf	RunUARTTXService@ReturnEvent,w
  4223  04D4  00B6               	movwf	?_RunUARTTXService
  4224  04D5  083E               	movf	RunUARTTXService@ReturnEvent+1,w
  4225  04D6  00B7               	movwf	?_RunUARTTXService+1
  4226  04D7  083F               	movf	RunUARTTXService@ReturnEvent+2,w
  4227  04D8  00B8               	movwf	?_RunUARTTXService+2
  4228  04D9  0008               	return
  4229  04DA                     __end_of_RunUARTTXService:	
  4230  04DA                     __ptext7:	
  4231 ;; *************** function _TX_appendXBeePacket *****************
  4232 ;; Defined at:
  4233 ;;		line 247 in file "UART_TX_SM.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;  newByte         1    wreg     unsigned char 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  newByte         1    1[BANK0 ] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      unsigned char 
  4240 ;; Registers used:
  4241 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4247 ;;      Params:         0       0       0       0
  4248 ;;      Locals:         0       1       0       0
  4249 ;;      Temps:          0       1       0       0
  4250 ;;      Totals:         0       2       0       0
  4251 ;;Total ram usage:        2 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    4
  4254 ;; This function calls:
  4255 ;;		Nothing
  4256 ;; This function is called by:
  4257 ;;		_RunUARTTXService
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _TX_appendXBeePacket
  4263  04DA                     _TX_appendXBeePacket:	
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _TX_appendXBeePacket: [wreg-fsr0h+status,2+status,0]
  4267                           ;TX_appendXBeePacket@newByte stored from wreg
  4268  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  4269  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  4270  04DC  00A1               	movwf	TX_appendXBeePacket@newByte
  4271                           
  4272                           ;UART_TX_SM.c: 248: if ((length == 10) || (currentState != TX_Idle)) {
  4273  04DD  300A               	movlw	10
  4274  04DE  0662               	xorwf	_length,w
  4275  04DF  1D03               	btfss	3,2
  4276  04E0  0B56               	decfsz	UART_TX_SM@currentState,w
  4277  04E1  0008               	return
  4278                           
  4279                           ;UART_TX_SM.c: 251: XBeePacket[length++] = newByte;
  4280                           
  4281                           ;UART_TX_SM.c: 250: } else {
  4282                           
  4283                           ;UART_TX_SM.c: 249: return ((boolean) 0);
  4284                           ;	Return value of _TX_appendXBeePacket is never used
  4285  04E2  0821               	movf	TX_appendXBeePacket@newByte,w
  4286  04E3  00A0               	movwf	??_TX_appendXBeePacket
  4287  04E4  0862               	movf	_length,w
  4288  04E5  3EC4               	addlw	(low (_XBeePacket| 0))& (0+255)
  4289  04E6  0084               	movwf	4
  4290  04E7  0820               	movf	??_TX_appendXBeePacket,w
  4291  04E8  1383               	bcf	3,7	;select IRP bank1
  4292  04E9  0080               	movwf	0
  4293  04EA  3001               	movlw	1
  4294  04EB  00A0               	movwf	??_TX_appendXBeePacket
  4295  04EC  07E2               	addwf	_length,f
  4296                           
  4297                           ;UART_TX_SM.c: 252: return ((boolean) !((boolean) 0));
  4298                           ;	Return value of _TX_appendXBeePacket is never used
  4299  04ED  0008               	return
  4300  04EE                     __end_of_TX_appendXBeePacket:	
  4301  04EE                     __ptext8:	
  4302 ;; *************** function _RunUARTRXService *****************
  4303 ;; Defined at:
  4304 ;;		line 204 in file "UART_RX_SM.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  ThisEvent       3   18[BANK0 ] struct ES_Event_t
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  i               1   40[BANK0 ] unsigned char 
  4309 ;;  i               1   39[BANK0 ] unsigned char 
  4310 ;;  msgAddr         2   31[BANK0 ] unsigned int 
  4311 ;;  addrEvent       3   33[BANK0 ] struct ES_Event_t
  4312 ;;  TXEvent         3   36[BANK0 ] struct ES_Event_t
  4313 ;;  ReturnEvent     3   28[BANK0 ] struct ES_Event_t
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  3   18[BANK0 ] struct ES_Event_t
  4316 ;; Registers used:
  4317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4323 ;;      Params:         0       3       0       0
  4324 ;;      Locals:         0      13       0       0
  4325 ;;      Temps:          0       7       0       0
  4326 ;;      Totals:         0      23       0       0
  4327 ;;Total ram usage:       23 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:    7
  4330 ;; This function calls:
  4331 ;;		_ES_PostToService
  4332 ;;		_ES_Timer_InitTimer
  4333 ;;		___bmul
  4334 ;; This function is called by:
  4335 ;;		_ES_Run
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           
  4340                           ;psect for function _RunUARTRXService
  4341  04EE                     _RunUARTRXService:	
  4342                           
  4343                           ;UART_RX_SM.c: 205: ES_Event ReturnEvent;
  4344                           ;UART_RX_SM.c: 206: ReturnEvent.EventType = ES_NO_EVENT;
  4345                           
  4346                           ;incstack = 0
  4347 ;; hardware stack exceeded
  4348                           ; Regs used in _RunUARTRXService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4349  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  4350  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  4351  04F0  01BC               	clrf	RunUARTRXService@ReturnEvent
  4352                           
  4353                           ;UART_RX_SM.c: 208: switch (ThisEvent.EventType) {
  4354  04F1  2E45               	goto	l2592
  4355  04F2                     l2510:	
  4356                           ;UART_RX_SM.c: 209: case ES_RX_NEW_PACKET:
  4357                           
  4358                           
  4359                           ;UART_RX_SM.c: 210: if (RXBuffer[readRXIndex][0] == 0x81) {
  4360  04F2  300A               	movlw	10
  4361  04F3  00B5               	movwf	??_RunUARTRXService
  4362  04F4  00A0               	movwf	___bmul@multiplicand
  4363  04F5  0866               	movf	_readRXIndex,w
  4364  04F6  2656  118A         	fcall	___bmul
  4365  04F8  3EA0               	addlw	(low (_RXBuffer| 0))& (0+255)
  4366  04F9  0084               	movwf	4
  4367  04FA  3081               	movlw	129
  4368  04FB  1383               	bcf	3,7	;select IRP bank1
  4369  04FC  0600               	xorwf	0,w
  4370                           
  4371                           ;UART_RX_SM.c: 211: if (RXBuffer[readRXIndex][4] & (0x00000004 | 0x00000002)) {
  4372  04FD  300A               	movlw	10
  4373  04FE  1D03               	btfss	3,2
  4374  04FF  2E17               	goto	L6
  4375  0500  1283               	bcf	3,5	;RP0=0, select bank0
  4376  0501  1303               	bcf	3,6	;RP1=0, select bank0
  4377  0502  00B5               	movwf	??_RunUARTRXService
  4378  0503  00A0               	movwf	___bmul@multiplicand
  4379  0504  0866               	movf	_readRXIndex,w
  4380  0505  2656  118A         	fcall	___bmul
  4381  0507  3E04               	addlw	4
  4382  0508  3EA0               	addlw	(low (_RXBuffer| 0))& (0+255)
  4383  0509  0084               	movwf	4
  4384  050A  1383               	bcf	3,7	;select IRP bank1
  4385  050B  0800               	movf	0,w
  4386  050C  3906               	andlw	6
  4387  050D  1903               	btfsc	3,2
  4388  050E  2DA3               	goto	l2550
  4389                           
  4390                           ;UART_RX_SM.c: 215: for (uint8_t i = 0; i < 3; i++) {
  4391  050F  1283               	bcf	3,5	;RP0=0, select bank0
  4392  0510  3003               	movlw	3
  4393  0511  1303               	bcf	3,6	;RP1=0, select bank0
  4394  0512  01C7               	clrf	RunUARTRXService@i
  4395  0513  0247               	subwf	RunUARTRXService@i,w
  4396  0514  1803               	btfsc	3,0
  4397  0515  2D3F               	goto	l2526
  4398  0516                     l2520:	
  4399                           
  4400                           ;UART_RX_SM.c: 216: statusBuffer[writeStatIndex][i] = RXBuffer[readRXIndex][5 + i];
  4401  0516  3005               	movlw	5
  4402  0517  0747               	addwf	RunUARTRXService@i,w
  4403  0518  00B5               	movwf	??_RunUARTRXService
  4404  0519  3EA0               	addlw	(low (_RXBuffer| 0))& (0+255)
  4405  051A  00B6               	movwf	??_RunUARTRXService+1
  4406  051B  300A               	movlw	10
  4407  051C  00B7               	movwf	??_RunUARTRXService+2
  4408  051D  00A0               	movwf	___bmul@multiplicand
  4409  051E  0866               	movf	_readRXIndex,w
  4410  051F  2656  118A         	fcall	___bmul
  4411  0521  1283               	bcf	3,5	;RP0=0, select bank0
  4412  0522  1303               	bcf	3,6	;RP1=0, select bank0
  4413  0523  0736               	addwf	??_RunUARTRXService+1,w
  4414  0524  00B8               	movwf	??_RunUARTRXService+3
  4415  0525  0084               	movwf	4
  4416  0526  1383               	bcf	3,7	;select IRP bank1
  4417  0527  0800               	movf	0,w
  4418  0528  00B9               	movwf	??_RunUARTRXService+4
  4419  0529  3003               	movlw	3
  4420  052A  00BA               	movwf	??_RunUARTRXService+5
  4421  052B  00A0               	movwf	___bmul@multiplicand
  4422  052C  086C               	movf	_writeStatIndex,w
  4423  052D  2656  118A         	fcall	___bmul
  4424  052F  3EE1               	addlw	(low (_statusBuffer| 0))& (0+255)
  4425  0530  1283               	bcf	3,5	;RP0=0, select bank0
  4426  0531  1303               	bcf	3,6	;RP1=0, select bank0
  4427  0532  0747               	addwf	RunUARTRXService@i,w
  4428  0533  00BB               	movwf	??_RunUARTRXService+6
  4429  0534  0084               	movwf	4
  4430  0535  0839               	movf	??_RunUARTRXService+4,w
  4431  0536  1383               	bcf	3,7	;select IRP bank1
  4432  0537  0080               	movwf	0
  4433  0538  3001               	movlw	1
  4434  0539  00B5               	movwf	??_RunUARTRXService
  4435  053A  07C7               	addwf	RunUARTRXService@i,f
  4436  053B  3003               	movlw	3
  4437  053C  0247               	subwf	RunUARTRXService@i,w
  4438  053D  1C03               	skipc
  4439  053E  2D16               	goto	l2520
  4440  053F                     l2526:	
  4441                           ;UART_RX_SM.c: 217: }
  4442                           ;UART_RX_SM.c: 218: do{ if (readStatIndex == 0) { readStatIndex = 1; writeStatIndex = 0;
      +                           } else { readStatIndex = 0; writeStatIndex = 1; } }while(0);
  4443                           
  4444  053F  0868               	movf	_readStatIndex,w
  4445  0540  1D03               	btfss	3,2
  4446  0541  2D46               	goto	l2532
  4447  0542  01E8               	clrf	_readStatIndex
  4448  0543  0AE8               	incf	_readStatIndex,f
  4449  0544  01EC               	clrf	_writeStatIndex
  4450  0545  2D49               	goto	l2536
  4451  0546                     l2532:	
  4452  0546  01E8               	clrf	_readStatIndex
  4453  0547  01EC               	clrf	_writeStatIndex
  4454  0548  0AEC               	incf	_writeStatIndex,f
  4455  0549                     l2536:	
  4456                           
  4457                           ;UART_RX_SM.c: 220: ES_Timer_InitTimer(0, 76);
  4458  0549  304C               	movlw	76
  4459  054A  00A0               	movwf	ES_Timer_InitTimer@NewTime
  4460  054B  3000               	movlw	0
  4461  054C  01A1               	clrf	ES_Timer_InitTimer@NewTime+1
  4462  054D  26CA  118A         	fcall	_ES_Timer_InitTimer
  4463                           
  4464                           ;UART_RX_SM.c: 221: hasHeartbeat = ((boolean) !((boolean) 0));
  4465  054F  1283               	bcf	3,5	;RP0=0, select bank0
  4466  0550  3003               	movlw	3
  4467  0551  1303               	bcf	3,6	;RP1=0, select bank0
  4468  0552  01E0               	clrf	_hasHeartbeat
  4469  0553  0AE0               	incf	_hasHeartbeat,f
  4470                           
  4471                           ;UART_RX_SM.c: 224: ES_Event addrEvent;
  4472                           ;UART_RX_SM.c: 225: superPACAddr |= (statusBuffer[readStatIndex][1] << 8);
  4473  0554  00B5               	movwf	??_RunUARTRXService
  4474  0555  00A0               	movwf	___bmul@multiplicand
  4475  0556  0868               	movf	_readStatIndex,w
  4476  0557  2656  118A         	fcall	___bmul
  4477  0559  3E01               	addlw	1
  4478  055A  3EE1               	addlw	(low (_statusBuffer| 0))& (0+255)
  4479  055B  0084               	movwf	4
  4480  055C  1383               	bcf	3,7	;select IRP bank1
  4481  055D  0800               	movf	0,w
  4482  055E  1283               	bcf	3,5	;RP0=0, select bank0
  4483  055F  1303               	bcf	3,6	;RP1=0, select bank0
  4484  0560  00B6               	movwf	??_RunUARTRXService+1
  4485  0561  01B7               	clrf	??_RunUARTRXService+2
  4486  0562  00B7               	movwf	??_RunUARTRXService+2
  4487  0563  01B6               	clrf	??_RunUARTRXService+1
  4488  0564  0836               	movf	??_RunUARTRXService+1,w
  4489  0565  1683               	bsf	3,5	;RP0=1, select bank1
  4490  0566  1303               	bcf	3,6	;RP1=0, select bank1
  4491  0567  04D3               	iorwf	_superPACAddr^(0+128),f
  4492  0568  1283               	bcf	3,5	;RP0=0, select bank0
  4493  0569  1303               	bcf	3,6	;RP1=0, select bank0
  4494  056A  0837               	movf	??_RunUARTRXService+2,w
  4495  056B  1683               	bsf	3,5	;RP0=1, select bank1
  4496  056C  1303               	bcf	3,6	;RP1=0, select bank1
  4497  056D  04D4               	iorwf	(_superPACAddr+1)^(0+128),f
  4498                           
  4499                           ;UART_RX_SM.c: 226: superPACAddr |= (statusBuffer[readStatIndex][2]);
  4500  056E  3003               	movlw	3
  4501  056F  1283               	bcf	3,5	;RP0=0, select bank0
  4502  0570  1303               	bcf	3,6	;RP1=0, select bank0
  4503  0571  00B5               	movwf	??_RunUARTRXService
  4504  0572  00A0               	movwf	___bmul@multiplicand
  4505  0573  0868               	movf	_readStatIndex,w
  4506  0574  2656  118A         	fcall	___bmul
  4507  0576  3E02               	addlw	2
  4508  0577  3EE1               	addlw	(low (_statusBuffer| 0))& (0+255)
  4509  0578  0084               	movwf	4
  4510  0579  1383               	bcf	3,7	;select IRP bank1
  4511  057A  0800               	movf	0,w
  4512  057B  1283               	bcf	3,5	;RP0=0, select bank0
  4513  057C  1303               	bcf	3,6	;RP1=0, select bank0
  4514  057D  00B6               	movwf	??_RunUARTRXService+1
  4515  057E  01B7               	clrf	??_RunUARTRXService+2
  4516  057F  1683               	bsf	3,5	;RP0=1, select bank1
  4517  0580  1303               	bcf	3,6	;RP1=0, select bank1
  4518  0581  04D3               	iorwf	_superPACAddr^(0+128),f
  4519  0582  1283               	bcf	3,5	;RP0=0, select bank0
  4520  0583  1303               	bcf	3,6	;RP1=0, select bank0
  4521  0584  0837               	movf	??_RunUARTRXService+2,w
  4522  0585  1683               	bsf	3,5	;RP0=1, select bank1
  4523  0586  1303               	bcf	3,6	;RP1=0, select bank1
  4524  0587  04D4               	iorwf	(_superPACAddr+1)^(0+128),f
  4525                           
  4526                           ;UART_RX_SM.c: 227: addrEvent.EventType = ES_TX_NEW_ADDR;
  4527  0588  300B               	movlw	11
  4528  0589  1283               	bcf	3,5	;RP0=0, select bank0
  4529  058A  1303               	bcf	3,6	;RP1=0, select bank0
  4530  058B  00B5               	movwf	??_RunUARTRXService
  4531  058C  00C1               	movwf	RunUARTRXService@addrEvent
  4532                           
  4533                           ;UART_RX_SM.c: 228: addrEvent.EventParam = superPACAddr;
  4534  058D  1683               	bsf	3,5	;RP0=1, select bank1
  4535  058E  1303               	bcf	3,6	;RP1=0, select bank1
  4536  058F  0854               	movf	(_superPACAddr+1)^(0+128),w
  4537  0590  1283               	bcf	3,5	;RP0=0, select bank0
  4538  0591  1303               	bcf	3,6	;RP1=0, select bank0
  4539  0592  00C3               	movwf	RunUARTRXService@addrEvent+2
  4540  0593  1683               	bsf	3,5	;RP0=1, select bank1
  4541  0594  1303               	bcf	3,6	;RP1=0, select bank1
  4542  0595  0853               	movf	_superPACAddr^(0+128),w
  4543  0596  1283               	bcf	3,5	;RP0=0, select bank0
  4544  0597  1303               	bcf	3,6	;RP1=0, select bank0
  4545  0598  00C2               	movwf	RunUARTRXService@addrEvent+1
  4546                           
  4547                           ;UART_RX_SM.c: 229: ES_PostToService(1, addrEvent);
  4548  0599  0841               	movf	RunUARTRXService@addrEvent,w
  4549  059A  00AD               	movwf	ES_PostToService@TheEvent
  4550  059B  0842               	movf	RunUARTRXService@addrEvent+1,w
  4551  059C  00AE               	movwf	ES_PostToService@TheEvent+1
  4552  059D  0843               	movf	RunUARTRXService@addrEvent+2,w
  4553  059E  00AF               	movwf	ES_PostToService@TheEvent+2
  4554  059F  3001               	movlw	1
  4555  05A0  2668  118A         	fcall	_ES_PostToService
  4556                           
  4557                           ;UART_RX_SM.c: 230: } else {
  4558  05A2  2E4D               	goto	l2594
  4559  05A3                     l2550:	
  4560                           
  4561                           ;UART_RX_SM.c: 232: uint16_t msgAddr = RXBuffer[readRXIndex][1] << 8;
  4562  05A3  300A               	movlw	10
  4563  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  4564  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  4565  05A6  00B5               	movwf	??_RunUARTRXService
  4566  05A7  00A0               	movwf	___bmul@multiplicand
  4567  05A8  0866               	movf	_readRXIndex,w
  4568  05A9  2656  118A         	fcall	___bmul
  4569  05AB  3E01               	addlw	1
  4570  05AC  3EA0               	addlw	(low (_RXBuffer| 0))& (0+255)
  4571  05AD  0084               	movwf	4
  4572  05AE  1383               	bcf	3,7	;select IRP bank1
  4573  05AF  0800               	movf	0,w
  4574  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  4575  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  4576  05B2  00B6               	movwf	??_RunUARTRXService+1
  4577  05B3  01B7               	clrf	??_RunUARTRXService+2
  4578  05B4  00B7               	movwf	??_RunUARTRXService+2
  4579  05B5  01B6               	clrf	??_RunUARTRXService+1
  4580  05B6  0836               	movf	??_RunUARTRXService+1,w
  4581  05B7  00BF               	movwf	RunUARTRXService@msgAddr
  4582  05B8  0837               	movf	??_RunUARTRXService+2,w
  4583  05B9  00C0               	movwf	RunUARTRXService@msgAddr+1
  4584                           
  4585                           ;UART_RX_SM.c: 233: msgAddr |= RXBuffer[readRXIndex][2];
  4586  05BA  300A               	movlw	10
  4587  05BB  00B5               	movwf	??_RunUARTRXService
  4588  05BC  00A0               	movwf	___bmul@multiplicand
  4589  05BD  0866               	movf	_readRXIndex,w
  4590  05BE  2656  118A         	fcall	___bmul
  4591  05C0  3E02               	addlw	2
  4592  05C1  3EA0               	addlw	(low (_RXBuffer| 0))& (0+255)
  4593  05C2  0084               	movwf	4
  4594  05C3  1383               	bcf	3,7	;select IRP bank1
  4595  05C4  0800               	movf	0,w
  4596  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  4597  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  4598  05C7  00B6               	movwf	??_RunUARTRXService+1
  4599  05C8  01B7               	clrf	??_RunUARTRXService+2
  4600  05C9  04BF               	iorwf	RunUARTRXService@msgAddr,f
  4601  05CA  0837               	movf	??_RunUARTRXService+2,w
  4602  05CB  04C0               	iorwf	RunUARTRXService@msgAddr+1,f
  4603                           
  4604                           ;UART_RX_SM.c: 235: if (superPACAddr == msgAddr) {
  4605  05CC  0840               	movf	RunUARTRXService@msgAddr+1,w
  4606  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  4607  05CE  1303               	bcf	3,6	;RP1=0, select bank1
  4608  05CF  0654               	xorwf	(_superPACAddr+1)^(0+128),w
  4609  05D0  1D03               	skipz
  4610  05D1  2DD8               	goto	u1415
  4611  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  4612  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  4613  05D4  083F               	movf	RunUARTRXService@msgAddr,w
  4614  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  4615  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  4616  05D7  0653               	xorwf	_superPACAddr^(0+128),w
  4617  05D8                     u1415:	
  4618  05D8  1D03               	skipz
  4619  05D9  2E4D               	goto	l2594
  4620                           
  4621                           ;UART_RX_SM.c: 239: for (uint8_t i = 0; i < 3; i++) {
  4622  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  4623  05DB  3003               	movlw	3
  4624  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  4625  05DD  01C8               	clrf	RunUARTRXService@i_541
  4626  05DE  0248               	subwf	RunUARTRXService@i_541,w
  4627  05DF  1803               	btfsc	3,0
  4628  05E0  2E0A               	goto	l2568
  4629  05E1                     l2562:	
  4630                           
  4631                           ;UART_RX_SM.c: 240: responseBuffer[writeRespIndex][i] = RXBuffer[readRXIndex][5 + i];
  4632  05E1  3005               	movlw	5
  4633  05E2  0748               	addwf	RunUARTRXService@i_541,w
  4634  05E3  00B5               	movwf	??_RunUARTRXService
  4635  05E4  3EA0               	addlw	(low (_RXBuffer| 0))& (0+255)
  4636  05E5  00B6               	movwf	??_RunUARTRXService+1
  4637  05E6  300A               	movlw	10
  4638  05E7  00B7               	movwf	??_RunUARTRXService+2
  4639  05E8  00A0               	movwf	___bmul@multiplicand
  4640  05E9  0866               	movf	_readRXIndex,w
  4641  05EA  2656  118A         	fcall	___bmul
  4642  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  4643  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  4644  05EE  0736               	addwf	??_RunUARTRXService+1,w
  4645  05EF  00B8               	movwf	??_RunUARTRXService+3
  4646  05F0  0084               	movwf	4
  4647  05F1  1383               	bcf	3,7	;select IRP bank1
  4648  05F2  0800               	movf	0,w
  4649  05F3  00B9               	movwf	??_RunUARTRXService+4
  4650  05F4  3003               	movlw	3
  4651  05F5  00BA               	movwf	??_RunUARTRXService+5
  4652  05F6  00A0               	movwf	___bmul@multiplicand
  4653  05F7  086B               	movf	_writeRespIndex,w
  4654  05F8  2656  118A         	fcall	___bmul
  4655  05FA  3ED8               	addlw	(low (_responseBuffer| 0))& (0+255)
  4656  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  4657  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  4658  05FD  0748               	addwf	RunUARTRXService@i_541,w
  4659  05FE  00BB               	movwf	??_RunUARTRXService+6
  4660  05FF  0084               	movwf	4
  4661  0600  0839               	movf	??_RunUARTRXService+4,w
  4662  0601  1383               	bcf	3,7	;select IRP bank1
  4663  0602  0080               	movwf	0
  4664  0603  3001               	movlw	1
  4665  0604  00B5               	movwf	??_RunUARTRXService
  4666  0605  07C8               	addwf	RunUARTRXService@i_541,f
  4667  0606  3003               	movlw	3
  4668  0607  0248               	subwf	RunUARTRXService@i_541,w
  4669  0608  1C03               	skipc
  4670  0609  2DE1               	goto	l2562
  4671  060A                     l2568:	
  4672                           ;UART_RX_SM.c: 241: }
  4673                           ;UART_RX_SM.c: 242: do{ if (readRespIndex == 0) { readRespIndex = 1; writeRespIndex = 0;
      +                           } else { readRespIndex = 0; writeRespIndex = 1; } }while(0);
  4674                           
  4675  060A  0867               	movf	_readRespIndex,w
  4676  060B  1D03               	btfss	3,2
  4677  060C  2E11               	goto	l2574
  4678  060D  01E7               	clrf	_readRespIndex
  4679  060E  0AE7               	incf	_readRespIndex,f
  4680  060F  01EB               	clrf	_writeRespIndex
  4681  0610  2E14               	goto	l2578
  4682  0611                     l2574:	
  4683  0611  01E7               	clrf	_readRespIndex
  4684  0612  01EB               	clrf	_writeRespIndex
  4685  0613  0AEB               	incf	_writeRespIndex,f
  4686  0614                     l2578:	
  4687                           
  4688                           ;UART_RX_SM.c: 244: newResponseAvailable = ((boolean) !((boolean) 0));
  4689  0614  01E4               	clrf	_newResponseAvailable
  4690  0615  0AE4               	incf	_newResponseAvailable,f
  4691                           
  4692                           ;UART_RX_SM.c: 245: }
  4693                           ;UART_RX_SM.c: 246: }
  4694                           ;UART_RX_SM.c: 247: } else if (RXBuffer[readRXIndex][0] == 0x89) {
  4695  0616  2E4D               	goto	l2594
  4696  0617                     L6:	
  4697  0617  1283               	bcf	3,5	;RP0=0, select bank0
  4698  0618  1303               	bcf	3,6	;RP1=0, select bank0
  4699  0619  00B5               	movwf	??_RunUARTRXService
  4700  061A  00A0               	movwf	___bmul@multiplicand
  4701  061B  0866               	movf	_readRXIndex,w
  4702  061C  2656  118A         	fcall	___bmul
  4703  061E  3EA0               	addlw	(low (_RXBuffer| 0))& (0+255)
  4704  061F  0084               	movwf	4
  4705  0620  3089               	movlw	137
  4706  0621  1383               	bcf	3,7	;select IRP bank1
  4707  0622  0600               	xorwf	0,w
  4708  0623  1D03               	btfss	3,2
  4709  0624  2E4D               	goto	l2594
  4710                           
  4711                           ;UART_RX_SM.c: 249: ES_Event TXEvent;
  4712                           ;UART_RX_SM.c: 250: TXEvent.EventType = ES_TX_STATUS;
  4713  0625  300E               	movlw	14
  4714  0626  1283               	bcf	3,5	;RP0=0, select bank0
  4715  0627  1303               	bcf	3,6	;RP1=0, select bank0
  4716  0628  00B5               	movwf	??_RunUARTRXService
  4717  0629  00C4               	movwf	RunUARTRXService@TXEvent
  4718                           
  4719                           ;UART_RX_SM.c: 251: TXEvent.EventParam = 2;
  4720  062A  3002               	movlw	2
  4721  062B  00C5               	movwf	RunUARTRXService@TXEvent+1
  4722  062C  01C6               	clrf	RunUARTRXService@TXEvent+2
  4723                           
  4724                           ;UART_RX_SM.c: 252: ES_PostToService(1, TXEvent);
  4725  062D  0844               	movf	RunUARTRXService@TXEvent,w
  4726  062E  00AD               	movwf	ES_PostToService@TheEvent
  4727  062F  0845               	movf	RunUARTRXService@TXEvent+1,w
  4728  0630  00AE               	movwf	ES_PostToService@TheEvent+1
  4729  0631  0846               	movf	RunUARTRXService@TXEvent+2,w
  4730  0632  00AF               	movwf	ES_PostToService@TheEvent+2
  4731  0633  3001               	movlw	1
  4732  0634  2668  118A         	fcall	_ES_PostToService
  4733                           
  4734                           ;UART_RX_SM.c: 253: }
  4735                           ;UART_RX_SM.c: 254: break;
  4736  0636  2E4D               	goto	l2594
  4737  0637                     l2586:	
  4738                           ;UART_RX_SM.c: 255: case ES_TIMEOUT:
  4739                           
  4740                           
  4741                           ;UART_RX_SM.c: 256: if (ThisEvent.EventParam == 0) {
  4742  0637  1283               	bcf	3,5	;RP0=0, select bank0
  4743  0638  1303               	bcf	3,6	;RP1=0, select bank0
  4744  0639  0833               	movf	RunUARTRXService@ThisEvent+1,w
  4745  063A  0434               	iorwf	RunUARTRXService@ThisEvent+2,w
  4746  063B  1D03               	btfss	3,2
  4747  063C  2E4D               	goto	l2594
  4748                           
  4749                           ;UART_RX_SM.c: 257: superPACAddr = 0;
  4750  063D  1683               	bsf	3,5	;RP0=1, select bank1
  4751  063E  1303               	bcf	3,6	;RP1=0, select bank1
  4752  063F  01D3               	clrf	_superPACAddr^(0+128)
  4753  0640  01D4               	clrf	(_superPACAddr+1)^(0+128)
  4754                           
  4755                           ;UART_RX_SM.c: 258: hasHeartbeat = ((boolean) 0);
  4756  0641  1283               	bcf	3,5	;RP0=0, select bank0
  4757  0642  1303               	bcf	3,6	;RP1=0, select bank0
  4758  0643  01E0               	clrf	_hasHeartbeat
  4759                           
  4760                           ;UART_RX_SM.c: 263: }
  4761                           
  4762                           ;UART_RX_SM.c: 262: break;
  4763                           
  4764                           ;UART_RX_SM.c: 261: default:
  4765                           
  4766                           ;UART_RX_SM.c: 259: }
  4767                           ;UART_RX_SM.c: 260: break;
  4768  0644  2E4D               	goto	l2594
  4769  0645                     l2592:	
  4770  0645  0832               	movf	RunUARTRXService@ThisEvent,w
  4771                           
  4772                           ; Switch size 1, requested type "space"
  4773                           ; Number of cases is 2, Range of values is 4 to 7
  4774                           ; switch strategies available:
  4775                           ; Name         Instructions Cycles
  4776                           ; simple_byte            7     4 (average)
  4777                           ; direct_byte           18    10 (fixed)
  4778                           ; jumptable            263     9 (fixed)
  4779                           ;	Chosen strategy is simple_byte
  4780  0646  3A04               	xorlw	4	; case 4
  4781  0647  1903               	skipnz
  4782  0648  2E37               	goto	l2586
  4783  0649  3A03               	xorlw	3	; case 7
  4784  064A  1903               	skipnz
  4785  064B  2CF2               	goto	l2510
  4786  064C  2E4D               	goto	l2594
  4787  064D                     l2594:	
  4788                           
  4789                           ;UART_RX_SM.c: 265: return ReturnEvent;
  4790  064D  1283               	bcf	3,5	;RP0=0, select bank0
  4791  064E  1303               	bcf	3,6	;RP1=0, select bank0
  4792  064F  083C               	movf	RunUARTRXService@ReturnEvent,w
  4793  0650  00B2               	movwf	?_RunUARTRXService
  4794  0651  083D               	movf	RunUARTRXService@ReturnEvent+1,w
  4795  0652  00B3               	movwf	?_RunUARTRXService+1
  4796  0653  083E               	movf	RunUARTRXService@ReturnEvent+2,w
  4797  0654  00B4               	movwf	?_RunUARTRXService+2
  4798  0655  0008               	return
  4799  0656                     __end_of_RunUARTRXService:	
  4800  0656                     __ptext29:	
  4801 ;; *************** function ___bmul *****************
  4802 ;; Defined at:
  4803 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul8.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  multiplier      1    wreg     unsigned char 
  4806 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4809 ;;  product         1    2[BANK0 ] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      unsigned char 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4819 ;;      Params:         0       1       0       0
  4820 ;;      Locals:         0       2       0       0
  4821 ;;      Temps:          0       1       0       0
  4822 ;;      Totals:         0       4       0       0
  4823 ;;Total ram usage:        4 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    4
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_ES_Initialize
  4830 ;;		_ES_Run
  4831 ;;		_ES_PostToService
  4832 ;;		_ES_EnQueueFIFO
  4833 ;;		_ES_DeQueue
  4834 ;;		_RunUARTRXService
  4835 ;;		_RX_getStatusBuffer
  4836 ;;		_RX_getResponseBuffer
  4837 ;;		_UARTRXIntResponse
  4838 ;;		_ES_PostAll
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           
  4843                           ;psect for function ___bmul
  4844  0656                     ___bmul:	
  4845                           
  4846                           ;incstack = 0
  4847 ;; hardware stack exceeded
  4848                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4849                           ;___bmul@multiplier stored from wreg
  4850  0656  1283               	bcf	3,5	;RP0=0, select bank0
  4851  0657  1303               	bcf	3,6	;RP1=0, select bank0
  4852  0658  00A3               	movwf	___bmul@multiplier
  4853  0659  01A2               	clrf	___bmul@product
  4854  065A                     l2242:	
  4855  065A  1C23               	btfss	___bmul@multiplier,0
  4856  065B  2E5F               	goto	l2246
  4857  065C  0820               	movf	___bmul@multiplicand,w
  4858  065D  00A1               	movwf	??___bmul
  4859  065E  07A2               	addwf	___bmul@product,f
  4860  065F                     l2246:	
  4861  065F  1003               	clrc
  4862  0660  0DA0               	rlf	___bmul@multiplicand,f
  4863  0661  1003               	clrc
  4864  0662  0CA3               	rrf	___bmul@multiplier,f
  4865  0663  0823               	movf	___bmul@multiplier,w
  4866  0664  1D03               	btfss	3,2
  4867  0665  2E5A               	goto	l2242
  4868  0666  0822               	movf	___bmul@product,w
  4869  0667  0008               	return
  4870  0668                     __end_of___bmul:	
  4871  0668                     __ptext27:	
  4872 ;; *************** function _ES_PostToService *****************
  4873 ;; Defined at:
  4874 ;;		line 319 in file "ES_Framework.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  WhichService    1    wreg     unsigned char 
  4877 ;;  TheEvent        3   13[BANK0 ] struct ES_Event_t
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;  WhichService    1   17[BANK0 ] unsigned char 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  1    wreg      unsigned char 
  4882 ;; Registers used:
  4883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4889 ;;      Params:         0       3       0       0
  4890 ;;      Locals:         0       1       0       0
  4891 ;;      Temps:          0       1       0       0
  4892 ;;      Totals:         0       5       0       0
  4893 ;;Total ram usage:        5 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    6
  4896 ;; This function calls:
  4897 ;;		_ES_EnQueueFIFO
  4898 ;; This function is called by:
  4899 ;;		_InitUARTRXService
  4900 ;;		_PostUARTRXService
  4901 ;;		_RunUARTRXService
  4902 ;;		_CheckUARTRXEvent
  4903 ;;		_InitUARTTXService
  4904 ;;		_PostUARTTXService
  4905 ;;		_CheckUARTTXEvent
  4906 ;;		_retrySend
  4907 ;;		_InitPACSystemService
  4908 ;;		_PostPACSystemService
  4909 ;;		_InitSPIService
  4910 ;;		_CheckSPIEvent
  4911 ;;		_PostSPIService
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           
  4916                           ;psect for function _ES_PostToService
  4917  0668                     _ES_PostToService:	
  4918                           
  4919                           ;incstack = 0
  4920 ;; hardware stack exceeded
  4921                           ; Regs used in _ES_PostToService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4922                           ;ES_PostToService@WhichService stored from wreg
  4923  0668  1283               	bcf	3,5	;RP0=0, select bank0
  4924  0669  1303               	bcf	3,6	;RP1=0, select bank0
  4925  066A  00B1               	movwf	ES_PostToService@WhichService
  4926                           
  4927                           ;ES_Framework.c: 320: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  4928                           ;ES_Framework.c: 321: (ES_EnQueueFIFO(EventQueues[WhichService].pMem, TheEvent) ==
  4929                           ;ES_Framework.c: 322: ((boolean) !((boolean) 0)))) {
  4930  066B  3004               	movlw	4
  4931  066C  0231               	subwf	ES_PostToService@WhichService,w
  4932  066D  1803               	skipnc
  4933  066E  3400               	retlw	0
  4934  066F  082D               	movf	ES_PostToService@TheEvent,w
  4935  0670  00A4               	movwf	ES_EnQueueFIFO@Event2Add
  4936  0671  082E               	movf	ES_PostToService@TheEvent+1,w
  4937  0672  00A5               	movwf	ES_EnQueueFIFO@Event2Add+1
  4938  0673  082F               	movf	ES_PostToService@TheEvent+2,w
  4939  0674  00A6               	movwf	ES_EnQueueFIFO@Event2Add+2
  4940  0675  0831               	movf	ES_PostToService@WhichService,w
  4941  0676  00B0               	movwf	??_ES_PostToService
  4942  0677  0730               	addwf	??_ES_PostToService,w
  4943  0678  3E18               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  4944  0679  0084               	movwf	4
  4945  067A  118A  2040  118A   	fcall	stringdir
  4946  067D  26F1  118A         	fcall	_ES_EnQueueFIFO
  4947  067F  3A01               	xorlw	1
  4948  0680  1D03               	skipz
  4949  0681  3400               	retlw	0
  4950                           
  4951                           ;ES_Framework.c: 323: Ready |= BitNum2SetMask[WhichService];
  4952  0682  1283               	bcf	3,5	;RP0=0, select bank0
  4953  0683  1303               	bcf	3,6	;RP1=0, select bank0
  4954  0684  0831               	movf	ES_PostToService@WhichService,w
  4955  0685  3E10               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  4956  0686  0084               	movwf	4
  4957  0687  118A  2040         	fcall	stringdir
  4958  0689  00B0               	movwf	??_ES_PostToService
  4959  068A  04D9               	iorwf	_Ready,f
  4960                           
  4961                           ;ES_Framework.c: 324: return ((boolean) !((boolean) 0));
  4962  068B  3401               	retlw	1
  4963  068C                     __end_of_ES_PostToService:	
  4964                           ;ES_Framework.c: 326: return ((boolean) 0);
  4965                           
  4966                           ;ES_Framework.c: 325: } else
  4967                           
  4968  068C                     __ptext10:	
  4969 ;; *************** function _RunPACSystemService *****************
  4970 ;; Defined at:
  4971 ;;		line 113 in file "PACSystemService.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  ThisEvent       3    4[BANK0 ] struct ES_Event_t
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  ReturnEvent     3    8[BANK0 ] struct ES_Event_t
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  3    4[BANK0 ] struct ES_Event_t
  4978 ;; Registers used:
  4979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4985 ;;      Params:         0       3       0       0
  4986 ;;      Locals:         0       3       0       0
  4987 ;;      Temps:          0       1       0       0
  4988 ;;      Totals:         0       7       0       0
  4989 ;;Total ram usage:        7 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    5
  4992 ;; This function calls:
  4993 ;;		_ES_Timer_InitTimer
  4994 ;; This function is called by:
  4995 ;;		_ES_Run
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           
  5000                           ;psect for function _RunPACSystemService
  5001  068C                     _RunPACSystemService:	
  5002                           
  5003                           ;PACSystemService.c: 114: ES_Event ReturnEvent;
  5004                           ;PACSystemService.c: 115: ReturnEvent.EventType = ES_NO_EVENT;
  5005                           
  5006                           ;incstack = 0
  5007                           ; Regs used in _RunPACSystemService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5008  068C  1283               	bcf	3,5	;RP0=0, select bank0
  5009  068D  1303               	bcf	3,6	;RP1=0, select bank0
  5010  068E  01A8               	clrf	RunPACSystemService@ReturnEvent
  5011                           
  5012                           ;PACSystemService.c: 117: switch (ThisEvent.EventType) {
  5013  068F  2EB4               	goto	l2708
  5014  0690                     l2694:	
  5015                           ;PACSystemService.c: 118: case ES_INIT:
  5016                           
  5017                           
  5018                           ;PACSystemService.c: 119: ES_Timer_InitTimer(2, (76/2));
  5019  0690  3026               	movlw	38
  5020  0691  00A0               	movwf	ES_Timer_InitTimer@NewTime
  5021  0692  3002               	movlw	2
  5022  0693  01A1               	clrf	ES_Timer_InitTimer@NewTime+1
  5023  0694  26CA  118A         	fcall	_ES_Timer_InitTimer
  5024                           
  5025                           ;PACSystemService.c: 120: break;
  5026  0696  2EC1               	goto	l2710
  5027  0697                     l2696:	
  5028                           ;PACSystemService.c: 121: case ES_TIMEOUT:
  5029                           
  5030                           
  5031                           ;PACSystemService.c: 122: if (ThisEvent.EventParam == 2) {
  5032  0697  3002               	movlw	2
  5033  0698  1283               	bcf	3,5	;RP0=0, select bank0
  5034  0699  1303               	bcf	3,6	;RP1=0, select bank0
  5035  069A  0625               	xorwf	RunPACSystemService@ThisEvent+1,w
  5036  069B  0426               	iorwf	RunPACSystemService@ThisEvent+2,w
  5037  069C  1D03               	btfss	3,2
  5038  069D  2EC1               	goto	l2710
  5039                           
  5040                           ;PACSystemService.c: 123: PORTC ^= 0x00000008;
  5041  069E  3008               	movlw	8
  5042  069F  00A7               	movwf	??_RunPACSystemService
  5043  06A0  0687               	xorwf	7,f	;volatile
  5044                           
  5045                           ;PACSystemService.c: 124: ES_Timer_InitTimer(2, (76/2));
  5046  06A1  3026               	movlw	38
  5047  06A2  00A0               	movwf	ES_Timer_InitTimer@NewTime
  5048  06A3  3002               	movlw	2
  5049  06A4  01A1               	clrf	ES_Timer_InitTimer@NewTime+1
  5050  06A5  26CA  118A         	fcall	_ES_Timer_InitTimer
  5051                           
  5052                           ;PACSystemService.c: 125: }
  5053                           ;PACSystemService.c: 126: break;
  5054  06A7  2EC1               	goto	l2710
  5055  06A8                     l2702:	
  5056                           ;PACSystemService.c: 127: case ES_TOGGLE_LED:
  5057                           
  5058                           
  5059                           ;PACSystemService.c: 128: PORTC ^= 0x00000008;
  5060  06A8  3008               	movlw	8
  5061  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  5062  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  5063  06AB  00A7               	movwf	??_RunPACSystemService
  5064  06AC  0687               	xorwf	7,f	;volatile
  5065                           
  5066                           ;PACSystemService.c: 129: ES_Timer_InitTimer(2, (76/2));
  5067  06AD  3026               	movlw	38
  5068  06AE  00A0               	movwf	ES_Timer_InitTimer@NewTime
  5069  06AF  3002               	movlw	2
  5070  06B0  01A1               	clrf	ES_Timer_InitTimer@NewTime+1
  5071  06B1  26CA  118A         	fcall	_ES_Timer_InitTimer
  5072                           
  5073                           ;PACSystemService.c: 133: }
  5074                           
  5075                           ;PACSystemService.c: 132: break;
  5076                           
  5077                           ;PACSystemService.c: 131: default:
  5078                           
  5079                           ;PACSystemService.c: 130: break;
  5080  06B3  2EC1               	goto	l2710
  5081  06B4                     l2708:	
  5082  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  5083  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  5084  06B6  0824               	movf	RunPACSystemService@ThisEvent,w
  5085                           
  5086                           ; Switch size 1, requested type "space"
  5087                           ; Number of cases is 3, Range of values is 2 to 15
  5088                           ; switch strategies available:
  5089                           ; Name         Instructions Cycles
  5090                           ; simple_byte           10     6 (average)
  5091                           ; direct_byte           38    10 (fixed)
  5092                           ; jumptable            263     9 (fixed)
  5093                           ;	Chosen strategy is simple_byte
  5094  06B7  3A02               	xorlw	2	; case 2
  5095  06B8  1903               	skipnz
  5096  06B9  2E90               	goto	l2694
  5097  06BA  3A06               	xorlw	6	; case 4
  5098  06BB  1903               	skipnz
  5099  06BC  2E97               	goto	l2696
  5100  06BD  3A0B               	xorlw	11	; case 15
  5101  06BE  1903               	skipnz
  5102  06BF  2EA8               	goto	l2702
  5103  06C0  2EC1               	goto	l2710
  5104  06C1                     l2710:	
  5105                           
  5106                           ;PACSystemService.c: 135: return ReturnEvent;
  5107  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  5108  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  5109  06C3  0828               	movf	RunPACSystemService@ReturnEvent,w
  5110  06C4  00A4               	movwf	?_RunPACSystemService
  5111  06C5  0829               	movf	RunPACSystemService@ReturnEvent+1,w
  5112  06C6  00A5               	movwf	?_RunPACSystemService+1
  5113  06C7  082A               	movf	RunPACSystemService@ReturnEvent+2,w
  5114  06C8  00A6               	movwf	?_RunPACSystemService+2
  5115  06C9  0008               	return
  5116  06CA                     __end_of_RunPACSystemService:	
  5117  06CA                     __ptext11:	
  5118 ;; *************** function _ES_Timer_InitTimer *****************
  5119 ;; Defined at:
  5120 ;;		line 204 in file "ES_Timers.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;  Num             1    wreg     unsigned char 
  5123 ;;  NewTime         2    0[BANK0 ] unsigned int 
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;  Num             1    3[BANK0 ] unsigned char 
  5126 ;; Return value:  Size  Location     Type
  5127 ;;                  1    wreg      enum E1481
  5128 ;; Registers used:
  5129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5130 ;; Tracked objects:
  5131 ;;		On entry : 0/0
  5132 ;;		On exit  : 0/0
  5133 ;;		Unchanged: 0/0
  5134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5135 ;;      Params:         0       2       0       0
  5136 ;;      Locals:         0       1       0       0
  5137 ;;      Temps:          0       1       0       0
  5138 ;;      Totals:         0       4       0       0
  5139 ;;Total ram usage:        4 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; Hardware stack levels required when called:    4
  5142 ;; This function calls:
  5143 ;;		Nothing
  5144 ;; This function is called by:
  5145 ;;		_RunUARTRXService
  5146 ;;		_RunUARTTXService
  5147 ;;		_RunPACSystemService
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           
  5152                           ;psect for function _ES_Timer_InitTimer
  5153  06CA                     _ES_Timer_InitTimer:	
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in _ES_Timer_InitTimer: [wreg-fsr0h+status,2+status,0+pclath]
  5157                           ;ES_Timer_InitTimer@Num stored from wreg
  5158  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  5159  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  5160  06CC  00A3               	movwf	ES_Timer_InitTimer@Num
  5161                           
  5162                           ;ES_Timers.c: 207: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  5163                           ;ES_Timers.c: 209: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  5164                           ;ES_Timers.c: 211: (NewTime == 0) )
  5165  06CD  3008               	movlw	8
  5166  06CE  0223               	subwf	ES_Timer_InitTimer@Num,w
  5167  06CF  1803               	skipnc
  5168  06D0  0008               	return
  5169  06D1  0823               	movf	ES_Timer_InitTimer@Num,w
  5170  06D2  3E28               	addlw	low ((_Timer2PostFunc-__stringbase)| (0+32768))
  5171  06D3  0084               	movwf	4
  5172  06D4  118A  2040  118A   	fcall	stringdir
  5173  06D7  3A00               	xorlw	0
  5174  06D8  1903               	skipnz
  5175  06D9  0008               	return
  5176  06DA  0820               	movf	ES_Timer_InitTimer@NewTime,w
  5177  06DB  0421               	iorwf	ES_Timer_InitTimer@NewTime+1,w
  5178  06DC  1903               	btfsc	3,2
  5179  06DD  0008               	return
  5180                           
  5181                           ;ES_Timers.c: 213: TMR_TimerArray[Num] = NewTime;
  5182                           
  5183                           ;ES_Timers.c: 212: return ES_Timer_ERR;
  5184                           ;	Return value of _ES_Timer_InitTimer is never used
  5185  06DE  0823               	movf	ES_Timer_InitTimer@Num,w
  5186  06DF  00A2               	movwf	??_ES_Timer_InitTimer
  5187  06E0  0722               	addwf	??_ES_Timer_InitTimer,w
  5188  06E1  3EB4               	addlw	(low (_TMR_TimerArray| 0))& (0+255)
  5189  06E2  0084               	movwf	4
  5190  06E3  0820               	movf	ES_Timer_InitTimer@NewTime,w
  5191  06E4  1383               	bcf	3,7	;select IRP bank1
  5192  06E5  0080               	movwf	0
  5193  06E6  0A84               	incf	4,f
  5194  06E7  0821               	movf	ES_Timer_InitTimer@NewTime+1,w
  5195  06E8  0080               	movwf	0
  5196                           
  5197                           ;ES_Timers.c: 214: TMR_ActiveFlags |= BitNum2SetMask[Num];
  5198  06E9  0823               	movf	ES_Timer_InitTimer@Num,w
  5199  06EA  3E10               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  5200  06EB  0084               	movwf	4
  5201  06EC  118A  2040         	fcall	stringdir
  5202  06EE  00A2               	movwf	??_ES_Timer_InitTimer
  5203  06EF  04DB               	iorwf	_TMR_ActiveFlags,f
  5204  06F0  0008               	return
  5205  06F1                     __end_of_ES_Timer_InitTimer:	
  5206                           ;ES_Timers.c: 215: return ES_Timer_OK;
  5207                           ;	Return value of _ES_Timer_InitTimer is never used
  5208                           
  5209  06F1                     __ptext28:	
  5210 ;; *************** function _ES_EnQueueFIFO *****************
  5211 ;; Defined at:
  5212 ;;		line 83 in file "ES_Queue.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  pBlock          1    wreg     PTR struct ES_Event_t
  5215 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  5216 ;;  Event2Add       3    4[BANK0 ] struct ES_Event_t
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;  pBlock          1   11[BANK0 ] PTR struct ES_Event_t
  5219 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  5220 ;;  pThisQueue      1   12[BANK0 ] PTR struct .
  5221 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  5222 ;;  InsertionPoi    1   10[BANK0 ] unsigned char 
  5223 ;;  saveCrit        1    9[BANK0 ] unsigned char 
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      unsigned char 
  5226 ;; Registers used:
  5227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5233 ;;      Params:         0       3       0       0
  5234 ;;      Locals:         0       4       0       0
  5235 ;;      Temps:          0       2       0       0
  5236 ;;      Totals:         0       9       0       0
  5237 ;;Total ram usage:        9 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    5
  5240 ;; This function calls:
  5241 ;;		___bmul
  5242 ;; This function is called by:
  5243 ;;		_ES_PostToService
  5244 ;;		_ES_PostAll
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           
  5249                           ;psect for function _ES_EnQueueFIFO
  5250  06F1                     _ES_EnQueueFIFO:	
  5251                           
  5252                           ;incstack = 0
  5253 ;; hardware stack exceeded
  5254                           ; Regs used in _ES_EnQueueFIFO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5255                           ;ES_EnQueueFIFO@pBlock stored from wreg
  5256  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  5257  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  5258  06F3  00AB               	movwf	ES_EnQueueFIFO@pBlock
  5259                           
  5260                           ;ES_Queue.c: 85: unsigned char saveCrit;
  5261                           ;ES_Queue.c: 86: unsigned char InsertionPoint;
  5262                           ;ES_Queue.c: 87: pQueue_t pThisQueue;
  5263                           ;ES_Queue.c: 88: pThisQueue = (pQueue_t)pBlock;
  5264  06F4  00A7               	movwf	??_ES_EnQueueFIFO
  5265  06F5  00AC               	movwf	ES_EnQueueFIFO@pThisQueue
  5266                           
  5267                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  5268  06F6  0084               	movwf	4
  5269  06F7  1783               	bsf	3,7	;select IRP bank2
  5270  06F8  0800               	movf	0,w
  5271  06F9  00A7               	movwf	??_ES_EnQueueFIFO
  5272  06FA  082C               	movf	ES_EnQueueFIFO@pThisQueue,w
  5273  06FB  3E02               	addlw	2
  5274  06FC  0084               	movwf	4
  5275  06FD  0800               	movf	0,w
  5276  06FE  00A8               	movwf	??_ES_EnQueueFIFO+1
  5277  06FF  0827               	movf	??_ES_EnQueueFIFO,w
  5278  0700  0228               	subwf	??_ES_EnQueueFIFO+1,w
  5279  0701  1803               	skipnc
  5280  0702  3400               	retlw	0
  5281                           
  5282                           ;ES_Queue.c: 92: {
  5283                           ;ES_Queue.c: 93: InsertionPoint = (pThisQueue->CurrentIndex + pThisQueue->NumEntries);
  5284  0703  082C               	movf	ES_EnQueueFIFO@pThisQueue,w
  5285  0704  3E02               	addlw	2
  5286  0705  0084               	movwf	4
  5287  0706  0800               	movf	0,w
  5288  0707  00A7               	movwf	??_ES_EnQueueFIFO
  5289  0708  0A2C               	incf	ES_EnQueueFIFO@pThisQueue,w
  5290  0709  0084               	movwf	4
  5291  070A  0800               	movf	0,w
  5292  070B  0727               	addwf	??_ES_EnQueueFIFO,w
  5293  070C  00A8               	movwf	??_ES_EnQueueFIFO+1
  5294  070D  00AA               	movwf	ES_EnQueueFIFO@InsertionPoint
  5295                           
  5296                           ;ES_Queue.c: 94: if (InsertionPoint >= pThisQueue->QueueSize)
  5297  070E  082C               	movf	ES_EnQueueFIFO@pThisQueue,w
  5298  070F  0084               	movwf	4
  5299  0710  0800               	movf	0,w
  5300  0711  022A               	subwf	ES_EnQueueFIFO@InsertionPoint,w
  5301  0712  1C03               	skipc
  5302  0713  2F18               	goto	l2264
  5303                           
  5304                           ;ES_Queue.c: 95: InsertionPoint -= pThisQueue->QueueSize;
  5305  0714  082C               	movf	ES_EnQueueFIFO@pThisQueue,w
  5306  0715  0084               	movwf	4
  5307  0716  0800               	movf	0,w
  5308  0717  02AA               	subwf	ES_EnQueueFIFO@InsertionPoint,f
  5309  0718                     l2264:	
  5310                           ;ES_Queue.c: 98: do{ saveCrit = INTCON; GIE = 0;}while(0);
  5311                           
  5312  0718  080B               	movf	11,w	;volatile
  5313  0719  00A7               	movwf	??_ES_EnQueueFIFO
  5314  071A  00A9               	movwf	ES_EnQueueFIFO@saveCrit
  5315  071B  138B               	bcf	11,7	;volatile
  5316                           
  5317                           ;ES_Queue.c: 99: pBlock[ 1 + InsertionPoint] = Event2Add;
  5318  071C  3003               	movlw	3
  5319  071D  00A7               	movwf	??_ES_EnQueueFIFO
  5320  071E  00A0               	movwf	___bmul@multiplicand
  5321  071F  082A               	movf	ES_EnQueueFIFO@InsertionPoint,w
  5322  0720  3E01               	addlw	1
  5323  0721  2656               	fcall	___bmul
  5324  0722  1283               	bcf	3,5	;RP0=0, select bank0
  5325  0723  1303               	bcf	3,6	;RP1=0, select bank0
  5326  0724  072B               	addwf	ES_EnQueueFIFO@pBlock,w
  5327  0725  00A8               	movwf	??_ES_EnQueueFIFO+1
  5328  0726  0084               	movwf	4
  5329  0727  0824               	movf	ES_EnQueueFIFO@Event2Add,w
  5330  0728  1783               	bsf	3,7	;select IRP bank2
  5331  0729  0080               	movwf	0
  5332  072A  0A84               	incf	4,f
  5333  072B  0825               	movf	ES_EnQueueFIFO@Event2Add+1,w
  5334  072C  0080               	movwf	0
  5335  072D  0A84               	incf	4,f
  5336  072E  0826               	movf	ES_EnQueueFIFO@Event2Add+2,w
  5337  072F  0080               	movwf	0
  5338                           
  5339                           ;ES_Queue.c: 100: pThisQueue->NumEntries++;
  5340  0730  3001               	movlw	1
  5341  0731  00A7               	movwf	??_ES_EnQueueFIFO
  5342  0732  082C               	movf	ES_EnQueueFIFO@pThisQueue,w
  5343  0733  3E02               	addlw	2
  5344  0734  0084               	movwf	4
  5345  0735  0827               	movf	??_ES_EnQueueFIFO,w
  5346  0736  0780               	addwf	0,f
  5347                           
  5348                           ;ES_Queue.c: 101: {INTCON = saveCrit;};
  5349  0737  0829               	movf	ES_EnQueueFIFO@saveCrit,w
  5350  0738  008B               	movwf	11	;volatile
  5351                           
  5352                           ;ES_Queue.c: 103: return(((boolean) !((boolean) 0)));
  5353  0739  3401               	retlw	1
  5354  073A                     __end_of_ES_EnQueueFIFO:	
  5355                           ;ES_Queue.c: 105: return(((boolean) 0));
  5356                           
  5357                           ;ES_Queue.c: 104: }else
  5358                           
  5359  073A                     __ptext6:	
  5360 ;; *************** function _TX_clearXBeePacket *****************
  5361 ;; Defined at:
  5362 ;;		line 238 in file "UART_TX_SM.c"
  5363 ;; Parameters:    Size  Location     Type
  5364 ;;		None
  5365 ;; Auto vars:     Size  Location     Type
  5366 ;;		None
  5367 ;; Return value:  Size  Location     Type
  5368 ;;                  1    wreg      unsigned char 
  5369 ;; Registers used:
  5370 ;;		wreg, status,2, status,0
  5371 ;; Tracked objects:
  5372 ;;		On entry : 0/0
  5373 ;;		On exit  : 0/0
  5374 ;;		Unchanged: 0/0
  5375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5376 ;;      Params:         0       0       0       0
  5377 ;;      Locals:         0       0       0       0
  5378 ;;      Temps:          0       0       0       0
  5379 ;;      Totals:         0       0       0       0
  5380 ;;Total ram usage:        0 bytes
  5381 ;; Hardware stack levels used:    1
  5382 ;; Hardware stack levels required when called:    4
  5383 ;; This function calls:
  5384 ;;		Nothing
  5385 ;; This function is called by:
  5386 ;;		_RunUARTTXService
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           
  5391                           ;psect for function _TX_clearXBeePacket
  5392  073A                     _TX_clearXBeePacket:	
  5393                           
  5394                           ;UART_TX_SM.c: 239: if (currentState != TX_Idle) {
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in _TX_clearXBeePacket: [wreg+status,2+status,0]
  5398  073A  1283               	bcf	3,5	;RP0=0, select bank0
  5399  073B  1303               	bcf	3,6	;RP1=0, select bank0
  5400  073C  0B56               	decfsz	UART_TX_SM@currentState,w
  5401  073D  0008               	return
  5402                           
  5403                           ;UART_TX_SM.c: 242: length = 0;
  5404                           
  5405                           ;UART_TX_SM.c: 241: } else {
  5406                           
  5407                           ;UART_TX_SM.c: 240: return ((boolean) 0);
  5408                           ;	Return value of _TX_clearXBeePacket is never used
  5409  073E  01E2               	clrf	_length
  5410                           
  5411                           ;UART_TX_SM.c: 243: return ((boolean) !((boolean) 0));
  5412                           ;	Return value of _TX_clearXBeePacket is never used
  5413  073F  0008               	return
  5414  0740                     __end_of_TX_clearXBeePacket:	
  5415  0740                     __ptext5:	
  5416 ;; *************** function _TX_getChecksum *****************
  5417 ;; Defined at:
  5418 ;;		line 256 in file "UART_TX_SM.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;		None
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;  i               1    2[BANK0 ] unsigned char 
  5423 ;;  chk             1    1[BANK0 ] unsigned char 
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      unsigned char 
  5426 ;; Registers used:
  5427 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5433 ;;      Params:         0       0       0       0
  5434 ;;      Locals:         0       2       0       0
  5435 ;;      Temps:          0       1       0       0
  5436 ;;      Totals:         0       3       0       0
  5437 ;;Total ram usage:        3 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    4
  5440 ;; This function calls:
  5441 ;;		Nothing
  5442 ;; This function is called by:
  5443 ;;		_RunUARTTXService
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           
  5448                           ;psect for function _TX_getChecksum
  5449  0740                     _TX_getChecksum:	
  5450                           
  5451                           ;UART_TX_SM.c: 257: uint8_t chk = 0;
  5452                           
  5453                           ;incstack = 0
  5454                           ; Regs used in _TX_getChecksum: [wreg-fsr0h+status,2+status,0]
  5455  0740  1283               	bcf	3,5	;RP0=0, select bank0
  5456  0741  3003               	movlw	3
  5457  0742  1303               	bcf	3,6	;RP1=0, select bank0
  5458  0743  01A1               	clrf	TX_getChecksum@chk
  5459                           
  5460                           ;UART_TX_SM.c: 258: uint8_t i;
  5461                           ;UART_TX_SM.c: 260: for (i = 3; i < length; i++) {
  5462  0744  00A0               	movwf	??_TX_getChecksum
  5463  0745  00A2               	movwf	TX_getChecksum@i
  5464  0746                     l2370:	
  5465  0746  0862               	movf	_length,w
  5466  0747  0222               	subwf	TX_getChecksum@i,w
  5467  0748  1803               	btfsc	3,0
  5468  0749  2F55               	goto	l2372
  5469                           
  5470                           ;UART_TX_SM.c: 261: chk += XBeePacket[i];
  5471  074A  0822               	movf	TX_getChecksum@i,w
  5472  074B  3EC4               	addlw	(low (_XBeePacket| 0))& (0+255)
  5473  074C  0084               	movwf	4
  5474  074D  1383               	bcf	3,7	;select IRP bank1
  5475  074E  0800               	movf	0,w
  5476  074F  00A0               	movwf	??_TX_getChecksum
  5477  0750  07A1               	addwf	TX_getChecksum@chk,f
  5478  0751  3001               	movlw	1
  5479  0752  00A0               	movwf	??_TX_getChecksum
  5480  0753  07A2               	addwf	TX_getChecksum@i,f
  5481  0754  2F46               	goto	l2370
  5482  0755                     l2372:	
  5483                           
  5484                           ;UART_TX_SM.c: 262: }
  5485                           ;UART_TX_SM.c: 264: return 0xFF - chk;
  5486  0755  0321               	decf	TX_getChecksum@chk,w
  5487  0756  3AFF               	xorlw	255
  5488  0757  3EFF               	addlw	255
  5489  0758  0008               	return
  5490  0759                     __end_of_TX_getChecksum:	
  5491                           
  5492                           	psect	text22
  5493  0759                     __ptext22:	
  5494 ;; *************** function _ES_Initialize *****************
  5495 ;; Defined at:
  5496 ;;		line 189 in file "ES_Framework.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  NewRate         1    wreg     enum E93
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  NewRate         1    0[COMMON] enum E93
  5501 ;;  i               1   25[BANK0 ] unsigned char 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      enum E1594
  5504 ;; Registers used:
  5505 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5511 ;;      Params:         0       0       0       0
  5512 ;;      Locals:         0       1       0       0
  5513 ;;      Temps:          0       2       0       0
  5514 ;;      Totals:         0       3       0       0
  5515 ;;Total ram usage:        3 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    8
  5518 ;; This function calls:
  5519 ;;		_ES_InitQueue
  5520 ;;		_ES_Sys_Timer_Init
  5521 ;;		_InitPACSystemService
  5522 ;;		_InitSPIService
  5523 ;;		_InitUARTRXService
  5524 ;;		_InitUARTTXService
  5525 ;; This function is called by:
  5526 ;;		_main
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           
  5531                           ;psect for function _ES_Initialize
  5532  0759                     _ES_Initialize:	
  5533                           
  5534                           ;ES_Framework.c: 190: unsigned char i;
  5535                           ;ES_Framework.c: 191: ES_Sys_Timer_Init();
  5536                           
  5537                           ;incstack = 0
  5538 ;; hardware stack exceeded
  5539                           ; Regs used in _ES_Initialize: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5540  0759  27B8  118A         	fcall	_ES_Sys_Timer_Init
  5541                           
  5542                           ;ES_Framework.c: 193: for (i = 0; i < (sizeof(ServDescList)/sizeof(ServDescList[0])); i+
      +                          +) {
  5543  075B  1283               	bcf	3,5	;RP0=0, select bank0
  5544  075C  3004               	movlw	4
  5545  075D  1303               	bcf	3,6	;RP1=0, select bank0
  5546  075E  01B9               	clrf	ES_Initialize@i
  5547  075F                     L8:	
  5548  075F  0239               	subwf	ES_Initialize@i,w
  5549  0760  1803               	btfsc	3,0
  5550  0761  3400               	retlw	0
  5551                           
  5552                           ;ES_Framework.c: 194: if ((ServDescList[i].InitFunc == (pInitFunc) 0) ||
  5553                           ;ES_Framework.c: 195: (ServDescList[i].RunFunc == (pRunFunc) 0))
  5554  0762  0839               	movf	ES_Initialize@i,w
  5555  0763  00B7               	movwf	??_ES_Initialize
  5556  0764  0737               	addwf	??_ES_Initialize,w
  5557  0765  3E20               	addlw	low ((_ServDescList-__stringbase)| (0+32768))
  5558  0766  0084               	movwf	4
  5559  0767  118A  2040  118A   	fcall	stringdir
  5560  076A  3A00               	xorlw	0
  5561  076B  1903               	skipnz
  5562  076C  3403               	retlw	3
  5563  076D  1403               	setc
  5564  076E  0D39               	rlf	ES_Initialize@i,w
  5565  076F  3E20               	addlw	low ((_ServDescList-__stringbase)| (0+32768))
  5566  0770  0084               	movwf	4
  5567  0771  118A  2040  118A   	fcall	stringdir
  5568  0774  3A00               	xorlw	0
  5569  0775  1903               	btfsc	3,2
  5570                           
  5571                           ;ES_Framework.c: 196: return FailedPointer;
  5572  0776  3403               	retlw	3
  5573                           
  5574                           ;ES_Framework.c: 198: ES_InitQueue(EventQueues[i].pMem, EventQueues[i].Size);
  5575  0777  1403               	setc
  5576  0778  0D39               	rlf	ES_Initialize@i,w
  5577  0779  3E18               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  5578  077A  0084               	movwf	4
  5579  077B  118A  2040  118A   	fcall	stringdir
  5580  077E  00B7               	movwf	??_ES_Initialize
  5581  077F  00A0               	movwf	ES_InitQueue@BlockSize
  5582  0780  0839               	movf	ES_Initialize@i,w
  5583  0781  00B8               	movwf	??_ES_Initialize+1
  5584  0782  0738               	addwf	??_ES_Initialize+1,w
  5585  0783  3E18               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  5586  0784  0084               	movwf	4
  5587  0785  118A  2040  118A   	fcall	stringdir
  5588  0788  27A3               	fcall	_ES_InitQueue
  5589                           
  5590                           ;ES_Framework.c: 200: if (ServDescList[i].InitFunc(i) != ((boolean) !((boolean) 0)))
  5591  0789  1283               	bcf	3,5	;RP0=0, select bank0
  5592  078A  1303               	bcf	3,6	;RP1=0, select bank0
  5593  078B  0839               	movf	ES_Initialize@i,w
  5594  078C  00B7               	movwf	??_ES_Initialize
  5595  078D  00B2               	movwf	InitPACSystemService@Priority
  5596  078E  0839               	movf	ES_Initialize@i,w
  5597  078F  00B8               	movwf	??_ES_Initialize+1
  5598  0790  0738               	addwf	??_ES_Initialize+1,w
  5599  0791  3E20               	addlw	low ((_ServDescList-__stringbase)| (0+32768))
  5600  0792  0084               	movwf	4
  5601  0793  118A  2040  118A   	fcall	stringdir
  5602  0796  118A  2100  118A   	fcall	fptable
  5603  0799  3A01               	xorlw	1
  5604  079A  1D03               	btfss	3,2
  5605                           
  5606                           ;ES_Framework.c: 201: return FailedInit;
  5607  079B  3405               	retlw	5
  5608  079C  3001               	movlw	1
  5609  079D  1283               	bcf	3,5	;RP0=0, select bank0
  5610  079E  1303               	bcf	3,6	;RP1=0, select bank0
  5611  079F  00B7               	movwf	??_ES_Initialize
  5612  07A0  07B9               	addwf	ES_Initialize@i,f
  5613  07A1  3004               	movlw	4
  5614  07A2  2F5F               	goto	L8
  5615  07A3                     __end_of_ES_Initialize:	
  5616                           ;ES_Framework.c: 202: }
  5617                           ;ES_Framework.c: 203: return Success;
  5618                           
  5619  07A3                     __ptext31:	
  5620 ;; *************** function _ES_InitQueue *****************
  5621 ;; Defined at:
  5622 ;;		line 56 in file "ES_Queue.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;  pBlock          1    wreg     PTR struct ES_Event_t
  5625 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  5626 ;;  BlockSize       1    0[BANK0 ] unsigned char 
  5627 ;; Auto vars:     Size  Location     Type
  5628 ;;  pBlock          1    2[BANK0 ] PTR struct ES_Event_t
  5629 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  5630 ;;  pThisQueue      1    3[BANK0 ] PTR struct .
  5631 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  1    wreg      unsigned char 
  5634 ;; Registers used:
  5635 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5641 ;;      Params:         0       1       0       0
  5642 ;;      Locals:         0       2       0       0
  5643 ;;      Temps:          0       1       0       0
  5644 ;;      Totals:         0       4       0       0
  5645 ;;Total ram usage:        4 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; Hardware stack levels required when called:    4
  5648 ;; This function calls:
  5649 ;;		Nothing
  5650 ;; This function is called by:
  5651 ;;		_ES_Initialize
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           
  5656                           ;psect for function _ES_InitQueue
  5657  07A3                     _ES_InitQueue:	
  5658                           
  5659                           ;incstack = 0
  5660                           ; Regs used in _ES_InitQueue: [wreg-fsr0h+status,2+status,0]
  5661                           ;ES_InitQueue@pBlock stored from wreg
  5662  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  5663  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  5664  07A5  00A2               	movwf	ES_InitQueue@pBlock
  5665                           
  5666                           ;ES_Queue.c: 58: pQueue_t pThisQueue;
  5667                           ;ES_Queue.c: 60: pThisQueue = (pQueue_t)pBlock;
  5668  07A6  00A1               	movwf	??_ES_InitQueue
  5669  07A7  00A3               	movwf	ES_InitQueue@pThisQueue
  5670                           
  5671                           ;ES_Queue.c: 62: pThisQueue->QueueSize = BlockSize - 1;
  5672  07A8  0820               	movf	ES_InitQueue@BlockSize,w
  5673  07A9  3EFF               	addlw	255
  5674  07AA  00A1               	movwf	??_ES_InitQueue
  5675  07AB  0823               	movf	ES_InitQueue@pThisQueue,w
  5676  07AC  0084               	movwf	4
  5677  07AD  0821               	movf	??_ES_InitQueue,w
  5678  07AE  1783               	bsf	3,7	;select IRP bank2
  5679  07AF  0080               	movwf	0
  5680                           
  5681                           ;ES_Queue.c: 63: pThisQueue->CurrentIndex = 0;
  5682  07B0  0A23               	incf	ES_InitQueue@pThisQueue,w
  5683  07B1  0084               	movwf	4
  5684  07B2  0180               	clrf	0
  5685                           
  5686                           ;ES_Queue.c: 64: pThisQueue->NumEntries = 0;
  5687  07B3  0823               	movf	ES_InitQueue@pThisQueue,w
  5688  07B4  3E02               	addlw	2
  5689  07B5  0084               	movwf	4
  5690  07B6  0180               	clrf	0
  5691  07B7  0008               	return
  5692  07B8                     __end_of_ES_InitQueue:	
  5693                           ;ES_Queue.c: 65: return(pThisQueue->QueueSize);
  5694                           ;	Return value of _ES_InitQueue is never used
  5695                           
  5696  07B8                     __ptext30:	
  5697 ;; *************** function _ES_Sys_Timer_Init *****************
  5698 ;; Defined at:
  5699 ;;		line 25 in file "ES_Port.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;		None
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;		None
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  1    wreg      void 
  5706 ;; Registers used:
  5707 ;;		status,2
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5713 ;;      Params:         0       0       0       0
  5714 ;;      Locals:         0       0       0       0
  5715 ;;      Temps:          0       0       0       0
  5716 ;;      Totals:         0       0       0       0
  5717 ;;Total ram usage:        0 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    4
  5720 ;; This function calls:
  5721 ;;		Nothing
  5722 ;; This function is called by:
  5723 ;;		_ES_Initialize
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           
  5728                           ;psect for function _ES_Sys_Timer_Init
  5729  07B8                     _ES_Sys_Timer_Init:	
  5730                           
  5731                           ;ES_Port.c: 29: TRISC0 = 0;
  5732                           
  5733                           ;incstack = 0
  5734                           ; Regs used in _ES_Sys_Timer_Init: [status,2]
  5735  07B8  1683               	bsf	3,5	;RP0=1, select bank1
  5736  07B9  1303               	bcf	3,6	;RP1=0, select bank1
  5737  07BA  1007               	bcf	7,0	;volatile
  5738                           
  5739                           ;ES_Port.c: 30: ANS4 = 0;
  5740  07BB  1283               	bcf	3,5	;RP0=0, select bank2
  5741  07BC  1703               	bsf	3,6	;RP1=1, select bank2
  5742  07BD  121E               	bcf	30,4	;volatile
  5743                           
  5744                           ;ES_Port.c: 31: RC0 = 0;
  5745  07BE  1283               	bcf	3,5	;RP0=0, select bank0
  5746  07BF  1303               	bcf	3,6	;RP1=0, select bank0
  5747  07C0  1007               	bcf	7,0	;volatile
  5748                           
  5749                           ;ES_Port.c: 34: TRISC7 = 0;
  5750  07C1  1683               	bsf	3,5	;RP0=1, select bank1
  5751  07C2  1303               	bcf	3,6	;RP1=0, select bank1
  5752  07C3  1387               	bcf	7,7	;volatile
  5753                           
  5754                           ;ES_Port.c: 35: ANS9 = 0;
  5755  07C4  1283               	bcf	3,5	;RP0=0, select bank2
  5756  07C5  1703               	bsf	3,6	;RP1=1, select bank2
  5757  07C6  109F               	bcf	31,1	;volatile
  5758                           
  5759                           ;ES_Port.c: 36: RC7 = 0;
  5760  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  5761  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  5762  07C9  1387               	bcf	7,7	;volatile
  5763                           
  5764                           ;ES_Port.c: 39: {GIE = 0;};
  5765  07CA  138B               	bcf	11,7	;volatile
  5766                           
  5767                           ;ES_Port.c: 41: T0CS = 0;
  5768  07CB  1683               	bsf	3,5	;RP0=1, select bank1
  5769  07CC  1303               	bcf	3,6	;RP1=0, select bank1
  5770  07CD  1281               	bcf	1,5	;volatile
  5771                           
  5772                           ;ES_Port.c: 42: PSA = 0;
  5773  07CE  1181               	bcf	1,3	;volatile
  5774                           
  5775                           ;ES_Port.c: 43: PS0 = 0;
  5776  07CF  1001               	bcf	1,0	;volatile
  5777                           
  5778                           ;ES_Port.c: 44: PS1 = 0;
  5779  07D0  1081               	bcf	1,1	;volatile
  5780                           
  5781                           ;ES_Port.c: 45: PS2 = 1;
  5782  07D1  1501               	bsf	1,2	;volatile
  5783                           
  5784                           ;ES_Port.c: 47: TMR0 = 0;
  5785  07D2  1283               	bcf	3,5	;RP0=0, select bank0
  5786  07D3  1303               	bcf	3,6	;RP1=0, select bank0
  5787  07D4  0181               	clrf	1	;volatile
  5788                           
  5789                           ;ES_Port.c: 48: T0IF = 0;
  5790  07D5  110B               	bcf	11,2	;volatile
  5791                           
  5792                           ;ES_Port.c: 49: T0IE = 1;
  5793  07D6  168B               	bsf	11,5	;volatile
  5794                           
  5795                           ;ES_Port.c: 51: {GIE = 1;};
  5796  07D7  178B               	bsf	11,7	;volatile
  5797  07D8  0008               	return
  5798  07D9                     __end_of_ES_Sys_Timer_Init:	
  5799                           
  5800                           	psect	text32
  5801  0E77                     __ptext32:	
  5802 ;; *************** function _ISR *****************
  5803 ;; Defined at:
  5804 ;;		line 54 in file "ES_Port.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;		None
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;		None
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  1    wreg      void 
  5811 ;; Registers used:
  5812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5813 ;; Tracked objects:
  5814 ;;		On entry : 0/0
  5815 ;;		On exit  : 0/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5818 ;;      Params:         0       0       0       0
  5819 ;;      Locals:         0       0       0       0
  5820 ;;      Temps:          5       0       0       0
  5821 ;;      Totals:         5       0       0       0
  5822 ;;Total ram usage:        5 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; Hardware stack levels required when called:    3
  5825 ;; This function calls:
  5826 ;;		_SPIIntResponse
  5827 ;;		_UARTRXIntResponse
  5828 ;;		_UARTTXIntResponse
  5829 ;; This function is called by:
  5830 ;;		Interrupt level 1
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           
  5835                           ;psect for function _ISR
  5836  0E77                     _ISR:	
  5837                           
  5838                           ;ES_Port.c: 55: RC7 = 1;
  5839  0E77  1787               	bsf	7,7	;volatile
  5840                           
  5841                           ;ES_Port.c: 57: if (T0IF) {
  5842  0E78  1D0B               	btfss	11,2	;volatile
  5843  0E79  2E7F               	goto	i1l3148
  5844                           
  5845                           ;ES_Port.c: 58: T0IF = 0;
  5846  0E7A  110B               	bcf	11,2	;volatile
  5847                           
  5848                           ;ES_Port.c: 59: TickCount++;
  5849  0E7B  3001               	movlw	1
  5850  0E7C  00F8               	movwf	??_ISR
  5851  0E7D  07DC               	addwf	_TickCount,f
  5852                           
  5853                           ;ES_Port.c: 60: PORTC ^= 0x00000001;
  5854  0E7E  0687               	xorwf	7,f	;volatile
  5855  0E7F                     i1l3148:	
  5856                           
  5857                           ;ES_Port.c: 61: }
  5858                           ;ES_Port.c: 63: if (SSPIF) {
  5859  0E7F  1D8C               	btfss	12,3	;volatile
  5860  0E80  2F31               	goto	i1l3152
  5861                           
  5862                           ;psect for function _SPIIntResponse
  5863                           
  5864                           ;ES_Port.c: 64: SPIIntResponse();
  5865  0E81                     i3L_SPIIntResponse:	
  5866  0E81                     i3Li1l2952:	
  5867                           
  5868                           ;SPI_SM.c: 180: unsigned char readByte;
  5869                           ;SPI_SM.c: 182: if (BF == 1) {
  5870  0E81  1683               	bsf	3,5	;RP0=1, select bank1
  5871  0E82  1303               	bcf	3,6	;RP1=0, select bank1
  5872  0E83  1C14               	btfss	20,0	;volatile
  5873  0E84  2F31               	ljmp	i1l3152
  5874  0E85  2E87               	ljmp	i3Li1l2954
  5875  0E86                     i3Lu183_21:	
  5876  0E86  2F31               	ljmp	i1l3152
  5877  0E87                     i3Lu183_20:	
  5878  0E87                     i3Li1l2954:	
  5879                           
  5880                           ;SPI_SM.c: 183: readByte = SSPBUF;
  5881  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  5882  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  5883  0E89  0813               	movf	19,w	;volatile
  5884  0E8A  00F5               	movwf	??_SPIIntResponse
  5885  0E8B  00F6               	movwf	SPIIntResponse@readByte
  5886  0E8C  2F1F               	ljmp	i3Li1l3016
  5887  0E8D                     i3Li1l687:	
  5888  0E8D                     i3Li1l2956:	
  5889                           
  5890                           ;SPI_SM.c: 188: SSPBUF = 0xFF;
  5891  0E8D  30FF               	movlw	255
  5892  0E8E  0093               	movwf	19	;volatile
  5893  0E8F                     i3Li1l2958:	
  5894                           
  5895                           ;SPI_SM.c: 189: if (!radioPing) {
  5896  0E8F  0865               	movf	_radioPing,w
  5897  0E90  1D03               	btfss	3,2
  5898  0E91  2E9F               	ljmp	i3Li1l2962
  5899  0E92  2E94               	ljmp	i3Li1l2960
  5900  0E93                     i3Lu184_21:	
  5901  0E93  2E9F               	ljmp	i3Li1l2962
  5902  0E94                     i3Lu184_20:	
  5903  0E94                     i3Li1l2960:	
  5904                           
  5905                           ;SPI_SM.c: 191: responseBytes[0] = 0xFF;
  5906  0E94  30FF               	movlw	255
  5907  0E95  00F5               	movwf	??_SPIIntResponse
  5908  0E96  00ED               	movwf	_responseBytes
  5909                           
  5910                           ;SPI_SM.c: 192: responseBytes[1] = 0xFF;
  5911  0E97  00F5               	movwf	??_SPIIntResponse
  5912  0E98  00EE               	movwf	_responseBytes+1
  5913                           
  5914                           ;SPI_SM.c: 193: responseBytes[2] = 0xFF;
  5915  0E99  00F5               	movwf	??_SPIIntResponse
  5916  0E9A  00EF               	movwf	_responseBytes+2
  5917                           
  5918                           ;SPI_SM.c: 194: SPIBuffer = &responseBytes;
  5919  0E9B  306D               	movlw	(low (_responseBytes| 0))& (0+255)
  5920  0E9C  00F5               	movwf	??_SPIIntResponse
  5921  0E9D  00DA               	movwf	_SPIBuffer
  5922  0E9E  2EFD               	ljmp	i3Li1l2998
  5923  0E9F                     i3Li1l688:	
  5924  0E9F                     i3Li1l2962:	
  5925  0E9F  30C0               	movlw	192
  5926  0EA0  0576               	andwf	SPIIntResponse@readByte,w
  5927  0EA1  00F5               	movwf	??_SPIIntResponse
  5928  0EA2  3AC0               	xorlw	192
  5929  0EA3  1D03               	btfss	3,2
  5930  0EA4  2EAE               	ljmp	i3Li1l2966
  5931  0EA5  2EA7               	ljmp	i3Li1l2964
  5932  0EA6                     i3Lu185_21:	
  5933  0EA6  2EAE               	ljmp	i3Li1l2966
  5934  0EA7                     i3Lu185_20:	
  5935  0EA7                     i3Li1l2964:	
  5936                           
  5937                           ;SPI_SM.c: 198: SPIBuffer = RX_getStatusBuffer();
  5938  0EA7  27F7  158A         	fcall	_RX_getStatusBuffer
  5939  0EA9  00F5               	movwf	??_SPIIntResponse
  5940  0EAA  1283               	bcf	3,5	;RP0=0, select bank0
  5941  0EAB  1303               	bcf	3,6	;RP1=0, select bank0
  5942  0EAC  00DA               	movwf	_SPIBuffer
  5943  0EAD  2EFD               	ljmp	i3Li1l2998
  5944  0EAE                     i3Li1l690:	
  5945  0EAE                     i3Li1l2966:	
  5946  0EAE  30C0               	movlw	192
  5947  0EAF  0576               	andwf	SPIIntResponse@readByte,w
  5948  0EB0  00F5               	movwf	??_SPIIntResponse
  5949  0EB1  3A80               	xorlw	128
  5950  0EB2  1D03               	btfss	3,2
  5951  0EB3  2ECB               	ljmp	i3Li1l2982
  5952  0EB4  2EB6               	ljmp	i3Li1l2968
  5953  0EB5                     i3Lu186_21:	
  5954  0EB5  2ECB               	ljmp	i3Li1l2982
  5955  0EB6                     i3Lu186_20:	
  5956  0EB6                     i3Li1l2968:	
  5957                           
  5958                           ;SPI_SM.c: 209: if (!commOpen) {
  5959  0EB6  085E               	movf	_commOpen,w
  5960  0EB7  1D03               	btfss	3,2
  5961  0EB8  2EC4               	ljmp	i3Li1l2976
  5962  0EB9  2EBB               	ljmp	i3Li1l2970
  5963  0EBA                     i3Lu187_21:	
  5964  0EBA  2EC4               	ljmp	i3Li1l2976
  5965  0EBB                     i3Lu187_20:	
  5966  0EBB                     i3Li1l2970:	
  5967                           
  5968                           ;SPI_SM.c: 211: colorRequestData = readByte & ~(0x00000080 | 0x00000040);
  5969  0EBB  0876               	movf	SPIIntResponse@readByte,w
  5970  0EBC  393F               	andlw	63
  5971  0EBD  00F5               	movwf	??_SPIIntResponse
  5972  0EBE  00DD               	movwf	_colorRequestData
  5973  0EBF                     i3Li1l2972:	
  5974                           
  5975                           ;SPI_SM.c: 212: newRequest = ((boolean) !((boolean) 0));
  5976  0EBF  01E3               	clrf	_newRequest
  5977  0EC0  0AE3               	incf	_newRequest,f
  5978  0EC1                     i3Li1l2974:	
  5979                           
  5980                           ;SPI_SM.c: 213: commOpen = ((boolean) !((boolean) 0));
  5981  0EC1  01DE               	clrf	_commOpen
  5982  0EC2  0ADE               	incf	_commOpen,f
  5983  0EC3  2EC4               	ljmp	i3Li1l2976
  5984  0EC4                     i3Li1l693:	
  5985  0EC4                     i3Li1l2976:	
  5986                           
  5987                           ;SPI_SM.c: 214: }
  5988                           ;SPI_SM.c: 215: responseBytes[0] = 0x00;
  5989  0EC4  01ED               	clrf	_responseBytes
  5990  0EC5                     i3Li1l2978:	
  5991                           
  5992                           ;SPI_SM.c: 216: responseBytes[1] = 0x00;
  5993  0EC5  01EE               	clrf	_responseBytes+1
  5994  0EC6                     i3Li1l2980:	
  5995  0EC6  306D               	movlw	(low (_responseBytes| 0))& (0+255)
  5996                           
  5997                           ;SPI_SM.c: 217: responseBytes[2] = 0x00;
  5998  0EC7  01EF               	clrf	_responseBytes+2
  5999                           
  6000                           ;SPI_SM.c: 218: SPIBuffer = &responseBytes;
  6001  0EC8  00F5               	movwf	??_SPIIntResponse
  6002  0EC9  00DA               	movwf	_SPIBuffer
  6003  0ECA  2EFD               	ljmp	i3Li1l2998
  6004  0ECB                     i3Li1l692:	
  6005  0ECB                     i3Li1l2982:	
  6006  0ECB  30C0               	movlw	192
  6007  0ECC  0576               	andwf	SPIIntResponse@readByte,w
  6008  0ECD  00F5               	movwf	??_SPIIntResponse
  6009  0ECE  3A40               	xorlw	64
  6010  0ECF  1D03               	btfss	3,2
  6011  0ED0  2EF2               	ljmp	i3Li1l2996
  6012  0ED1  2ED3               	ljmp	i6L__ptext36
  6013  0ED2                     i3Lu188_21:	
  6014  0ED2  2EF2               	ljmp	i3Li1l2996
  6015  0ED3                     i3Lu188_20:	
  6016  0ED3                     i3Li1l2984:	
  6017  0ED3                     i6L__ptext36:	
  6018                           ;SPI_SM.c: 233: if (RX_newResponseReady()) {
  6019                           
  6020                           
  6021                           ;psect for function _RX_newResponseReady
  6022  0ED3                     i6L_RX_newResponseReady:	
  6023  0ED3                     i6Li1l2794:	
  6024                           
  6025                           ;UART_RX_SM.c: 273: return newResponseAvailable;
  6026  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  6027  0ED4  1303               	bcf	3,6	;RP1=0, select bank0
  6028  0ED5  0864               	movf	_newResponseAvailable,w
  6029  0ED6  2ED7               	ljmp	iL174
  6030  0ED7                     i6Li1l2796:	
  6031  0ED7                     i6Li1l445:	
  6032  0ED7                     iL174:	
  6033  0ED7  3A00               	xorlw	0
  6034  0ED8  1903               	btfsc	3,2
  6035  0ED9  2EE9               	ljmp	i3Li1l2992
  6036  0EDA  2EDC               	ljmp	i3Li1l2986
  6037  0EDB                     i3Lu189_21:	
  6038  0EDB  2EE9               	ljmp	i3Li1l2992
  6039  0EDC                     i3Lu189_20:	
  6040  0EDC                     i3Li1l2986:	
  6041                           
  6042                           ;SPI_SM.c: 234: SPIBuffer = RX_getResponseBuffer();
  6043  0EDC  27EE  158A         	fcall	_RX_getResponseBuffer
  6044  0EDE  00F5               	movwf	??_SPIIntResponse
  6045  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  6046  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
  6047  0EE1  00DA               	movwf	_SPIBuffer
  6048  0EE2                     i3Li1l2988:	
  6049  0EE2                     i7L__ptext40:	
  6050                           ;SPI_SM.c: 235: RX_clearResponseReady();
  6051                           
  6052                           
  6053                           ;psect for function _RX_clearResponseReady
  6054  0EE2                     i7L_RX_clearResponseReady:	
  6055  0EE2                     i7Li1l2798:	
  6056                           
  6057                           ;UART_RX_SM.c: 277: newResponseAvailable = ((boolean) 0);
  6058  0EE2  1283               	bcf	3,5	;RP0=0, select bank0
  6059  0EE3  1303               	bcf	3,6	;RP1=0, select bank0
  6060  0EE4  01E4               	clrf	_newResponseAvailable
  6061  0EE5                     i7Li1l448:	
  6062  0EE5                     i3Li1l2990:	
  6063                           
  6064                           ;SPI_SM.c: 236: commOpen = ((boolean) 0);
  6065  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  6066  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  6067  0EE7  01DE               	clrf	_commOpen
  6068  0EE8  2EFD               	ljmp	i3Li1l2998
  6069  0EE9                     i3Li1l696:	
  6070  0EE9                     i3Li1l2992:	
  6071                           
  6072                           ;SPI_SM.c: 238: responseBytes[0] = 0x00;
  6073  0EE9  1283               	bcf	3,5	;RP0=0, select bank0
  6074  0EEA  1303               	bcf	3,6	;RP1=0, select bank0
  6075  0EEB  01ED               	clrf	_responseBytes
  6076                           
  6077                           ;SPI_SM.c: 239: responseBytes[1] = 0x00;
  6078  0EEC  01EE               	clrf	_responseBytes+1
  6079                           
  6080                           ;SPI_SM.c: 240: responseBytes[2] = 0x00;
  6081  0EED  01EF               	clrf	_responseBytes+2
  6082  0EEE                     i3Li1l2994:	
  6083                           
  6084                           ;SPI_SM.c: 241: SPIBuffer = &responseBytes;
  6085  0EEE  306D               	movlw	(low (_responseBytes| 0))& (0+255)
  6086  0EEF  00F5               	movwf	??_SPIIntResponse
  6087  0EF0  00DA               	movwf	_SPIBuffer
  6088  0EF1                     i3Li1l697:	
  6089  0EF1  2EFD               	ljmp	i3Li1l2998
  6090  0EF2                     i3Li1l695:	
  6091  0EF2                     i3Li1l2996:	
  6092                           
  6093                           ;SPI_SM.c: 252: responseBytes[0] = 0xFF;
  6094  0EF2  30FF               	movlw	255
  6095  0EF3  00F5               	movwf	??_SPIIntResponse
  6096  0EF4  00ED               	movwf	_responseBytes
  6097                           
  6098                           ;SPI_SM.c: 253: responseBytes[1] = 0xFF;
  6099  0EF5  00F5               	movwf	??_SPIIntResponse
  6100  0EF6  00EE               	movwf	_responseBytes+1
  6101                           
  6102                           ;SPI_SM.c: 254: responseBytes[2] = 0xFF;
  6103  0EF7  00F5               	movwf	??_SPIIntResponse
  6104  0EF8  00EF               	movwf	_responseBytes+2
  6105                           
  6106                           ;SPI_SM.c: 255: SPIBuffer = &responseBytes;
  6107  0EF9  306D               	movlw	(low (_responseBytes| 0))& (0+255)
  6108  0EFA  00F5               	movwf	??_SPIIntResponse
  6109  0EFB  00DA               	movwf	_SPIBuffer
  6110  0EFC                     i3Li1l698:	
  6111  0EFC                     i3Li1l694:	
  6112  0EFC                     i3Li1l691:	
  6113  0EFC  2EFD               	ljmp	i3Li1l2998
  6114  0EFD                     i3Li1l689:	
  6115  0EFD                     i3Li1l2998:	
  6116                           
  6117                           ;SPI_SM.c: 257: }
  6118                           ;SPI_SM.c: 258: currentState = Waiting4Dummy1;
  6119  0EFD  01D2               	clrf	SPI_SM@currentState
  6120  0EFE  0AD2               	incf	SPI_SM@currentState,f
  6121  0EFF  2F2F               	ljmp	i3Li1l699
  6122  0F00                     i3Li1l700:	
  6123  0F00                     i3Li1l3000:	
  6124                           
  6125                           ;SPI_SM.c: 261: SSPBUF = SPIBuffer[0];
  6126  0F00  085A               	movf	_SPIBuffer,w
  6127  0F01  0084               	movwf	4
  6128  0F02  1383               	bcf	3,7	;select IRP bank0
  6129  0F03  0800               	movf	0,w
  6130  0F04  0093               	movwf	19	;volatile
  6131  0F05                     i3Li1l3002:	
  6132                           
  6133                           ;SPI_SM.c: 262: currentState = Waiting4Dummy2;
  6134  0F05  3002               	movlw	2
  6135  0F06  00F5               	movwf	??_SPIIntResponse
  6136  0F07  00D2               	movwf	SPI_SM@currentState
  6137  0F08  2F2F               	ljmp	i3Li1l699
  6138  0F09                     i3Li1l701:	
  6139  0F09                     i3Li1l3004:	
  6140                           
  6141                           ;SPI_SM.c: 265: SSPBUF = SPIBuffer[1];
  6142  0F09  0A5A               	incf	_SPIBuffer,w
  6143  0F0A  0084               	movwf	4
  6144  0F0B  1383               	bcf	3,7	;select IRP bank0
  6145  0F0C  0800               	movf	0,w
  6146  0F0D  0093               	movwf	19	;volatile
  6147  0F0E                     i3Li1l3006:	
  6148                           
  6149                           ;SPI_SM.c: 266: currentState = Waiting4Dummy3;
  6150  0F0E  3003               	movlw	3
  6151  0F0F  00F5               	movwf	??_SPIIntResponse
  6152  0F10  00D2               	movwf	SPI_SM@currentState
  6153  0F11  2F2F               	ljmp	i3Li1l699
  6154  0F12                     i3Li1l702:	
  6155  0F12                     i3Li1l3008:	
  6156                           
  6157                           ;SPI_SM.c: 269: SSPBUF = SPIBuffer[2];
  6158  0F12  085A               	movf	_SPIBuffer,w
  6159  0F13  3E02               	addlw	2
  6160  0F14  0084               	movwf	4
  6161  0F15  1383               	bcf	3,7	;select IRP bank0
  6162  0F16  0800               	movf	0,w
  6163  0F17  0093               	movwf	19	;volatile
  6164  0F18                     i3Li1l3010:	
  6165                           
  6166                           ;SPI_SM.c: 270: currentState = Waiting4Dummy4;
  6167  0F18  3004               	movlw	4
  6168  0F19  00F5               	movwf	??_SPIIntResponse
  6169  0F1A  00D2               	movwf	SPI_SM@currentState
  6170  0F1B  2F2F               	ljmp	i3Li1l699
  6171  0F1C                     i3Li1l703:	
  6172  0F1C                     i3Li1l3012:	
  6173                           
  6174                           ;SPI_SM.c: 273: SSPBUF = 0x00;
  6175  0F1C  0193               	clrf	19	;volatile
  6176                           
  6177                           ;SPI_SM.c: 274: currentState = Waiting4Command;
  6178  0F1D  01D2               	clrf	SPI_SM@currentState
  6179  0F1E                     i3Li1l704:	
  6180  0F1E                     i3Li1l3014:	
  6181  0F1E  2F2F               	ljmp	i3Li1l699
  6182  0F1F                     i3Li1l686:	
  6183  0F1F                     i3Li1l3016:	
  6184  0F1F  0852               	movf	SPI_SM@currentState,w
  6185                           
  6186                           ; Switch size 1, requested type "space"
  6187                           ; Number of cases is 5, Range of values is 0 to 4
  6188                           ; switch strategies available:
  6189                           ; Name         Instructions Cycles
  6190                           ; simple_byte           16     9 (average)
  6191                           ; direct_byte           17     7 (fixed)
  6192                           ; jumptable            260     6 (fixed)
  6193                           ;	Chosen strategy is simple_byte
  6194  0F20  3A00               	xorlw	0	; case 0
  6195  0F21  1903               	btfsc	3,2
  6196  0F22  2E8D               	ljmp	i3Li1l2956
  6197  0F23  3A01               	xorlw	1	; case 1
  6198  0F24  1903               	btfsc	3,2
  6199  0F25  2F00               	ljmp	i3Li1l3000
  6200  0F26  3A03               	xorlw	3	; case 2
  6201  0F27  1903               	btfsc	3,2
  6202  0F28  2F09               	ljmp	i3Li1l3004
  6203  0F29  3A01               	xorlw	1	; case 3
  6204  0F2A  1903               	btfsc	3,2
  6205  0F2B  2F12               	ljmp	i3Li1l3008
  6206  0F2C  3A07               	xorlw	7	; case 4
  6207  0F2D  1903               	btfsc	3,2
  6208  0F2E  2F1C               	ljmp	i3Li1l3012
  6209  0F2F                     i3Li1l699:	
  6210                           
  6211                           ;SPI_SM.c: 279: SSPIF = 0;
  6212  0F2F  118C               	bcf	12,3	;volatile
  6213  0F30  2F31               	ljmp	i1l3152
  6214  0F31                     i3Li1l685:	
  6215  0F31                     i3Li1l705:	
  6216  0F31                     i1l3152:	
  6217                           
  6218                           ;ES_Port.c: 65: }
  6219                           ;ES_Port.c: 67: if (RCIF) {
  6220  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  6221  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  6222  0F33  1E8C               	btfss	12,5	;volatile
  6223  0F34  2FB3               	goto	i1l3156
  6224                           
  6225                           ;psect for function _UARTRXIntResponse
  6226                           
  6227                           ;ES_Port.c: 68: UARTRXIntResponse();
  6228  0F35                     i4L_UARTRXIntResponse:	
  6229  0F35                     i4Li1l3018:	
  6230                           
  6231                           ;UART_RX_SM.c: 289: static uint8_t currentByteIndex;
  6232                           ;UART_RX_SM.c: 290: static uint8_t bodyByteCount;
  6233                           ;UART_RX_SM.c: 291: static uint8_t checksum;
  6234                           ;UART_RX_SM.c: 293: uint8_t newByte = RCREG;
  6235  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  6236  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  6237  0F37  081A               	movf	26,w	;volatile
  6238  0F38  00F4               	movwf	??_UARTRXIntResponse
  6239  0F39  00F7               	movwf	UARTRXIntResponse@newByte
  6240  0F3A  2FA2               	ljmp	i4Li1l3068
  6241  0F3B                     i4Li1l464:	
  6242  0F3B                     i4Li1l3020:	
  6243                           
  6244                           ;UART_RX_SM.c: 297: if (newByte == 0x7E)
  6245  0F3B  307E               	movlw	126
  6246  0F3C  0677               	xorwf	UARTRXIntResponse@newByte,w
  6247  0F3D  1D03               	btfss	3,2
  6248  0F3E  2FB3               	ljmp	i1l3156
  6249  0F3F  2F41               	ljmp	i4Li1l3022
  6250  0F40                     i4Lu190_21:	
  6251  0F40  2FB3               	ljmp	i1l3156
  6252  0F41                     i4Lu190_20:	
  6253  0F41                     i4Li1l3022:	
  6254                           
  6255                           ;UART_RX_SM.c: 298: currentState = WaitForMSB;
  6256  0F41  01DF               	clrf	_currentState
  6257  0F42  0ADF               	incf	_currentState,f
  6258  0F43                     i4Li1l465:	
  6259  0F43  2FB3               	ljmp	i1l3156
  6260  0F44                     i4Li1l467:	
  6261  0F44                     i4Li1l3024:	
  6262                           
  6263                           ;UART_RX_SM.c: 302: if (newByte == 0)
  6264  0F44  0877               	movf	UARTRXIntResponse@newByte,w
  6265  0F45  1D03               	btfss	3,2
  6266  0F46  2F4D               	ljmp	i4Li1l3028
  6267  0F47  2F49               	ljmp	i4Li1l3026
  6268  0F48                     i4Lu191_21:	
  6269  0F48  2F4D               	ljmp	i4Li1l3028
  6270  0F49                     i4Lu191_20:	
  6271  0F49                     i4Li1l3026:	
  6272                           
  6273                           ;UART_RX_SM.c: 303: currentState = WaitForLSB;
  6274  0F49  3002               	movlw	2
  6275  0F4A  00F4               	movwf	??_UARTRXIntResponse
  6276  0F4B  00DF               	movwf	_currentState
  6277  0F4C  2FB3               	ljmp	i1l3156
  6278  0F4D                     i4Li1l468:	
  6279  0F4D                     i4Li1l3028:	
  6280                           
  6281                           ;UART_RX_SM.c: 304: else
  6282                           ;UART_RX_SM.c: 305: currentState = WaitFor7E;
  6283  0F4D  01DF               	clrf	_currentState
  6284  0F4E                     i4Li1l469:	
  6285  0F4E  2FB3               	ljmp	i1l3156
  6286  0F4F                     i4Li1l470:	
  6287  0F4F                     i4Li1l3030:	
  6288                           
  6289                           ;UART_RX_SM.c: 309: bodyByteCount = newByte;
  6290  0F4F  0877               	movf	UARTRXIntResponse@newByte,w
  6291  0F50  00F4               	movwf	??_UARTRXIntResponse
  6292  0F51  00D3               	movwf	UARTRXIntResponse@bodyByteCount
  6293                           
  6294                           ;UART_RX_SM.c: 310: if (bodyByteCount > 10) {
  6295  0F52  300B               	movlw	11
  6296  0F53  0253               	subwf	UARTRXIntResponse@bodyByteCount,w
  6297  0F54  1C03               	btfss	3,0
  6298  0F55  2F5A               	ljmp	i4Li1l3034
  6299  0F56  2F58               	ljmp	i4Li1l3032
  6300  0F57                     i4Lu192_21:	
  6301  0F57  2F5A               	ljmp	i4Li1l3034
  6302  0F58                     i4Lu192_20:	
  6303  0F58                     i4Li1l3032:	
  6304                           
  6305                           ;UART_RX_SM.c: 311: currentState = WaitFor7E;
  6306  0F58  01DF               	clrf	_currentState
  6307  0F59  2FB3               	ljmp	i1l3156
  6308  0F5A                     i4Li1l471:	
  6309  0F5A                     i4Li1l3034:	
  6310                           
  6311                           ;UART_RX_SM.c: 313: currentByteIndex = 0;
  6312  0F5A  01FD               	clrf	UARTRXIntResponse@currentByteIndex
  6313                           
  6314                           ;UART_RX_SM.c: 314: checksum = 0;
  6315  0F5B  01D4               	clrf	UARTRXIntResponse@checksum
  6316  0F5C                     i4Li1l3036:	
  6317                           
  6318                           ;UART_RX_SM.c: 315: currentState = SuckUpData;
  6319  0F5C  3004               	movlw	4
  6320  0F5D  00F4               	movwf	??_UARTRXIntResponse
  6321  0F5E  00DF               	movwf	_currentState
  6322  0F5F                     i4Li1l472:	
  6323  0F5F  2FB3               	ljmp	i1l3156
  6324  0F60                     i4Li1l473:	
  6325  0F60                     i4Li1l3038:	
  6326                           
  6327                           ;UART_RX_SM.c: 320: if (currentByteIndex < 10) {
  6328  0F60  300A               	movlw	10
  6329  0F61  027D               	subwf	UARTRXIntResponse@currentByteIndex,w
  6330  0F62  1803               	btfsc	3,0
  6331  0F63  2F79               	ljmp	i4Li1l3044
  6332  0F64  2F66               	ljmp	i4Li1l3040
  6333  0F65                     i4Lu193_21:	
  6334  0F65  2F79               	ljmp	i4Li1l3044
  6335  0F66                     i4Lu193_20:	
  6336  0F66                     i4Li1l3040:	
  6337                           
  6338                           ;UART_RX_SM.c: 321: RXBuffer[writeRXIndex][currentByteIndex] = newByte;
  6339  0F66  0877               	movf	UARTRXIntResponse@newByte,w
  6340  0F67  00F4               	movwf	??_UARTRXIntResponse
  6341  0F68  300A               	movlw	10
  6342  0F69  00F5               	movwf	??_UARTRXIntResponse+1
  6343  0F6A  00F0               	movwf	i1___bmul@multiplicand
  6344  0F6B  086A               	movf	_writeRXIndex,w
  6345  0F6C  27DE  158A         	fcall	i1___bmul
  6346  0F6E  3EA0               	addlw	(low (_RXBuffer| 0))& (0+255)
  6347  0F6F  077D               	addwf	UARTRXIntResponse@currentByteIndex,w
  6348  0F70  00F6               	movwf	??_UARTRXIntResponse+2
  6349  0F71  0084               	movwf	4
  6350  0F72  0874               	movf	??_UARTRXIntResponse,w
  6351  0F73  1383               	bcf	3,7	;select IRP bank1
  6352  0F74  0080               	movwf	0
  6353  0F75                     i4Li1l3042:	
  6354                           
  6355                           ;UART_RX_SM.c: 322: ++currentByteIndex;
  6356  0F75  3001               	movlw	1
  6357  0F76  00F4               	movwf	??_UARTRXIntResponse
  6358  0F77  07FD               	addwf	UARTRXIntResponse@currentByteIndex,f
  6359  0F78  2F79               	ljmp	i4Li1l3044
  6360  0F79                     i4Li1l474:	
  6361  0F79                     i4Li1l3044:	
  6362                           
  6363                           ;UART_RX_SM.c: 323: }
  6364                           ;UART_RX_SM.c: 324: checksum += newByte;
  6365  0F79  0877               	movf	UARTRXIntResponse@newByte,w
  6366  0F7A  00F4               	movwf	??_UARTRXIntResponse
  6367  0F7B  1283               	bcf	3,5	;RP0=0, select bank0
  6368  0F7C  1303               	bcf	3,6	;RP1=0, select bank0
  6369  0F7D  07D4               	addwf	UARTRXIntResponse@checksum,f
  6370  0F7E                     i4Li1l3046:	
  6371                           
  6372                           ;UART_RX_SM.c: 325: if (currentByteIndex == bodyByteCount) {
  6373  0F7E  087D               	movf	UARTRXIntResponse@currentByteIndex,w
  6374  0F7F  0653               	xorwf	UARTRXIntResponse@bodyByteCount,w
  6375  0F80  1D03               	btfss	3,2
  6376  0F81  2FB3               	ljmp	i1l3156
  6377  0F82  2F84               	ljmp	i4Li1l3048
  6378  0F83                     i4Lu194_21:	
  6379  0F83  2FB3               	ljmp	i1l3156
  6380  0F84                     i4Lu194_20:	
  6381  0F84                     i4Li1l3048:	
  6382                           
  6383                           ;UART_RX_SM.c: 326: currentByteIndex = 0;
  6384  0F84  01FD               	clrf	UARTRXIntResponse@currentByteIndex
  6385  0F85                     i4Li1l3050:	
  6386                           
  6387                           ;UART_RX_SM.c: 327: currentState = WaitForCkSum;
  6388  0F85  3005               	movlw	5
  6389  0F86  00F4               	movwf	??_UARTRXIntResponse
  6390  0F87  00DF               	movwf	_currentState
  6391  0F88                     i4Li1l475:	
  6392  0F88  2FB3               	ljmp	i1l3156
  6393  0F89                     i4Li1l476:	
  6394  0F89                     i4Li1l3052:	
  6395                           
  6396                           ;UART_RX_SM.c: 331: checksum += newByte;
  6397  0F89  0877               	movf	UARTRXIntResponse@newByte,w
  6398  0F8A  00F4               	movwf	??_UARTRXIntResponse
  6399  0F8B  07D4               	addwf	UARTRXIntResponse@checksum,f
  6400                           
  6401                           ;UART_RX_SM.c: 332: if (0xFF == checksum) {
  6402  0F8C  0F54               	incfsz	UARTRXIntResponse@checksum,w
  6403  0F8D  2FA0               	ljmp	i4Li1l477
  6404  0F8E  2F91               	ljmp	i4Li1l3054
  6405  0F8F                     i4Lu195_21:	
  6406  0F8F  2FA0               	ljmp	i4Li1l477
  6407  0F90                     i4Lu195_20:	
  6408  0F90  2F91               	ljmp	i4Li1l3054
  6409  0F91                     i4Li1l478:	
  6410  0F91                     i4Li1l3054:	
  6411  0F91  0866               	movf	_readRXIndex,w
  6412  0F92  1D03               	btfss	3,2
  6413  0F93  2F9A               	ljmp	i4Li1l3060
  6414  0F94  2F96               	ljmp	i4Li1l3056
  6415  0F95                     i4Lu196_21:	
  6416  0F95  2F9A               	ljmp	i4Li1l3060
  6417  0F96                     i4Lu196_20:	
  6418  0F96                     i4Li1l3056:	
  6419  0F96  01E6               	clrf	_readRXIndex
  6420  0F97  0AE6               	incf	_readRXIndex,f
  6421  0F98                     i4Li1l3058:	
  6422  0F98  01EA               	clrf	_writeRXIndex
  6423  0F99  2F9E               	ljmp	i4Li1l3064
  6424  0F9A                     i4Li1l479:	
  6425  0F9A                     i4Li1l3060:	
  6426  0F9A  01E6               	clrf	_readRXIndex
  6427  0F9B                     i4Li1l3062:	
  6428  0F9B  01EA               	clrf	_writeRXIndex
  6429  0F9C  0AEA               	incf	_writeRXIndex,f
  6430  0F9D                     i4Li1l480:	
  6431  0F9D  2F9E               	ljmp	i4Li1l3064
  6432  0F9E                     i4Li1l481:	
  6433  0F9E                     i4Li1l3064:	
  6434                           
  6435                           ;UART_RX_SM.c: 334: RXFlag = ((boolean) !((boolean) 0));
  6436  0F9E  01D8               	clrf	_RXFlag
  6437  0F9F  0AD8               	incf	_RXFlag,f
  6438  0FA0                     i4Li1l477:	
  6439                           
  6440                           ;UART_RX_SM.c: 335: }
  6441                           ;UART_RX_SM.c: 336: currentState = WaitFor7E;
  6442  0FA0  01DF               	clrf	_currentState
  6443  0FA1                     i4Li1l482:	
  6444  0FA1                     i4Li1l3066:	
  6445  0FA1  2FB3               	ljmp	i1l3156
  6446  0FA2                     i4Li1l463:	
  6447  0FA2                     i4Li1l3068:	
  6448  0FA2  085F               	movf	_currentState,w
  6449                           
  6450                           ; Switch size 1, requested type "space"
  6451                           ; Number of cases is 5, Range of values is 0 to 5
  6452                           ; switch strategies available:
  6453                           ; Name         Instructions Cycles
  6454                           ; simple_byte           16     9 (average)
  6455                           ; direct_byte           19     7 (fixed)
  6456                           ; jumptable            260     6 (fixed)
  6457                           ;	Chosen strategy is simple_byte
  6458  0FA3  3A00               	xorlw	0	; case 0
  6459  0FA4  1903               	btfsc	3,2
  6460  0FA5  2F3B               	ljmp	i4Li1l3020
  6461  0FA6  3A01               	xorlw	1	; case 1
  6462  0FA7  1903               	btfsc	3,2
  6463  0FA8  2F44               	ljmp	i4Li1l3024
  6464  0FA9  3A03               	xorlw	3	; case 2
  6465  0FAA  1903               	btfsc	3,2
  6466  0FAB  2F4F               	ljmp	i4Li1l3030
  6467  0FAC  3A06               	xorlw	6	; case 4
  6468  0FAD  1903               	btfsc	3,2
  6469  0FAE  2F60               	ljmp	i4Li1l3038
  6470  0FAF  3A01               	xorlw	1	; case 5
  6471  0FB0  1903               	btfsc	3,2
  6472  0FB1  2F89               	ljmp	i4Li1l3052
  6473  0FB2  2FB3               	ljmp	i1l3156
  6474  0FB3                     i4Li1l466:	
  6475  0FB3                     i4Li1l483:	
  6476  0FB3                     i1l3156:	
  6477                           
  6478                           ;ES_Port.c: 69: }
  6479                           ;ES_Port.c: 71: if (TXIF) {
  6480  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  6481  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  6482  0FB5  1E0C               	btfss	12,4	;volatile
  6483  0FB6  2FD0               	goto	i1l3160
  6484                           
  6485                           ;psect for function _UARTTXIntResponse
  6486                           
  6487                           ;ES_Port.c: 72: UARTTXIntResponse();
  6488  0FB7                     i5L_UARTTXIntResponse:	
  6489  0FB7                     i5Li1l3070:	
  6490                           
  6491                           ;UART_TX_SM.c: 276: if (index >= length) {
  6492  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  6493  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  6494  0FB9  0862               	movf	_length,w
  6495  0FBA  0261               	subwf	_index,w
  6496  0FBB  1C03               	btfss	3,0
  6497  0FBC  2FC5               	ljmp	i5Li1l3074
  6498  0FBD  2FBF               	ljmp	i5Li1l3072
  6499  0FBE                     i5Lu197_21:	
  6500  0FBE  2FC5               	ljmp	i5Li1l3074
  6501  0FBF                     i5Lu197_20:	
  6502  0FBF                     i5Li1l3072:	
  6503                           
  6504                           ;UART_TX_SM.c: 277: sendCompleteFlag = ((boolean) !((boolean) 0));
  6505  0FBF  01E9               	clrf	_sendCompleteFlag
  6506  0FC0  0AE9               	incf	_sendCompleteFlag,f
  6507                           
  6508                           ;UART_TX_SM.c: 278: TXIE = 0;
  6509  0FC1  1683               	bsf	3,5	;RP0=1, select bank1
  6510  0FC2  1303               	bcf	3,6	;RP1=0, select bank1
  6511  0FC3  120C               	bcf	12,4	;volatile
  6512  0FC4  2FD0               	ljmp	i1l3160
  6513  0FC5                     i5Li1l586:	
  6514  0FC5                     i5Li1l3074:	
  6515                           
  6516                           ;UART_TX_SM.c: 280: TXREG = XBeePacket[index++];
  6517  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  6518  0FC6  0861               	movf	_index,w
  6519  0FC7  3EC4               	addlw	(low (_XBeePacket| 0))& (0+255)
  6520  0FC8  0084               	movwf	4
  6521  0FC9  1383               	bcf	3,7	;select IRP bank1
  6522  0FCA  0800               	movf	0,w
  6523  0FCB  0099               	movwf	25	;volatile
  6524  0FCC                     i5Li1l3076:	
  6525  0FCC  3001               	movlw	1
  6526  0FCD  00F0               	movwf	??_UARTTXIntResponse
  6527  0FCE  07E1               	addwf	_index,f
  6528  0FCF  2FD0               	ljmp	i1l3160
  6529  0FD0                     i5Li1l587:	
  6530  0FD0                     i5Li1l588:	
  6531  0FD0                     i1l3160:	
  6532                           
  6533                           ;ES_Port.c: 73: }
  6534                           ;ES_Port.c: 75: RC7 = 0;
  6535  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  6536  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  6537  0FD2  1387               	bcf	7,7	;volatile
  6538  0FD3  087C               	movf	??_ISR+4,w
  6539  0FD4  00FF               	movwf	127
  6540  0FD5  087B               	movf	??_ISR+3,w
  6541  0FD6  008A               	movwf	10
  6542  0FD7  087A               	movf	??_ISR+2,w
  6543  0FD8  0084               	movwf	4
  6544  0FD9  0E79               	swapf	(??_ISR+1)^(0+-128),w
  6545  0FDA  0083               	movwf	3
  6546  0FDB  0EFE               	swapf	126,f
  6547  0FDC  0E7E               	swapf	126,w
  6548  0FDD  0009               	retfie
  6549  0FDE                     __end_of_ISR:	
  6550  0FDE                     __ptext39:	
  6551 ;; *************** function i1___bmul *****************
  6552 ;; Defined at:
  6553 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul8.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;  multiplier      1    wreg     unsigned char 
  6556 ;;  multiplicand    1    0[COMMON] unsigned char 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  multiplier      1    2[COMMON] unsigned char 
  6559 ;;  __bmul          1    3[COMMON] unsigned char 
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      unsigned char 
  6562 ;; Registers used:
  6563 ;;		wreg, status,2, status,0
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6569 ;;      Params:         1       0       0       0
  6570 ;;      Locals:         2       0       0       0
  6571 ;;      Temps:          1       0       0       0
  6572 ;;      Totals:         4       0       0       0
  6573 ;;Total ram usage:        4 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		_RX_getStatusBuffer
  6579 ;;		_RX_getResponseBuffer
  6580 ;;		_UARTRXIntResponse
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           
  6585                           ;psect for function i1___bmul
  6586  0FDE                     i1___bmul:	
  6587                           
  6588                           ;incstack = 0
  6589 ;; hardware stack exceeded
  6590                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  6591                           ;i1___bmul@multiplier stored from wreg
  6592  0FDE  00F2               	movwf	i1___bmul@multiplier
  6593  0FDF  01F3               	clrf	i1___bmul@product
  6594  0FE0                     i1l2394:	
  6595  0FE0  1C72               	btfss	i1___bmul@multiplier,0
  6596  0FE1  2FE5               	goto	i1l2398
  6597  0FE2  0870               	movf	i1___bmul@multiplicand,w
  6598  0FE3  00F1               	movwf	??i1___bmul
  6599  0FE4  07F3               	addwf	i1___bmul@product,f
  6600  0FE5                     i1l2398:	
  6601  0FE5  1003               	clrc
  6602  0FE6  0DF0               	rlf	i1___bmul@multiplicand,f
  6603  0FE7  1003               	clrc
  6604  0FE8  0CF2               	rrf	i1___bmul@multiplier,f
  6605  0FE9  0872               	movf	i1___bmul@multiplier,w
  6606  0FEA  1D03               	btfss	3,2
  6607  0FEB  2FE0               	goto	i1l2394
  6608  0FEC  0873               	movf	i1___bmul@product,w
  6609  0FED  0008               	return
  6610  0FEE                     __end_ofi1___bmul:	
  6611  0FEE                     __ptext38:	
  6612 ;; *************** function _RX_getResponseBuffer *****************
  6613 ;; Defined at:
  6614 ;;		line 284 in file "UART_RX_SM.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;		None
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;		None
  6619 ;; Return value:  Size  Location     Type
  6620 ;;                  1    wreg      PTR inline unsigned char
  6621 ;; Registers used:
  6622 ;;		wreg, status,2, status,0, pclath, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6628 ;;      Params:         0       0       0       0
  6629 ;;      Locals:         0       0       0       0
  6630 ;;      Temps:          1       0       0       0
  6631 ;;      Totals:         1       0       0       0
  6632 ;;Total ram usage:        1 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    1
  6635 ;; This function calls:
  6636 ;;		i1___bmul
  6637 ;; This function is called by:
  6638 ;;		_SPIIntResponse
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           
  6643                           ;psect for function _RX_getResponseBuffer
  6644  0FEE                     _RX_getResponseBuffer:	
  6645                           
  6646                           ;UART_RX_SM.c: 285: return &responseBuffer[readRespIndex];
  6647                           
  6648                           ;incstack = 0
  6649 ;; hardware stack exceeded
  6650                           ; Regs used in _RX_getResponseBuffer: [wreg+status,2+status,0+pclath+cstack]
  6651  0FEE  3003               	movlw	3
  6652  0FEF  00F4               	movwf	??_RX_getResponseBuffer
  6653  0FF0  00F0               	movwf	i1___bmul@multiplicand
  6654  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  6655  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  6656  0FF3  0867               	movf	_readRespIndex,w
  6657  0FF4  27DE               	fcall	i1___bmul
  6658  0FF5  3ED8               	addlw	(low (_responseBuffer| 0))& (0+255)
  6659  0FF6  0008               	return
  6660  0FF7                     __end_of_RX_getResponseBuffer:	
  6661  0FF7                     __ptext37:	
  6662 ;; *************** function _RX_getStatusBuffer *****************
  6663 ;; Defined at:
  6664 ;;		line 280 in file "UART_RX_SM.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;		None
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;		None
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  1    wreg      PTR inline unsigned char
  6671 ;; Registers used:
  6672 ;;		wreg, status,2, status,0, pclath, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6678 ;;      Params:         0       0       0       0
  6679 ;;      Locals:         0       0       0       0
  6680 ;;      Temps:          1       0       0       0
  6681 ;;      Totals:         1       0       0       0
  6682 ;;Total ram usage:        1 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    1
  6685 ;; This function calls:
  6686 ;;		i1___bmul
  6687 ;; This function is called by:
  6688 ;;		_SPIIntResponse
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           
  6693                           ;psect for function _RX_getStatusBuffer
  6694  0FF7                     _RX_getStatusBuffer:	
  6695                           
  6696                           ;UART_RX_SM.c: 281: return &statusBuffer[readStatIndex];
  6697                           
  6698                           ;incstack = 0
  6699 ;; hardware stack exceeded
  6700                           ; Regs used in _RX_getStatusBuffer: [wreg+status,2+status,0+pclath+cstack]
  6701  0FF7  3003               	movlw	3
  6702  0FF8  00F4               	movwf	??_RX_getStatusBuffer
  6703  0FF9  00F0               	movwf	i1___bmul@multiplicand
  6704  0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  6705  0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  6706  0FFC  0868               	movf	_readStatIndex,w
  6707  0FFD  27DE               	fcall	i1___bmul
  6708  0FFE  3EE1               	addlw	(low (_statusBuffer| 0))& (0+255)
  6709  0FFF  0008               	return
  6710  1000                     __end_of_RX_getStatusBuffer:	
  6711                           
  6712                           	psect	intentry
  6713  0004                     __pintentry:	
  6714                           ;incstack = 0
  6715 ;; hardware stack exceeded
  6716                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6717                           
  6718  0004                     interrupt_function:	
  6719  007E                     saved_w	set	btemp
  6720  0004  00FE               	movwf	btemp
  6721  0005  0E03               	swapf	3,w
  6722  0006  00F9               	movwf	??_ISR+1
  6723  0007  0804               	movf	4,w
  6724  0008  00FA               	movwf	??_ISR+2
  6725  0009  080A               	movf	10,w
  6726  000A  00FB               	movwf	??_ISR+3
  6727  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6728  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6729  000D  087F               	movf	btemp+1,w
  6730  000E  00FC               	movwf	??_ISR+4
  6731  000F  158A  2E77         	ljmp	_ISR
  6732                           
  6733                           	psect	text33
  6734  0000                     __ptext33:	
  6735 ;; *************** function _UARTTXIntResponse *****************
  6736 ;; Defined at:
  6737 ;;		line 275 in file "UART_TX_SM.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;		None
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;		None
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  1    wreg      void 
  6744 ;; Registers used:
  6745 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6751 ;;      Params:         0       0       0       0
  6752 ;;      Locals:         0       0       0       0
  6753 ;;      Temps:          1       0       0       0
  6754 ;;      Totals:         1       0       0       0
  6755 ;;Total ram usage:        1 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; This function calls:
  6758 ;;		Nothing
  6759 ;; This function is called by:
  6760 ;;		_ISR
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764  0000                     _UARTTXIntResponse:	
  6765                           ;psect for function _UARTTXIntResponse
  6766                           
  6767  0000                     __end_of_UARTTXIntResponse:	
  6768                           ;UART_TX_SM.c: 280: TXREG = XBeePacket[index++];
  6769                           
  6770                           ;UART_TX_SM.c: 279: } else {
  6771                           
  6772                           ;UART_TX_SM.c: 278: TXIE = 0;
  6773                           
  6774                           ;UART_TX_SM.c: 277: sendCompleteFlag = ((boolean) !((boolean) 0));
  6775                           
  6776                           ;UART_TX_SM.c: 276: if (index >= length) {
  6777                           
  6778                           ;incstack = 0
  6779                           ; Regs used in _UARTTXIntResponse: [wreg-fsr0h+status,2+status,0]
  6780                           
  6781                           
  6782                           	psect	text34
  6783  0000                     __ptext34:	
  6784 ;; *************** function _UARTRXIntResponse *****************
  6785 ;; Defined at:
  6786 ;;		line 288 in file "UART_RX_SM.c"
  6787 ;; Parameters:    Size  Location     Type
  6788 ;;		None
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;  newByte         1    7[COMMON] unsigned char 
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  1    wreg      void 
  6793 ;; Registers used:
  6794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6795 ;; Tracked objects:
  6796 ;;		On entry : 0/0
  6797 ;;		On exit  : 0/0
  6798 ;;		Unchanged: 0/0
  6799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6800 ;;      Params:         0       0       0       0
  6801 ;;      Locals:         1       0       0       0
  6802 ;;      Temps:          3       0       0       0
  6803 ;;      Totals:         4       0       0       0
  6804 ;;Total ram usage:        4 bytes
  6805 ;; Hardware stack levels used:    1
  6806 ;; Hardware stack levels required when called:    1
  6807 ;; This function calls:
  6808 ;;		i1___bmul
  6809 ;; This function is called by:
  6810 ;;		_ISR
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814  0000                     _UARTRXIntResponse:	
  6815                           ;psect for function _UARTRXIntResponse
  6816                           
  6817  0000                     __end_of_UARTRXIntResponse:	
  6818                           ; Switch size 1, requested type "space"
  6819                           ; Number of cases is 5, Range of values is 0 to 5
  6820                           ; switch strategies available:
  6821                           ; Name         Instructions Cycles
  6822                           ; simple_byte           16     9 (average)
  6823                           ; direct_byte           19     7 (fixed)
  6824                           ; jumptable            260     6 (fixed)
  6825                           ;	Chosen strategy is simple_byte
  6826                           
  6827                           ;UART_RX_SM.c: 340: }
  6828                           
  6829                           ;UART_RX_SM.c: 339: break;
  6830                           
  6831                           ;UART_RX_SM.c: 338: default:
  6832                           
  6833                           ;UART_RX_SM.c: 337: break;
  6834                           
  6835                           ;UART_RX_SM.c: 335: }
  6836                           ;UART_RX_SM.c: 336: currentState = WaitFor7E;
  6837                           
  6838                           ;UART_RX_SM.c: 334: RXFlag = ((boolean) !((boolean) 0));
  6839                           
  6840                           ;UART_RX_SM.c: 333: do{ if (readRXIndex == 0) { readRXIndex = 1; writeRXIndex = 0; } els
      +                          e { readRXIndex = 0; writeRXIndex = 1; } }while(0);
  6841                           
  6842                           ;UART_RX_SM.c: 332: if (0xFF == checksum) {
  6843                           
  6844                           ;UART_RX_SM.c: 331: checksum += newByte;
  6845                           
  6846                           ;UART_RX_SM.c: 330: case WaitForCkSum:
  6847                           
  6848                           ;UART_RX_SM.c: 328: }
  6849                           ;UART_RX_SM.c: 329: break;
  6850                           
  6851                           ;UART_RX_SM.c: 327: currentState = WaitForCkSum;
  6852                           
  6853                           ;UART_RX_SM.c: 326: currentByteIndex = 0;
  6854                           
  6855                           ;UART_RX_SM.c: 325: if (currentByteIndex == bodyByteCount) {
  6856                           
  6857                           ;UART_RX_SM.c: 323: }
  6858                           ;UART_RX_SM.c: 324: checksum += newByte;
  6859                           
  6860                           ;UART_RX_SM.c: 322: ++currentByteIndex;
  6861                           
  6862                           ;UART_RX_SM.c: 321: RXBuffer[writeRXIndex][currentByteIndex] = newByte;
  6863                           
  6864                           ;UART_RX_SM.c: 320: if (currentByteIndex < 10) {
  6865                           
  6866                           ;UART_RX_SM.c: 319: case SuckUpData:
  6867                           
  6868                           ;UART_RX_SM.c: 316: }
  6869                           ;UART_RX_SM.c: 317: break;
  6870                           
  6871                           ;UART_RX_SM.c: 315: currentState = SuckUpData;
  6872                           
  6873                           ;UART_RX_SM.c: 314: checksum = 0;
  6874                           
  6875                           ;UART_RX_SM.c: 313: currentByteIndex = 0;
  6876                           
  6877                           ;UART_RX_SM.c: 312: } else {
  6878                           
  6879                           ;UART_RX_SM.c: 311: currentState = WaitFor7E;
  6880                           
  6881                           ;UART_RX_SM.c: 310: if (bodyByteCount > 10) {
  6882                           
  6883                           ;UART_RX_SM.c: 309: bodyByteCount = newByte;
  6884                           
  6885                           ;UART_RX_SM.c: 308: case WaitForLSB:
  6886                           
  6887                           ;UART_RX_SM.c: 306: break;
  6888                           
  6889                           ;UART_RX_SM.c: 304: else
  6890                           ;UART_RX_SM.c: 305: currentState = WaitFor7E;
  6891                           
  6892                           ;UART_RX_SM.c: 303: currentState = WaitForLSB;
  6893                           
  6894                           ;UART_RX_SM.c: 302: if (newByte == 0)
  6895                           
  6896                           ;UART_RX_SM.c: 301: case WaitForMSB:
  6897                           
  6898                           ;UART_RX_SM.c: 299: break;
  6899                           
  6900                           ;UART_RX_SM.c: 298: currentState = WaitForMSB;
  6901                           
  6902                           ;UART_RX_SM.c: 297: if (newByte == 0x7E)
  6903                           
  6904                           ;UART_RX_SM.c: 296: case WaitFor7E:
  6905                           
  6906                           ;UART_RX_SM.c: 295: switch (currentState) {
  6907                           
  6908                           ;UART_RX_SM.c: 289: static uint8_t currentByteIndex;
  6909                           ;UART_RX_SM.c: 290: static uint8_t bodyByteCount;
  6910                           ;UART_RX_SM.c: 291: static uint8_t checksum;
  6911                           ;UART_RX_SM.c: 293: uint8_t newByte = RCREG;
  6912                           
  6913                           ;incstack = 0
  6914 ;; hardware stack exceeded
  6915                           ; Regs used in _UARTRXIntResponse: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6916                           
  6917                           
  6918                           	psect	text35
  6919  0000                     __ptext35:	
  6920 ;; *************** function _SPIIntResponse *****************
  6921 ;; Defined at:
  6922 ;;		line 179 in file "SPI_SM.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  readByte        1    6[COMMON] unsigned char 
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      void 
  6929 ;; Registers used:
  6930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6936 ;;      Params:         0       0       0       0
  6937 ;;      Locals:         1       0       0       0
  6938 ;;      Temps:          1       0       0       0
  6939 ;;      Totals:         2       0       0       0
  6940 ;;Total ram usage:        2 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    2
  6943 ;; This function calls:
  6944 ;;		_RX_clearResponseReady
  6945 ;;		_RX_getResponseBuffer
  6946 ;;		_RX_getStatusBuffer
  6947 ;;		_RX_newResponseReady
  6948 ;; This function is called by:
  6949 ;;		_ISR
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953  0000                     _SPIIntResponse:	
  6954                           ;psect for function _SPIIntResponse
  6955                           
  6956  0000                     __end_of_SPIIntResponse:	
  6957                           ;SPI_SM.c: 279: SSPIF = 0;
  6958                           
  6959                           ; Switch size 1, requested type "space"
  6960                           ; Number of cases is 5, Range of values is 0 to 4
  6961                           ; switch strategies available:
  6962                           ; Name         Instructions Cycles
  6963                           ; simple_byte           16     9 (average)
  6964                           ; direct_byte           17     7 (fixed)
  6965                           ; jumptable            260     6 (fixed)
  6966                           ;	Chosen strategy is simple_byte
  6967                           
  6968                           ;SPI_SM.c: 278: }
  6969                           
  6970                           ;SPI_SM.c: 277: break;
  6971                           
  6972                           ;SPI_SM.c: 276: default:
  6973                           
  6974                           ;SPI_SM.c: 275: break;
  6975                           
  6976                           ;SPI_SM.c: 274: currentState = Waiting4Command;
  6977                           
  6978                           ;SPI_SM.c: 273: SSPBUF = 0x00;
  6979                           
  6980                           ;SPI_SM.c: 272: case Waiting4Dummy4:
  6981                           
  6982                           ;SPI_SM.c: 271: break;
  6983                           
  6984                           ;SPI_SM.c: 270: currentState = Waiting4Dummy4;
  6985                           
  6986                           ;SPI_SM.c: 269: SSPBUF = SPIBuffer[2];
  6987                           
  6988                           ;SPI_SM.c: 268: case Waiting4Dummy3:
  6989                           
  6990                           ;SPI_SM.c: 267: break;
  6991                           
  6992                           ;SPI_SM.c: 266: currentState = Waiting4Dummy3;
  6993                           
  6994                           ;SPI_SM.c: 265: SSPBUF = SPIBuffer[1];
  6995                           
  6996                           ;SPI_SM.c: 264: case Waiting4Dummy2:
  6997                           
  6998                           ;SPI_SM.c: 263: break;
  6999                           
  7000                           ;SPI_SM.c: 262: currentState = Waiting4Dummy2;
  7001                           
  7002                           ;SPI_SM.c: 261: SSPBUF = SPIBuffer[0];
  7003                           
  7004                           ;SPI_SM.c: 260: case Waiting4Dummy1:
  7005                           
  7006                           ;SPI_SM.c: 259: break;
  7007                           
  7008                           ;SPI_SM.c: 257: }
  7009                           ;SPI_SM.c: 258: currentState = Waiting4Dummy1;
  7010                           
  7011                           ;SPI_SM.c: 255: SPIBuffer = &responseBytes;
  7012                           
  7013                           ;SPI_SM.c: 254: responseBytes[2] = 0xFF;
  7014                           
  7015                           ;SPI_SM.c: 253: responseBytes[1] = 0xFF;
  7016                           
  7017                           ;SPI_SM.c: 252: responseBytes[0] = 0xFF;
  7018                           
  7019                           ;SPI_SM.c: 242: }
  7020                           ;SPI_SM.c: 251: } else {
  7021                           
  7022                           ;SPI_SM.c: 241: SPIBuffer = &responseBytes;
  7023                           
  7024                           ;SPI_SM.c: 240: responseBytes[2] = 0x00;
  7025                           
  7026                           ;SPI_SM.c: 239: responseBytes[1] = 0x00;
  7027                           
  7028                           ;SPI_SM.c: 238: responseBytes[0] = 0x00;
  7029                           
  7030                           ;SPI_SM.c: 237: } else {
  7031                           
  7032                           ;SPI_SM.c: 236: commOpen = ((boolean) 0);
  7033                           
  7034                           ;UART_RX_SM.c: 277: newResponseAvailable = ((boolean) 0);
  7035                           
  7036                           ;psect for function _RX_clearResponseReady
  7037                           
  7038                           ;SPI_SM.c: 235: RX_clearResponseReady();
  7039                           
  7040                           ;SPI_SM.c: 234: SPIBuffer = RX_getResponseBuffer();
  7041                           
  7042                           ;UART_RX_SM.c: 273: return newResponseAvailable;
  7043                           
  7044                           ;psect for function _RX_newResponseReady
  7045                           
  7046                           ;SPI_SM.c: 233: if (RX_newResponseReady()) {
  7047                           
  7048                           ;SPI_SM.c: 230: } else if ((readByte & (0x00000080 | 0x00000040)) == (0x00000040)) {
  7049                           
  7050                           ;SPI_SM.c: 218: SPIBuffer = &responseBytes;
  7051                           
  7052                           ;SPI_SM.c: 217: responseBytes[2] = 0x00;
  7053                           
  7054                           ;SPI_SM.c: 216: responseBytes[1] = 0x00;
  7055                           
  7056                           ;SPI_SM.c: 214: }
  7057                           ;SPI_SM.c: 215: responseBytes[0] = 0x00;
  7058                           
  7059                           ;SPI_SM.c: 213: commOpen = ((boolean) !((boolean) 0));
  7060                           
  7061                           ;SPI_SM.c: 212: newRequest = ((boolean) !((boolean) 0));
  7062                           
  7063                           ;SPI_SM.c: 211: colorRequestData = readByte & ~(0x00000080 | 0x00000040);
  7064                           
  7065                           ;SPI_SM.c: 209: if (!commOpen) {
  7066                           
  7067                           ;SPI_SM.c: 206: } else if ((readByte & (0x00000080 | 0x00000040)) == (0x00000080)) {
  7068                           
  7069                           ;SPI_SM.c: 198: SPIBuffer = RX_getStatusBuffer();
  7070                           
  7071                           ;SPI_SM.c: 195: } else if ((readByte & (0x00000080 | 0x00000040)) == (0x00000080 | 0x000
      +                          00040)) {
  7072                           
  7073                           ;SPI_SM.c: 194: SPIBuffer = &responseBytes;
  7074                           
  7075                           ;SPI_SM.c: 193: responseBytes[2] = 0xFF;
  7076                           
  7077                           ;SPI_SM.c: 192: responseBytes[1] = 0xFF;
  7078                           
  7079                           ;SPI_SM.c: 191: responseBytes[0] = 0xFF;
  7080                           
  7081                           ;SPI_SM.c: 189: if (!radioPing) {
  7082                           
  7083                           ;SPI_SM.c: 188: SSPBUF = 0xFF;
  7084                           
  7085                           ;SPI_SM.c: 187: case Waiting4Command:
  7086                           
  7087                           ;SPI_SM.c: 186: switch (currentState) {
  7088                           
  7089                           ;SPI_SM.c: 183: readByte = SSPBUF;
  7090                           
  7091                           ;SPI_SM.c: 180: unsigned char readByte;
  7092                           ;SPI_SM.c: 182: if (BF == 1) {
  7093                           
  7094                           ;incstack = 0
  7095 ;; hardware stack exceeded
  7096                           ; Regs used in _SPIIntResponse: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7097                           
  7098                           
  7099                           	psect	text36
  7100  0000                     __ptext36:	
  7101 ;; *************** function _RX_newResponseReady *****************
  7102 ;; Defined at:
  7103 ;;		line 272 in file "UART_RX_SM.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;		None
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;		None
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  1    wreg      unsigned char 
  7110 ;; Registers used:
  7111 ;;		wreg
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7117 ;;      Params:         0       0       0       0
  7118 ;;      Locals:         0       0       0       0
  7119 ;;      Temps:          0       0       0       0
  7120 ;;      Totals:         0       0       0       0
  7121 ;;Total ram usage:        0 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; This function calls:
  7124 ;;		Nothing
  7125 ;; This function is called by:
  7126 ;;		_SPIIntResponse
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130  0000                     _RX_newResponseReady:	
  7131                           ;psect for function _RX_newResponseReady
  7132                           
  7133  0000                     __end_of_RX_newResponseReady:	
  7134                           ;UART_RX_SM.c: 273: return newResponseAvailable;
  7135                           
  7136                           ;incstack = 0
  7137 ;; hardware stack exceeded
  7138                           ; Regs used in _RX_newResponseReady: [wreg]
  7139                           
  7140                           
  7141                           	psect	text40
  7142  0000                     __ptext40:	
  7143 ;; *************** function _RX_clearResponseReady *****************
  7144 ;; Defined at:
  7145 ;;		line 276 in file "UART_RX_SM.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;		None
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;		None
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  1    wreg      void 
  7152 ;; Registers used:
  7153 ;;		status,2
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7159 ;;      Params:         0       0       0       0
  7160 ;;      Locals:         0       0       0       0
  7161 ;;      Temps:          0       0       0       0
  7162 ;;      Totals:         0       0       0       0
  7163 ;;Total ram usage:        0 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; This function calls:
  7166 ;;		Nothing
  7167 ;; This function is called by:
  7168 ;;		_SPIIntResponse
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172  0000                     _RX_clearResponseReady:	
  7173                           ;psect for function _RX_clearResponseReady
  7174                           
  7175  0000                     __end_of_RX_clearResponseReady:	
  7176                           ;UART_RX_SM.c: 277: newResponseAvailable = ((boolean) 0);
  7177                           
  7178                           ;incstack = 0
  7179 ;; hardware stack exceeded
  7180                           ; Regs used in _RX_clearResponseReady: [status,2]
  7181                           
  7182                           
  7183                           	psect	functab
  7184  0100                     __pfunctab:	
  7185  0100                     __fptable:	
  7186  0100                     fptable:	
  7187  0100  00FF               	movwf	(btemp+1)& (0+127)
  7188  0101  3001               	movlw	high fptable
  7189  0102  008A               	movwf	10
  7190  0103  087F               	movf	(btemp+1)& (0+127),w
  7191  0104  0782               	addwf	2,f
  7192  0105                     fpbase:	
  7193  0105  2905               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7194  0106                     fp__InitUARTTXService:	
  7195  0106  118A  2B61         	ljmp	_InitUARTTXService
  7196  0108                     fp__InitUARTRXService:	
  7197  0108  118A  2BA2         	ljmp	_InitUARTRXService
  7198  010A                     fp__InitSPIService:	
  7199  010A  118A  2B77         	ljmp	_InitSPIService
  7200  010C                     fp__InitPACSystemService:	
  7201  010C  118A  2940         	ljmp	_InitPACSystemService
  7202  010E                     fp__CheckSPIEvent:	
  7203  010E                     entry__CheckSPIEvent:	
  7204  010E  118A  2AAA         	ljmp	_CheckSPIEvent
  7205  0110                     fp__CheckUARTRXEvent:	
  7206  0110                     entry__CheckUARTRXEvent:	
  7207  0110  118A  2AC5         	ljmp	_CheckUARTRXEvent
  7208  0112                     fp__CheckUARTTXEvent:	
  7209  0112                     entry__CheckUARTTXEvent:	
  7210  0112  118A  2ADB         	ljmp	_CheckUARTTXEvent
  7211  0114                     fp__PostUARTTXService:	
  7212  0114  118A  2936         	ljmp	_PostUARTTXService
  7213  0116                     fp__PostUARTRXService:	
  7214  0116  118A  292C         	ljmp	_PostUARTRXService
  7215  0118                     fp__PostPACSystemService:	
  7216  0118  118A  2922         	ljmp	_PostPACSystemService
  7217  011A                     fp__RunPACSystemService:	
  7218  011A                     entry__RunPACSystemService:	
  7219  011A  118A  2E8C         	ljmp	_RunPACSystemService
  7220  011C                     fp__RunSPIService:	
  7221  011C                     entry__RunSPIService:	
  7222  011C  118A  2B57         	ljmp	_RunSPIService
  7223  011E                     fp__RunUARTRXService:	
  7224  011E                     entry__RunUARTRXService:	
  7225  011E  118A  2CEE         	ljmp	_RunUARTRXService
  7226  0120                     fp__RunUARTTXService:	
  7227  0120                     entry__RunUARTTXService:	
  7228  0120  118A  2BDF         	ljmp	_RunUARTTXService
  7229  0122                     __end_of__fptable:	
  7230  007E                     btemp	set	126	;btemp
  7231  007E                     wtemp	set	126
  7232  007E                     wtemp0	set	126
  7233  0080                     wtemp1	set	128
  7234  0082                     wtemp2	set	130
  7235  0084                     wtemp3	set	132
  7236  0086                     wtemp4	set	134
  7237  0088                     wtemp5	set	136
  7238  007F                     wtemp6	set	127
  7239  007E                     ttemp	set	126
  7240  007E                     ttemp0	set	126
  7241  0081                     ttemp1	set	129
  7242  0084                     ttemp2	set	132
  7243  0087                     ttemp3	set	135
  7244  007F                     ttemp4	set	127
  7245  007E                     ltemp	set	126
  7246  007E                     ltemp0	set	126
  7247  0082                     ltemp1	set	130
  7248  0086                     ltemp2	set	134
  7249  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    50
    Data        9
    BSS         145
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     46      80
    BANK1            80      0      71
    BANK2            80      0      48

Pointer List with Targets:

    ES_PostToService$1300	const PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    ES_Run$1294	const PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    ES_Timer_RTI_Resp$1262	const PTR FTN(struct ES_Event_t,)unsigned char  size(1) Largest target is 1
		 -> PostPACSystemService(), PostUARTTXService(), PostUARTRXService(), Absolute function(), 

    ES_PostToService$1259	const PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    ES_Run$1253	const PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    SPIBuffer	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), responseBytes(BANK0[3]), responseBuffer(BANK1[6]), statusBuffer(BANK1[6]), 

    sp__RX_getResponseBuffer	PTR inline unsigned char  size(1) Largest target is 6
		 -> responseBuffer(BANK1[6]), 

    sp__RX_getStatusBuffer	PTR inline unsigned char  size(1) Largest target is 6
		 -> statusBuffer(BANK1[6]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [8] size(1) Largest target is 1
		 -> PostPACSystemService(), PostUARTTXService(), PostUARTRXService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(1) Largest target is 3
		 -> ES_Run@ThisEvent(BANK1[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    S108$pMem	PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK2[12]), 

    S57$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(1) Largest target is 3
		 -> RunPACSystemService(), RunSPIService(), RunUARTTXService(), RunUARTRXService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(1) Largest target is 3
		 -> RunPACSystemService(), RunSPIService(), RunUARTTXService(), RunUARTRXService(), 

    S57$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> InitPACSystemService(), InitSPIService(), InitUARTTXService(), InitUARTRXService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> InitPACSystemService(), InitSPIService(), InitUARTTXService(), InitUARTRXService(), 

    ES_EventList	const PTR FTN()unsigned char [3] size(1) Largest target is 1
		 -> CheckSPIEvent(), CheckUARTTXEvent(), CheckUARTRXEvent(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_UARTRXIntResponse
    _UARTRXIntResponse->i1___bmul
    _SPIIntResponse->_RX_getResponseBuffer
    _SPIIntResponse->_RX_getStatusBuffer
    _RX_getStatusBuffer->i1___bmul
    _RX_getResponseBuffer->i1___bmul

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunUARTRXService
    _RunUARTTXService->_retrySend
    _retrySend->_ES_PostToService
    _RunUARTRXService->_ES_PostToService
    _RunPACSystemService->_ES_Timer_InitTimer
    _ES_Timer_RTI_Resp->_PostPACSystemService
    _ES_Timer_RTI_Resp->_PostUARTRXService
    _ES_Timer_RTI_Resp->_PostUARTTXService
    _PostUARTTXService->_ES_PostToService
    _PostUARTRXService->_ES_PostToService
    _PostPACSystemService->_ES_PostToService
    _ES_DeQueue->___bmul
    _CheckUARTTXEvent->_ES_PostToService
    _CheckUARTRXEvent->_ES_PostToService
    _CheckSPIEvent->_ES_PostToService
    _ES_Initialize->_InitPACSystemService
    _ES_Initialize->_InitSPIService
    _ES_Initialize->_InitUARTRXService
    _ES_Initialize->_InitUARTTXService
    _InitUARTTXService->_ES_PostToService
    _InitUARTRXService->_ES_PostToService
    _InitSPIService->_ES_PostToService
    _InitPACSystemService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___bmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   33184
                                             44 BANK0      2     2      0
                      _ES_Initialize
                             _ES_Run
                         _USART_Init
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               3     3      0   23361
                                             41 BANK0      3     3      0
                      _CheckSPIEvent
                   _CheckUARTRXEvent
                   _CheckUARTTXEvent
                         _ES_DeQueue
                     _ES_GetMSBitSet
                  _ES_Timer_RTI_Resp
                     _IsTimerPending
                _RunPACSystemService
                      _RunSPIService
                   _RunUARTRXService
                   _RunUARTTXService
 ---------------------------------------------------------------------------------
 (2) _RunUARTTXService                                    12     9      3    3307
                                             22 BANK0     12     9      3
                 _ES_Timer_InitTimer
                _TX_appendXBeePacket
                 _TX_clearXBeePacket
                     _TX_getChecksum
                          _retrySend
 ---------------------------------------------------------------------------------
 (3) _retrySend                                            4     4      0    2332
                                             18 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _TX_getChecksum                                       3     3      0      70
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _TX_clearXBeePacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TX_appendXBeePacket                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _RunUARTRXService                                    23    20      3    3854
                                             18 BANK0     23    20      3
                   _ES_PostToService
                 _ES_Timer_InitTimer
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _RunSPIService                                        6     3      3      99
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _RunPACSystemService                                  7     4      3     656
                                              4 BANK0      7     4      3
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_InitTimer                                   4     2      2     512
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _IsTimerPending                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_RTI_Resp                                    3     3      0    7155
                                             21 BANK0      3     3      0
                   Absolute function *
                     _ES_GetMSBitSet
               _PostPACSystemService *
                  _PostUARTRXService *
                  _PostUARTTXService *
 ---------------------------------------------------------------------------------
 (3) _PostUARTTXService                                    3     0      3    2307
                                             18 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PostUARTRXService                                    3     0      3    2307
                                             18 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PostPACSystemService                                 3     0      3    2360
                                             18 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _ES_GetMSBitSet                                       7     7      0     181
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     9      1    1036
                                              4 BANK0     10     9      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _CheckUARTTXEvent                                     4     4      0    2332
                                             18 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _CheckUARTRXEvent                                     4     4      0    2332
                                             18 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _CheckSPIEvent                                        5     5      0    2332
                                             18 BANK0      5     5      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        4     4      0    9777
                                             23 BANK0      3     3      0
                       _ES_InitQueue
                  _ES_Sys_Timer_Init
               _InitPACSystemService *
                     _InitSPIService *
                  _InitUARTRXService *
                  _InitUARTTXService *
 ---------------------------------------------------------------------------------
 (2) _InitUARTTXService                                    5     4      1    2330
                                             18 BANK0      5     4      1
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitUARTRXService                                    5     4      1    2330
                                             18 BANK0      5     4      1
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitSPIService                                       5     4      1    2330
                                             18 BANK0      5     4      1
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitPACSystemService                                 5     4      1    2383
                                             18 BANK0      5     4      1
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_PostToService                                     5     2      3    2285
                                             13 BANK0      5     2      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (5) _ES_EnQueueFIFO                                       9     6      3    1123
                                              4 BANK0      9     6      3
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     615
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_Sys_Timer_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  5     5      0     597
                                              8 COMMON     5     5      0
                     _SPIIntResponse
                  _UARTRXIntResponse
                  _UARTTXIntResponse
 ---------------------------------------------------------------------------------
 (8) _UARTTXIntResponse                                    1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _UARTRXIntResponse                                    4     4      0     258
                                              4 COMMON     4     4      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (8) _SPIIntResponse                                       2     2      0     339
                                              5 COMMON     2     2      0
              _RX_clearResponseReady
               _RX_getResponseBuffer
                 _RX_getStatusBuffer
                _RX_newResponseReady
 ---------------------------------------------------------------------------------
 (9) _RX_newResponseReady                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _RX_getStatusBuffer                                   1     1      0     125
                                              4 COMMON     1     1      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (9) _RX_getResponseBuffer                                 1     1      0     125
                                              4 COMMON     1     1      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (9) i1___bmul                                             4     3      1     125
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (9) _RX_clearResponseReady                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Sys_Timer_Init
     _InitPACSystemService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
     _InitSPIService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
     _InitUARTRXService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
     _InitUARTTXService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
   _ES_Run
     _CheckSPIEvent
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
     _CheckUARTRXEvent
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
     _CheckUARTTXEvent
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
     _ES_DeQueue
       ___bmul
     _ES_GetMSBitSet
     _ES_Timer_RTI_Resp
       Absolute function(Fake) *
       _ES_GetMSBitSet *
       _PostPACSystemService *
         _ES_PostToService
           _ES_EnQueueFIFO
             ___bmul
       _PostUARTRXService *
         _ES_PostToService
           _ES_EnQueueFIFO
             ___bmul
       _PostUARTTXService *
         _ES_PostToService
           _ES_EnQueueFIFO
             ___bmul
     _IsTimerPending
     _RunPACSystemService
       _ES_Timer_InitTimer
     _RunSPIService
     _RunUARTRXService
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
       _ES_Timer_InitTimer
       ___bmul
     _RunUARTTXService
       _ES_Timer_InitTimer
       _TX_appendXBeePacket
       _TX_clearXBeePacket
       _TX_getChecksum
       _retrySend
         _ES_PostToService
           _ES_EnQueueFIFO
             ___bmul
   _USART_Init

 _ISR (ROOT)
   _SPIIntResponse
     _RX_clearResponseReady
     _RX_getResponseBuffer
       i1___bmul
     _RX_getStatusBuffer
       i1___bmul
     _RX_newResponseReady
   _UARTRXIntResponse
     i1___bmul
   _UARTTXIntResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0      30       7       60.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      47       5       88.8%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2E      50       3      100.0%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D5      10        0.0%
ABS                  0      0      D5       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu Feb 04 21:25:22 2016

                                 pc 0002                      ___bmul@product 0022  
        __size_of_ES_Sys_Timer_Init 0021                         __CFG_CP$OFF 0000  
                                _BF 04A0                                  fsr 0004  
            ?_RX_clearResponseReady 0070                                 l406 03CA  
                               l354 00A2                                 l552 048D  
                               l536 043C                                 l595 001B  
             __end_of_ES_Initialize 07A3                                 _GIE 005F  
                               _RC0 0038                                 _RC3 003B  
                               _RC7 003F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                      __CFG_CPD$OFF 0000                                 _ISR 0E77  
                               _PSA 040B                  SPI_SM@currentState 0052  
                               fsr0 0004                                 indf 0000  
                      __CFG_FOSC$HS 0000             ES_EnQueueFIFO@Event2Add 0024  
            __end_of_InitSPIService 03A2                   ?_ES_PostToService 002D  
                              ?_ISR 0070                     ?_SPIIntResponse 0070  
                              l2312 02A3                                l2242 065A  
                              l2316 02A8                                l2308 0276  
                              l2246 065F                                l2510 04F2  
                              l3206 009A                                l2264 0718  
                              l2504 034D                                l2520 0516  
                              l2600 03E3                                l2370 0746  
                              l3234 04B1                                l2610 0406  
                              l2532 0546                                l2372 0755  
                              l2380 0008                                l2604 03E8  
                              l2702 06A8                                l2710 06C1  
                              l2526 053F                                l2550 05A3  
                              l2382 0011                                l2720 020C  
                              l2536 0549                                l2384 0014  
                              l2376 0000                                l2640 0441  
                              l2730 025F                                l2562 05E1  
                              l2386 0018                                l2378 0006  
                              l2708 06B4                                l2660 0488  
                              l2652 0462                                l2494 0338  
                              l2574 0611                                l2646 0453  
                              l2760 03B6                                l2568 060A  
                              l2592 0645                                l2664 0490  
                              l2672 04C0                                l2912 0155  
                              l2770 03C0                                l2498 0343  
                              l2586 0637                                l2578 0614  
                              l2594 064D                                l2658 0485  
                              l2674 04CE                                l2930 019D  
                              l2756 03B3                                l2668 04AA  
                              l2924 0185                                l2940 01B6  
                              l2766 03BD                                l2694 0690  
                              l2678 04D3                                l2942 01EF  
                              l2918 016D                                l2776 03C7  
                              l2696 0697                                l2944 01F1  
                              l2938 01DE                                _ANS4 08F4  
                              _ANS7 08F7                                _ANS9 08F9  
                              _BRGH 04C2                                _T0IE 005D  
                              _T0IF 005A                                _CREN 00C4  
                              _T0CS 040D                                u1205 0293  
                              u1500 03F4                                u1415 05D8  
                              u1184 0286                                u1185 0284  
                              u1490 03F3                                _PEIE 005E  
                              _RCIE 0465                                _RCIF 0065  
                              _TMR0 0001                                _SPEN 00C7  
                ??_ES_PostToService 0030                                _TXIE 0464  
                              _TXEN 04C5                                _TXIF 0064  
                              _SYNC 04C4                          _XBeePacket 00C4  
                              _main 0078                         ?_ES_DeQueue 0024  
                              _time 00D5                                btemp 007E  
                     main@ErrorType 004D                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                       __CFG_IESO$OFF 0000  
                      _statusBuffer 00E1                   ___bmul@multiplier 0023  
                     __CFG_MCLRE$ON 0000              ??_RX_getResponseBuffer 0074  
                             ??_ISR 0078                UART_TX_SM@MyPriority 0055  
        __size_of_ES_Timer_RTI_Resp 006F                  ES_Run@HighestPrior 004B  
                  _CheckUARTRXEvent 02C5                    _CheckUARTTXEvent 02DB  
                      _superPACAddr 00D3                               ?_main 0070  
                             _ANS11 08FB                               _BRG16 04DB  
                     __CFG_WDTE$OFF 0000                               i1l700 0099  
                             i1l445 0004                               i1l701 00A3  
                             i1l702 00AD                               i1l470 001E  
                             i1l703 00B8                               i1l463 0080  
                             i1l471 002A                               i1l448 0003  
                             i1l704 00BB                               i1l480 0079  
                             i1l472 0031                               i1l464 0007  
                             i1l705 00D0                               i1l481 007A  
                             i1l473 0032                               i1l465 0010  
                             i1l466 0091                               i1l482 007E  
                             i1l474 004F                               i1l475 0061  
                             i1l467 0011                               i1l483 0091  
                             i1l476 0062                               i1l468 001B  
                             i1l477 007C                               i1l469 001D  
                             i1l478 006C                               i1l479 0075  
                             i1l690 0037                               i1l586 000E  
                             i1l691 0095                               i1l587 001A  
                             i1l692 0057                               i1l588 001A  
                             i1l685 00D0                               i1l693 004F  
                             i1l686 00BD                               i1l694 0094  
                             i1l695 0082                               i1l687 000D  
                             i1l696 0077                               i1l688 0025  
                             i1l689 0096                               i1l697 0081  
                             i1l698 0093                               i1l699 00CE  
                             _RCREG 001A                               _SPBRG 0099  
                             _PORTC 0007                               _SSPIE 0463  
                             _SSPIF 0063                               _TXREG 0019  
                             _Ready 0059                      __CFG_FCMEN$OFF 0000  
            ES_EnQueueFIFO@saveCrit 0029                     ?_InitSPIService 0032  
                             _index 0061                    ??_TX_getChecksum 0020  
                             fpbase 0105                    __end_ofi1___bmul 0FEE  
                    __CFG_BOREN$OFF 0000                               pclath 000A  
       __end_of_TX_appendXBeePacket 04EE                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080          __end_of_TX_clearXBeePacket 0740  
       RunUARTRXService@ReturnEvent 003C                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                _RX_getStatusBuffer 0FF7                         ?_USART_Init 0070  
        PACSystemService@MyPriority 0050                     __initialization 0013  
            ES_GetMSBitSet@LoopCntr 0026                        __end_of_main 00A3  
               ?_RX_getStatusBuffer 0070           ES_Timer_RTI_Resp@NewEvent 00CE  
               _RX_newResponseReady 0000        ES_EnQueueFIFO@InsertionPoint 002A  
               __end_of_EventQueues 0065                              ??_main 004C  
               __size_of_ES_DeQueue 005E                     _Nybble2MSBitNum 0046  
                 RunUARTRXService@i 0047                        _writeRXIndex 006A  
             __end_of_RunSPIService 0361            RunSPIService@ReturnEvent 0023  
              ??_RX_getStatusBuffer 0074              __size_of_CheckSPIEvent 001B  
                  fp__CheckSPIEvent 010E                ?_RX_newResponseReady 0070  
    UARTRXIntResponse@bodyByteCount 0053                          _MyPriority 0057  
                  ??_ES_GetMSBitSet 0020             fp__InitPACSystemService 010C  
                            i1l3000 0099                              i1l3010 00B3  
                            i1l3002 009E                              i1l3012 00B8  
                            i1l3004 00A3                              i1l3020 0007  
                            i1l3014 00BC                              i1l3006 00A8  
                            i1l3030 001E                              i1l3022 000D  
                            i1l3008 00AD                              i1l3016 00BD  
                            i1l3040 0038                              i1l3032 0028  
                            i1l3024 0011                              i1l3050 005C  
                            i1l3042 004A                              i1l3034 002A  
                            i1l3026 0016                              i1l3018 0000  
                            i1l3060 0075                              i1l3052 0062  
                            i1l3044 004F                              i1l3036 002C  
                            i1l3028 001B                              i1l3062 0076  
                            i1l3054 006C                              i1l3046 0055  
                            i1l3038 0032                              i1l3070 0000  
                            i1l3064 007A                              i1l3056 0071  
                            i1l3048 005B                              i1l3072 0008  
                            i1l3160 0FD0                              i1l3152 0F31  
                            i1l3066 007F                              i1l3058 0073  
                            i1l3074 000E                              i1l3068 0080  
                            i1l3076 0015                              i1l3156 0FB3  
                            i1l3148 0E7F                              i1l2394 0FE0  
                            i1l2398 0FE5                              i1l2960 0014  
                            i1l2952 0000                              i1l2794 0000  
                            i1l2970 0045                              i1l2962 0025  
                            i1l2954 0006                              i1l2796 0004  
                            i1l2980 0051                              i1l2972 004A  
                            i1l2964 002E                              i1l2956 000D  
                            i1l2798 0000                              i1l2990 0073  
                            i1l2974 004C                              i1l2982 0057  
                            i1l2966 0037                              i1l2958 000F  
                            i1l2992 0077                              i1l2984 0060  
                            i1l2976 004F                              i1l2968 0040  
                            i1l2994 007C                              i1l2986 0068  
                            i1l2978 0050                              i1l2988 0070  
                            i1l2996 0082                              i1l2998 0096  
                            _INTCON 000B                              u190_20 000D  
                            u190_21 000C                              u183_20 0006  
                            u191_20 0016                              u183_21 0005  
                            u191_21 0015                              u184_20 0014  
                            u192_20 0028                              u184_21 0013  
                            u192_21 0027                              u185_20 002E  
                            u193_20 0038                              u185_21 002D  
                            u193_21 0037                              u186_20 0040  
                            u194_20 005B                              u186_21 003F  
                            u194_21 005A                              u187_20 0045  
                            u195_20 006B                              u187_21 0044  
                            u195_21 006A                              u188_20 0060  
                            u196_20 0071                              u188_21 005F  
                            u196_21 0070                              u189_20 0068  
                            u197_20 0008                              u189_21 0067  
                            u197_21 0007                              _OSCCON 008F  
                            _ES_Run 0154                              _SPBRGH 009A  
                            _TRISC0 0438                              _TRISB4 0434  
                            _TRISC3 043B                              _TRISB6 0436  
                            _TRISC6 043E                              _TRISC7 043F  
                            _SSPCON 0014                              _SSPBUF 0013  
                  ??_IsTimerPending 0020                    __end_of__fptable 0122  
                            _RXFlag 0058                    ??_ES_EnQueueFIFO 0027  
                    _Timer2PostFunc 006D                      __CFG_PWRTE$OFF 0000  
                            _Queue0 0120                              _Queue1 012C  
                            _Queue2 0138                              _Queue3 0144  
                            ___bmul 0656                              _length 0062  
       __size_of_ES_Timer_InitTimer 0027                   ?_RunUARTRXService 0032  
         ES_Timer_InitTimer@NewTime 0020                  ??_RunUARTRXService 0035  
                 ?_RunUARTTXService 0036                              fptable 0100  
                  _sendCompleteFlag 0069                              fptotal 001C  
            ES_InitQueue@pThisQueue 0023                              saved_w 007E  
                ??_RunUARTTXService 0039                 __size_of_USART_Init 001A  
              _newResponseAvailable 0064               ??_RX_newResponseReady 0070  
              ES_DeQueue@pThisQueue 002D             ES_GetMSBitSet@Val2Check 0023  
            UART_TX_SM@currentState 0056             __end_of__initialization 003D  
            __end_of_Timer2PostFunc 0075                 ___bmul@multiplicand 0020  
                       _EventQueues 005D                      __pcstackCOMMON 0070  
                     _CheckSPIEvent 02AA        __end_of_PostPACSystemService 012C  
                      __pidataBANK0 0000                        __pidataBANK1 0000  
                     ?_ES_InitQueue 0020             ??_RX_clearResponseReady 0070  
           __end_of_Nybble2MSBitNum 0055                   _PostUARTRXService 012C  
                     _readRespIndex 0067                     _TMR_ActiveFlags 005B  
      RunPACSystemService@ThisEvent 0024                           ?i1___bmul 0070  
                ?_PostUARTRXService 0032                   _PostUARTTXService 0136  
        PostUARTTXService@ThisEvent 0032             ES_GetMSBitSet@ReturnVal 0024  
               fp__CheckUARTRXEvent 0110           RunUARTTXService@ThisEvent 0036  
               fp__CheckUARTTXEvent 0112                    ??_SPIIntResponse 0075  
         CheckUARTRXEvent@CommEvent 0033                  ?_PostUARTTXService 0032  
                     _readStatIndex 0068                      _TMR_TimerArray 00B4  
               ??_PostUARTRXService 0035                    i1___bmul@product 0073  
     __size_of_InitPACSystemService 0014                        _hasHeartbeat 0060  
                 _UARTRXIntResponse 0000            ES_EnQueueFIFO@pThisQueue 002C  
       __end_of_RunPACSystemService 06CA                 ??_PostUARTTXService 0035  
          __end_of_CheckUARTRXEvent 02DB                          __pbssBANK0 004E  
                        __pbssBANK1 00A0                          __pbssBANK2 0120  
          __end_of_CheckUARTTXEvent 02F1                  ?_UARTRXIntResponse 0070  
                           ?_ES_Run 0070                        ??_ES_DeQueue 0025  
         InitUARTTXService@Priority 0032                 ??_UARTRXIntResponse 0074  
                    ?_CheckSPIEvent 0070                          __pmaintext 0078  
         __size_of_ES_PostToService 0024                             ?___bmul 0020  
            entry__CheckUARTRXEvent 0110                      ??_ES_InitQueue 0021  
         __end_of_PostUARTRXService 0136      RunPACSystemService@ReturnEvent 0028  
            entry__CheckUARTTXEvent 0112                          __pintentry 0004  
         __end_of_PostUARTTXService 0140                          ??i1___bmul 0071  
                  ??_InitSPIService 0033                  __size_of_retrySend 0000  
                __end_of_ES_DeQueue 034F           __end_of_UARTRXIntResponse 0000  
                           _SSPSTAT 0094                          __stringtab 0040  
                           _TXError 00D7                     __size_of_ES_Run 00A9  
      InitPACSystemService@Priority 0032              __size_of_ES_Initialize 004A  
                      ??_USART_Init 0020                     __size_of___bmul 0012  
                _TX_clearXBeePacket 073A       __size_of_RX_getResponseBuffer 0009  
             ES_Timer_InitTimer@Num 0023                          _newRequest 0063  
                           __ptext1 07D9                             __ptext2 0154  
                           __ptext3 03DF                             __ptext4 0000  
                           __ptext5 0740                             __ptext6 073A  
                           __ptext7 04DA                             __ptext8 04EE  
                           __ptext9 0357                        __size_of_ISR 0167  
               ?_TX_clearXBeePacket 0070                 entry__CheckSPIEvent 010E  
               i1___bmul@multiplier 0072                     ES_Run@ThisEvent 00DE  
         UARTRXIntResponse@checksum 0054                  __end_of_USART_Init 07F3  
                           clrloop0 07F4                _PostPACSystemService 0122  
                 _UARTTXIntResponse 0000                end_of_initialization 003D  
                 _InitUARTRXService 03A2                  ?_UARTTXIntResponse 0070  
                ?_InitUARTRXService 0032                   _InitUARTTXService 0361  
      ES_PostToService@WhichService 0031                     ??_CheckSPIEvent 0032  
              ??_TX_clearXBeePacket 0020                   __end_of_retrySend 0000  
                ?_InitUARTTXService 0032        __size_of_TX_appendXBeePacket 0014  
               ??_UARTTXIntResponse 0070                 ??_InitUARTRXService 0033  
        __size_of_PostUARTRXService 000A   UARTRXIntResponse@currentByteIndex 007D  
               ??_InitUARTTXService 0033          __size_of_PostUARTTXService 000A  
           RunUARTRXService@TXEvent 0044                       _ES_Initialize 0759  
                         _SPIBuffer 005A                _RunUARTTXService$644 0040  
        __size_of_UARTRXIntResponse 0000           __end_of_UARTTXIntResponse 0000  
              __end_of_ES_EventList 0078           __end_of_InitUARTRXService 03DF  
       __size_of_RX_getStatusBuffer 0009               ?_PostPACSystemService 0032  
              __end_of_ES_InitQueue 07B8                      ES_Initialize@i 0039  
         __size_of_RunUARTRXService 0168           __end_of_InitUARTTXService 0377  
         __size_of_RunUARTTXService 00FB                      __end_of_ES_Run 01FD  
           __size_of_TX_getChecksum 0019                    _ES_PostToService 0668  
           RunUARTRXService@msgAddr 003F              RunSPIService@ThisEvent 0020  
        __end_of_ES_Timer_InitTimer 06F1              __size_of_RunSPIService 000A  
                  fp__RunSPIService 011C                __end_of_ServDescList 006D  
                    __end_of___bmul 0668      __size_of_RX_clearResponseReady 0000  
     __end_of_RX_clearResponseReady 0000           entry__RunPACSystemService 011A  
       __end_of_RX_newResponseReady 0000                      ?_ES_Initialize 0070  
                 __size_ofi1___bmul 0010                 start_initialization 0013  
                       __end_of_ISR 0FDE                   ?_CheckUARTRXEvent 0070  
  ES_Timer_RTI_Resp@NeedsProcessing 004E                   ?_CheckUARTTXEvent 0070  
                          ??_ES_Run 0049                  ??_CheckUARTRXEvent 0032  
                         _TickCount 005C                  ??_CheckUARTTXEvent 0032  
            fp__RunPACSystemService 011A             __size_of_ES_GetMSBitSet 003E  
      __end_of_InitPACSystemService 0154                            ??___bmul 0021  
                       __pdataBANK0 006D                         __pdataBANK1 00E1  
           __size_of_IsTimerPending 0008             __size_of_ES_EnQueueFIFO 0049  
        PostUARTRXService@ThisEvent 0032       PostPACSystemService@ThisEvent 0032  
         RunUARTRXService@ThisEvent 0032               RunUARTRXService@i_541 0048  
                       __pbssCOMMON 007D                           ___latbits 0001  
                     __pcstackBANK0 0020          InitUARTTXService@ThisEvent 0034  
            ??_PostPACSystemService 0035          __size_of_UARTTXIntResponse 0000  
                ES_InitQueue@pBlock 0022                       _RunSPIService 0357  
                 __size_of__fptable 0022          __size_of_InitUARTRXService 003D  
                    _responseBuffer 00D8          __size_of_InitUARTTXService 0016  
                      _currentState 005F        __size_of_RunPACSystemService 003E  
         RunUARTRXService@addrEvent 0041                           __pfunctab 0100  
            UART_TX_SM@superPACAddr 00D1                     ??_ES_Initialize 0037  
          ES_PostToService@TheEvent 002D                           __pstrings 0040  
             __size_of_ES_InitQueue 0015                      ?_RunSPIService 0020  
               _TX_appendXBeePacket 04DA                fp__PostUARTRXService 0116  
                         _radioPing 0065        __end_of_RX_getResponseBuffer 0FF7  
                  _RunUARTRXService 04EE                ES_Initialize@NewRate 0070  
              fp__PostUARTTXService 0114           ES_GetMSBitSet@Nybble2Test 0025  
                 interrupt_function 0004             __size_of_SPIIntResponse 0000  
                  _RunUARTTXService 03DF                           clear_ram0 07F3  
                    _writeRespIndex 006B               i1___bmul@multiplicand 0070  
                    _TX_getChecksum 0740                ?_TX_appendXBeePacket 0070  
                      _ES_EventList 0075                           _retrySend 0000  
                      _ES_InitQueue 07A3                      _writeStatIndex 006C  
                          i1___bmul 0FDE                         __stringbase 0045  
                          _RXBuffer 00A0                ES_EnQueueFIFO@pBlock 002B  
                  SPI_SM@MyPriority 0051            __end_of_ES_PostToService 068C  
     InitPACSystemService@ThisEvent 0034          TX_appendXBeePacket@newByte 0021  
              _InitPACSystemService 0140                      _BitNum2SetMask 0055  
                      _ServDescList 0065             __size_of_InitSPIService 002B  
                 fp__InitSPIService 010A         RunUARTTXService@ReturnEvent 003D  
            __end_of_TX_getChecksum 0759                 entry__RunSPIService 011C  
       __size_of_TX_clearXBeePacket 0006               ??_TX_appendXBeePacket 0020  
             __end_of_CheckSPIEvent 02C5                      _ES_GetMSBitSet 026C  
                  _colorRequestData 005D                         _readRXIndex 0066  
                        ?_retrySend 0070                      _IsTimerPending 034F  
                    _ES_EnQueueFIFO 06F1                   _ES_Sys_Timer_Init 07B8  
                __end_of__stringtab 0046                       _responseBytes 006D  
                   ??_RunSPIService 0023                  ?_ES_Sys_Timer_Init 0070  
                          __fptable 0100          __end_of_RX_getStatusBuffer 1000  
                _ES_Timer_InitTimer 06CA                  ES_DeQueue@saveCrit 002A  
            __end_of_BitNum2SetMask 005D                            __ptext10 068C  
                          __ptext11 06CA                            __ptext20 02C5  
                          __ptext12 034F                            __ptext21 02AA  
                          __ptext13 01FD                            __ptext30 07B8  
                          __ptext22 0759                            __ptext14 0122  
                          __ptext31 07A3                            __ptext23 0140  
                          __ptext15 012C                            __ptext40 0000  
                          __ptext32 0E77                            __ptext24 0377  
                          __ptext16 0136                            __ptext33 0000  
                          __ptext25 03A2                            __ptext17 026C  
                          __ptext34 0000                            __ptext26 0361  
                          __ptext18 02F1                            __ptext35 0000  
                          __ptext27 0668                            __ptext19 02DB  
                          __ptext36 0000                            __ptext28 06F1  
                          __ptext37 0FF7                            __ptext29 0656  
                          __ptext38 0FEE                            __ptext39 0FDE  
             ?_InitPACSystemService 0032                            _commOpen 005E  
               ??_ES_Sys_Timer_Init 0020                 ?_ES_Timer_InitTimer 0020  
           fp__PostPACSystemService 0118                       __size_of_main 002B  
                   ?_TX_getChecksum 0070              __end_of_ES_GetMSBitSet 02AA  
                 retrySend@LEDEvent 0033              __end_of_IsTimerPending 0357  
              fp__InitUARTRXService 0108              __end_of_ES_EnQueueFIFO 073A  
         __end_of_ES_Sys_Timer_Init 07D9                ??_ES_Timer_InitTimer 0022  
         __size_of_CheckUARTRXEvent 0016             InitSPIService@ThisEvent 0034  
              fp__InitUARTTXService 0106           __size_of_CheckUARTTXEvent 0016  
              _RX_getResponseBuffer 0FEE                   ES_DeQueue@NumLeft 002B  
                 _ES_Timer_RTI_Resp 01FD                  ?_ES_Timer_RTI_Resp 0070  
             _RX_clearResponseReady 0000                 _RunPACSystemService 068C  
             CheckSPIEvent@SPIEvent 0034        __size_of_RX_newResponseReady 0000  
               ??_ES_Timer_RTI_Resp 0035                            intlevel1 0100  
ES_Timer_RTI_Resp@NextTimer2Process 004F                      _SPIIntResponse 0000  
                        _ES_DeQueue 02F1                 fp__RunUARTRXService 011E  
                   ?_ES_GetMSBitSet 0070                ?_RunPACSystemService 0024  
                         stringcode 0040                 fp__RunUARTTXService 0120  
          UARTRXIntResponse@newByte 0077                     ?_IsTimerPending 0070  
                       ??_retrySend 0032                     ?_ES_EnQueueFIFO 0024  
         __end_of_ES_Timer_RTI_Resp 026C               ?_RX_getResponseBuffer 0070  
          __end_of_RunUARTRXService 0656              InitSPIService@Priority 0032  
            SPIIntResponse@readByte 0076                    ES_DeQueue@pBlock 002C  
          __end_of_RunUARTTXService 04DA                            stringdir 0040  
        InitUARTRXService@ThisEvent 0034                            stringtab 0040  
            ??_InitPACSystemService 0033             CheckUARTTXEvent@TXEvent 0033  
            entry__RunUARTRXService 011E              ES_DeQueue@pReturnEvent 0024  
             ES_InitQueue@BlockSize 0020              __end_of_SPIIntResponse 0000  
     __size_of_PostPACSystemService 000A                      _InitSPIService 0377  
            entry__RunUARTTXService 0120           InitUARTRXService@Priority 0032  
             ??_RunPACSystemService 0027                   TX_getChecksum@chk 0021  
                        _USART_Init 07D9                     TX_getChecksum@i 0022  
