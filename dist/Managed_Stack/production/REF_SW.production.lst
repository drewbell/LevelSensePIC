

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May  7 19:41:05 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	jmp_tab__ES_Run,global,class=ENTRY,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	functab,global,class=ENTRY,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F690 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0092                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0094                     	;# 
   125  0095                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009E                     	;# 
   135  009F                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0115                     	;# 
   142  0116                     	;# 
   143  0118                     	;# 
   144  0119                     	;# 
   145  011A                     	;# 
   146  011B                     	;# 
   147  011E                     	;# 
   148  011F                     	;# 
   149  018C                     	;# 
   150  018D                     	;# 
   151  019D                     	;# 
   152  019E                     	;# 
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000E                     	;# 
   167  000F                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0115                     	;# 
   215  0116                     	;# 
   216  0118                     	;# 
   217  0119                     	;# 
   218  011A                     	;# 
   219  011B                     	;# 
   220  011E                     	;# 
   221  011F                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  008F                     	;# 
   265  0090                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0093                     	;# 
   270  0094                     	;# 
   271  0095                     	;# 
   272  0095                     	;# 
   273  0096                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009E                     	;# 
   281  009F                     	;# 
   282  010C                     	;# 
   283  010C                     	;# 
   284  010D                     	;# 
   285  010E                     	;# 
   286  010F                     	;# 
   287  0115                     	;# 
   288  0116                     	;# 
   289  0118                     	;# 
   290  0119                     	;# 
   291  011A                     	;# 
   292  011B                     	;# 
   293  011E                     	;# 
   294  011F                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297  019D                     	;# 
   298  019E                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001C                     	;# 
   327  001D                     	;# 
   328  001E                     	;# 
   329  001F                     	;# 
   330  0081                     	;# 
   331  0085                     	;# 
   332  0086                     	;# 
   333  0087                     	;# 
   334  008C                     	;# 
   335  008D                     	;# 
   336  008E                     	;# 
   337  008F                     	;# 
   338  0090                     	;# 
   339  0092                     	;# 
   340  0093                     	;# 
   341  0093                     	;# 
   342  0093                     	;# 
   343  0094                     	;# 
   344  0095                     	;# 
   345  0095                     	;# 
   346  0096                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009A                     	;# 
   352  009B                     	;# 
   353  009E                     	;# 
   354  009F                     	;# 
   355  010C                     	;# 
   356  010C                     	;# 
   357  010D                     	;# 
   358  010E                     	;# 
   359  010F                     	;# 
   360  0115                     	;# 
   361  0116                     	;# 
   362  0118                     	;# 
   363  0119                     	;# 
   364  011A                     	;# 
   365  011B                     	;# 
   366  011E                     	;# 
   367  011F                     	;# 
   368  018C                     	;# 
   369  018D                     	;# 
   370  019D                     	;# 
   371  019E                     	;# 
   372  0000                     	;# 
   373  0001                     	;# 
   374  0002                     	;# 
   375  0003                     	;# 
   376  0004                     	;# 
   377  0005                     	;# 
   378  0006                     	;# 
   379  0007                     	;# 
   380  000A                     	;# 
   381  000B                     	;# 
   382  000C                     	;# 
   383  000D                     	;# 
   384  000E                     	;# 
   385  000E                     	;# 
   386  000F                     	;# 
   387  0010                     	;# 
   388  0011                     	;# 
   389  0012                     	;# 
   390  0013                     	;# 
   391  0014                     	;# 
   392  0015                     	;# 
   393  0015                     	;# 
   394  0016                     	;# 
   395  0017                     	;# 
   396  0018                     	;# 
   397  0019                     	;# 
   398  001A                     	;# 
   399  001C                     	;# 
   400  001D                     	;# 
   401  001E                     	;# 
   402  001F                     	;# 
   403  0081                     	;# 
   404  0085                     	;# 
   405  0086                     	;# 
   406  0087                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  008F                     	;# 
   411  0090                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0094                     	;# 
   417  0095                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0098                     	;# 
   423  0099                     	;# 
   424  009A                     	;# 
   425  009B                     	;# 
   426  009E                     	;# 
   427  009F                     	;# 
   428  010C                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  010F                     	;# 
   433  0115                     	;# 
   434  0116                     	;# 
   435  0118                     	;# 
   436  0119                     	;# 
   437  011A                     	;# 
   438  011B                     	;# 
   439  011E                     	;# 
   440  011F                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  019D                     	;# 
   444  019E                     	;# 
   445  0000                     	;# 
   446  0001                     	;# 
   447  0002                     	;# 
   448  0003                     	;# 
   449  0004                     	;# 
   450  0005                     	;# 
   451  0006                     	;# 
   452  0007                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000D                     	;# 
   457  000E                     	;# 
   458  000E                     	;# 
   459  000F                     	;# 
   460  0010                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0014                     	;# 
   465  0015                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001C                     	;# 
   473  001D                     	;# 
   474  001E                     	;# 
   475  001F                     	;# 
   476  0081                     	;# 
   477  0085                     	;# 
   478  0086                     	;# 
   479  0087                     	;# 
   480  008C                     	;# 
   481  008D                     	;# 
   482  008E                     	;# 
   483  008F                     	;# 
   484  0090                     	;# 
   485  0092                     	;# 
   486  0093                     	;# 
   487  0093                     	;# 
   488  0093                     	;# 
   489  0094                     	;# 
   490  0095                     	;# 
   491  0095                     	;# 
   492  0096                     	;# 
   493  0096                     	;# 
   494  0097                     	;# 
   495  0098                     	;# 
   496  0099                     	;# 
   497  009A                     	;# 
   498  009B                     	;# 
   499  009E                     	;# 
   500  009F                     	;# 
   501  010C                     	;# 
   502  010C                     	;# 
   503  010D                     	;# 
   504  010E                     	;# 
   505  010F                     	;# 
   506  0115                     	;# 
   507  0116                     	;# 
   508  0118                     	;# 
   509  0119                     	;# 
   510  011A                     	;# 
   511  011B                     	;# 
   512  011E                     	;# 
   513  011F                     	;# 
   514  018C                     	;# 
   515  018D                     	;# 
   516  019D                     	;# 
   517  019E                     	;# 
   518  0000                     	;# 
   519  0001                     	;# 
   520  0002                     	;# 
   521  0003                     	;# 
   522  0004                     	;# 
   523  0005                     	;# 
   524  0006                     	;# 
   525  0007                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000D                     	;# 
   530  000E                     	;# 
   531  000E                     	;# 
   532  000F                     	;# 
   533  0010                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0013                     	;# 
   537  0014                     	;# 
   538  0015                     	;# 
   539  0015                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  001A                     	;# 
   545  001C                     	;# 
   546  001D                     	;# 
   547  001E                     	;# 
   548  001F                     	;# 
   549  0081                     	;# 
   550  0085                     	;# 
   551  0086                     	;# 
   552  0087                     	;# 
   553  008C                     	;# 
   554  008D                     	;# 
   555  008E                     	;# 
   556  008F                     	;# 
   557  0090                     	;# 
   558  0092                     	;# 
   559  0093                     	;# 
   560  0093                     	;# 
   561  0093                     	;# 
   562  0094                     	;# 
   563  0095                     	;# 
   564  0095                     	;# 
   565  0096                     	;# 
   566  0096                     	;# 
   567  0097                     	;# 
   568  0098                     	;# 
   569  0099                     	;# 
   570  009A                     	;# 
   571  009B                     	;# 
   572  009E                     	;# 
   573  009F                     	;# 
   574  010C                     	;# 
   575  010C                     	;# 
   576  010D                     	;# 
   577  010E                     	;# 
   578  010F                     	;# 
   579  0115                     	;# 
   580  0116                     	;# 
   581  0118                     	;# 
   582  0119                     	;# 
   583  011A                     	;# 
   584  011B                     	;# 
   585  011E                     	;# 
   586  011F                     	;# 
   587  018C                     	;# 
   588  018D                     	;# 
   589  019D                     	;# 
   590  019E                     	;# 
   591  0000                     	;# 
   592  0001                     	;# 
   593  0002                     	;# 
   594  0003                     	;# 
   595  0004                     	;# 
   596  0005                     	;# 
   597  0006                     	;# 
   598  0007                     	;# 
   599  000A                     	;# 
   600  000B                     	;# 
   601  000C                     	;# 
   602  000D                     	;# 
   603  000E                     	;# 
   604  000E                     	;# 
   605  000F                     	;# 
   606  0010                     	;# 
   607  0011                     	;# 
   608  0012                     	;# 
   609  0013                     	;# 
   610  0014                     	;# 
   611  0015                     	;# 
   612  0015                     	;# 
   613  0016                     	;# 
   614  0017                     	;# 
   615  0018                     	;# 
   616  0019                     	;# 
   617  001A                     	;# 
   618  001C                     	;# 
   619  001D                     	;# 
   620  001E                     	;# 
   621  001F                     	;# 
   622  0081                     	;# 
   623  0085                     	;# 
   624  0086                     	;# 
   625  0087                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  008F                     	;# 
   630  0090                     	;# 
   631  0092                     	;# 
   632  0093                     	;# 
   633  0093                     	;# 
   634  0093                     	;# 
   635  0094                     	;# 
   636  0095                     	;# 
   637  0095                     	;# 
   638  0096                     	;# 
   639  0096                     	;# 
   640  0097                     	;# 
   641  0098                     	;# 
   642  0099                     	;# 
   643  009A                     	;# 
   644  009B                     	;# 
   645  009E                     	;# 
   646  009F                     	;# 
   647  010C                     	;# 
   648  010C                     	;# 
   649  010D                     	;# 
   650  010E                     	;# 
   651  010F                     	;# 
   652  0115                     	;# 
   653  0116                     	;# 
   654  0118                     	;# 
   655  0119                     	;# 
   656  011A                     	;# 
   657  011B                     	;# 
   658  011E                     	;# 
   659  011F                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  019D                     	;# 
   663  019E                     	;# 
   664  0000                     	;# 
   665  0001                     	;# 
   666  0002                     	;# 
   667  0003                     	;# 
   668  0004                     	;# 
   669  0005                     	;# 
   670  0006                     	;# 
   671  0007                     	;# 
   672  000A                     	;# 
   673  000B                     	;# 
   674  000C                     	;# 
   675  000D                     	;# 
   676  000E                     	;# 
   677  000E                     	;# 
   678  000F                     	;# 
   679  0010                     	;# 
   680  0011                     	;# 
   681  0012                     	;# 
   682  0013                     	;# 
   683  0014                     	;# 
   684  0015                     	;# 
   685  0015                     	;# 
   686  0016                     	;# 
   687  0017                     	;# 
   688  0018                     	;# 
   689  0019                     	;# 
   690  001A                     	;# 
   691  001C                     	;# 
   692  001D                     	;# 
   693  001E                     	;# 
   694  001F                     	;# 
   695  0081                     	;# 
   696  0085                     	;# 
   697  0086                     	;# 
   698  0087                     	;# 
   699  008C                     	;# 
   700  008D                     	;# 
   701  008E                     	;# 
   702  008F                     	;# 
   703  0090                     	;# 
   704  0092                     	;# 
   705  0093                     	;# 
   706  0093                     	;# 
   707  0093                     	;# 
   708  0094                     	;# 
   709  0095                     	;# 
   710  0095                     	;# 
   711  0096                     	;# 
   712  0096                     	;# 
   713  0097                     	;# 
   714  0098                     	;# 
   715  0099                     	;# 
   716  009A                     	;# 
   717  009B                     	;# 
   718  009E                     	;# 
   719  009F                     	;# 
   720  010C                     	;# 
   721  010C                     	;# 
   722  010D                     	;# 
   723  010E                     	;# 
   724  010F                     	;# 
   725  0115                     	;# 
   726  0116                     	;# 
   727  0118                     	;# 
   728  0119                     	;# 
   729  011A                     	;# 
   730  011B                     	;# 
   731  011E                     	;# 
   732  011F                     	;# 
   733  018C                     	;# 
   734  018D                     	;# 
   735  019D                     	;# 
   736  019E                     	;# 
   737  0000                     	;# 
   738  0001                     	;# 
   739  0002                     	;# 
   740  0003                     	;# 
   741  0004                     	;# 
   742  0005                     	;# 
   743  0006                     	;# 
   744  0007                     	;# 
   745  000A                     	;# 
   746  000B                     	;# 
   747  000C                     	;# 
   748  000D                     	;# 
   749  000E                     	;# 
   750  000E                     	;# 
   751  000F                     	;# 
   752  0010                     	;# 
   753  0011                     	;# 
   754  0012                     	;# 
   755  0013                     	;# 
   756  0014                     	;# 
   757  0015                     	;# 
   758  0015                     	;# 
   759  0016                     	;# 
   760  0017                     	;# 
   761  0018                     	;# 
   762  0019                     	;# 
   763  001A                     	;# 
   764  001C                     	;# 
   765  001D                     	;# 
   766  001E                     	;# 
   767  001F                     	;# 
   768  0081                     	;# 
   769  0085                     	;# 
   770  0086                     	;# 
   771  0087                     	;# 
   772  008C                     	;# 
   773  008D                     	;# 
   774  008E                     	;# 
   775  008F                     	;# 
   776  0090                     	;# 
   777  0092                     	;# 
   778  0093                     	;# 
   779  0093                     	;# 
   780  0093                     	;# 
   781  0094                     	;# 
   782  0095                     	;# 
   783  0095                     	;# 
   784  0096                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0098                     	;# 
   788  0099                     	;# 
   789  009A                     	;# 
   790  009B                     	;# 
   791  009E                     	;# 
   792  009F                     	;# 
   793  010C                     	;# 
   794  010C                     	;# 
   795  010D                     	;# 
   796  010E                     	;# 
   797  010F                     	;# 
   798  0115                     	;# 
   799  0116                     	;# 
   800  0118                     	;# 
   801  0119                     	;# 
   802  011A                     	;# 
   803  011B                     	;# 
   804  011E                     	;# 
   805  011F                     	;# 
   806  018C                     	;# 
   807  018D                     	;# 
   808  019D                     	;# 
   809  019E                     	;# 
   810  0000                     	;# 
   811  0001                     	;# 
   812  0002                     	;# 
   813  0003                     	;# 
   814  0004                     	;# 
   815  0005                     	;# 
   816  0006                     	;# 
   817  0007                     	;# 
   818  000A                     	;# 
   819  000B                     	;# 
   820  000C                     	;# 
   821  000D                     	;# 
   822  000E                     	;# 
   823  000E                     	;# 
   824  000F                     	;# 
   825  0010                     	;# 
   826  0011                     	;# 
   827  0012                     	;# 
   828  0013                     	;# 
   829  0014                     	;# 
   830  0015                     	;# 
   831  0015                     	;# 
   832  0016                     	;# 
   833  0017                     	;# 
   834  0018                     	;# 
   835  0019                     	;# 
   836  001A                     	;# 
   837  001C                     	;# 
   838  001D                     	;# 
   839  001E                     	;# 
   840  001F                     	;# 
   841  0081                     	;# 
   842  0085                     	;# 
   843  0086                     	;# 
   844  0087                     	;# 
   845  008C                     	;# 
   846  008D                     	;# 
   847  008E                     	;# 
   848  008F                     	;# 
   849  0090                     	;# 
   850  0092                     	;# 
   851  0093                     	;# 
   852  0093                     	;# 
   853  0093                     	;# 
   854  0094                     	;# 
   855  0095                     	;# 
   856  0095                     	;# 
   857  0096                     	;# 
   858  0096                     	;# 
   859  0097                     	;# 
   860  0098                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009E                     	;# 
   865  009F                     	;# 
   866  010C                     	;# 
   867  010C                     	;# 
   868  010D                     	;# 
   869  010E                     	;# 
   870  010F                     	;# 
   871  0115                     	;# 
   872  0116                     	;# 
   873  0118                     	;# 
   874  0119                     	;# 
   875  011A                     	;# 
   876  011B                     	;# 
   877  011E                     	;# 
   878  011F                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  019D                     	;# 
   882  019E                     	;# 
   883                           
   884                           	psect	idataCOMMON
   885  05A2                     __pidataCOMMON:	
   886                           
   887                           ;initializer for _responseBytes
   888  05A2  34FF               	retlw	255
   889  05A3  34FF               	retlw	255
   890                           
   891                           	psect	strings
   892  0439                     __pstrings:	
   893  0439                     stringtab:	
   894  0439                     __stringtab:	
   895  0439                     stringcode:	
   896                           ;	String table - string pointers are 1 byte each
   897                           
   898  0439                     stringdir:	
   899  0439  3004               	movlw	high stringdir
   900  043A  008A               	movwf	10
   901  043B  0804               	movf	4,w
   902  043C  0A84               	incf	4,f
   903  043D  0782               	addwf	2,f
   904  043E                     __stringbase:	
   905  043E  3400               	retlw	0
   906  043F                     __end_of__stringtab:	
   907  043F                     _Nybble2MSBitNum:	
   908  043F  3400               	retlw	0
   909  0440  3401               	retlw	1
   910  0441  3401               	retlw	1
   911  0442  3402               	retlw	2
   912  0443  3402               	retlw	2
   913  0444  3402               	retlw	2
   914  0445  3402               	retlw	2
   915  0446  3403               	retlw	3
   916  0447  3403               	retlw	3
   917  0448  3403               	retlw	3
   918  0449  3403               	retlw	3
   919  044A  3403               	retlw	3
   920  044B  3403               	retlw	3
   921  044C  3403               	retlw	3
   922  044D  3403               	retlw	3
   923  044E                     __end_of_Nybble2MSBitNum:	
   924  044E                     _Timer2PostFunc:	
   925  044E  3407               	retlw	low (fp__PostUARTRXService-fpbase)
   926  044F  3400               	retlw	0
   927  0450  3400               	retlw	0
   928  0451  3400               	retlw	0
   929  0452  3400               	retlw	0
   930  0453  3400               	retlw	0
   931  0454  3400               	retlw	0
   932  0455  3400               	retlw	0
   933  0456                     __end_of_Timer2PostFunc:	
   934  0456                     _BitNum2SetMask:	
   935  0456  3401               	retlw	1
   936  0457  3402               	retlw	2
   937  0458  3404               	retlw	4
   938  0459  3408               	retlw	8
   939  045A  3410               	retlw	16
   940  045B  3420               	retlw	32
   941  045C  3440               	retlw	64
   942  045D  3480               	retlw	128
   943  045E                     __end_of_BitNum2SetMask:	
   944  045E                     _EventQueues:	
   945  045E  34BC               	retlw	low (_Queue0| 0)
   946  045F  3404               	retlw	4
   947  0460  34B0               	retlw	low (_Queue1| 0)
   948  0461  3404               	retlw	4
   949  0462                     __end_of_EventQueues:	
   950  0462                     _ServDescList:	
   951  0462  3401               	retlw	low (fp__InitUARTRXService-fpbase)
   952  0463  340B               	retlw	low (fp__RunUARTRXService-fpbase)
   953  0464  3403               	retlw	low (fp__InitSPIService-fpbase)
   954  0465  3409               	retlw	low (fp__RunSPIService-fpbase)
   955  0466                     __end_of_ServDescList:	
   956  0466                     _ES_EventList:	
   957  0466  3405               	retlw	low (fp__CheckUARTRXEvent-fpbase)
   958  0467                     __end_of_ES_EventList:	
   959  0014                     _SSPCON	set	20
   960  0013                     _SSPBUF	set	19
   961  001A                     _RCREG	set	26
   962  0019                     _TXREG	set	25
   963  000B                     _INTCON	set	11
   964  0007                     _PORTC	set	7
   965  0001                     _TMR0	set	1
   966  003E                     _RC6	set	62
   967  003C                     _RC4	set	60
   968  003B                     _RC3	set	59
   969  0064                     _TXIF	set	100
   970  00C4                     _CREN	set	196
   971  005E                     _PEIE	set	94
   972  00C7                     _SPEN	set	199
   973  0065                     _RCIF	set	101
   974  0063                     _SSPIF	set	99
   975  005D                     _T0IE	set	93
   976  005A                     _T0IF	set	90
   977  005F                     _GIE	set	95
   978  003D                     _RC5	set	61
   979  0038                     _RC0	set	56
   980  0094                     _SSPSTAT	set	148
   981  008F                     _OSCCON	set	143
   982  009A                     _SPBRGH	set	154
   983  0099                     _SPBRG	set	153
   984  04A0                     _BF	set	1184
   985  043E                     _TRISC6	set	1086
   986  0436                     _TRISB6	set	1078
   987  0434                     _TRISB4	set	1076
   988  043F                     _TRISC7	set	1087
   989  043C                     _TRISC4	set	1084
   990  043B                     _TRISC3	set	1083
   991  04C5                     _TXEN	set	1221
   992  0464                     _TXIE	set	1124
   993  04C4                     _SYNC	set	1220
   994  04DB                     _BRG16	set	1243
   995  04C2                     _BRGH	set	1218
   996  0465                     _RCIE	set	1125
   997  0463                     _SSPIE	set	1123
   998  040A                     _PS2	set	1034
   999  0409                     _PS1	set	1033
  1000  0408                     _PS0	set	1032
  1001  040B                     _PSA	set	1035
  1002  040D                     _T0CS	set	1037
  1003  043D                     _TRISC5	set	1085
  1004  0438                     _TRISC0	set	1080
  1005  011F                     _ANSELH	set	287
  1006  08F7                     _ANS7	set	2295
  1007  08FB                     _ANS11	set	2299
  1008  08F4                     _ANS4	set	2292
  1009                           
  1010                           ; #config settings
  1011  0000                     
  1012                           	psect	cinit
  1013  0013                     start_initialization:	
  1014  0013                     __initialization:	
  1015                           
  1016                           ; Initialize objects allocated to COMMON
  1017  0013  118A  25A2  118A   	fcall	__pidataCOMMON	;fetch initializer
  1018  0016  00FC               	movwf	__pdataCOMMON& (0+127)
  1019  0017  118A  25A3  118A   	fcall	__pidataCOMMON+1	;fetch initializer
  1020  001A  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
  1021                           
  1022                           ; Clear objects allocated to BANK1
  1023  001B  1383               	bcf	3,7	;select IRP bank0
  1024  001C  30A0               	movlw	low __pbssBANK1
  1025  001D  0084               	movwf	4
  1026  001E  30C8               	movlw	low (__pbssBANK1+40)
  1027  001F  118A  2596  118A   	fcall	clear_ram0
  1028                           
  1029                           ; Clear objects allocated to BANK0
  1030  0022  3020               	movlw	low __pbssBANK0
  1031  0023  0084               	movwf	4
  1032  0024  3050               	movlw	low (__pbssBANK0+48)
  1033  0025  118A  2596         	fcall	clear_ram0
  1034                           
  1035                           ; Clear objects allocated to COMMON
  1036  0027  01F9               	clrf	__pbssCOMMON& (0+127)
  1037  0028  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  1038  0029  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  1039  002A                     end_of_initialization:	
  1040                           ;End of C runtime variable initialization code
  1041                           
  1042  002A                     __end_of__initialization:	
  1043  002A  0183               	clrf	3
  1044  002B  118A  2BD4         	ljmp	_main	;jump to C main() function
  1045                           
  1046                           	psect	bssCOMMON
  1047  0079                     __pbssCOMMON:	
  1048  0079                     _StatusResponseStore:	
  1049  0079                     	ds	1
  1050  007A                     UARTRXIntResponse@bodyByteCount:	
  1051  007A                     	ds	1
  1052  007B                     UARTRXIntResponse@currentByteIndex:	
  1053  007B                     	ds	1
  1054                           
  1055                           	psect	dataCOMMON
  1056  007C                     __pdataCOMMON:	
  1057  007C                     _responseBytes:	
  1058  007C                     	ds	2
  1059                           
  1060                           	psect	bssBANK0
  1061  0020                     __pbssBANK0:	
  1062  0020                     ES_Timer_RTI_Resp@NewEvent:	
  1063  0020                     	ds	3
  1064  0023                     _FieldAddr:	
  1065  0023                     	ds	2
  1066  0025                     _time:	
  1067  0025                     	ds	2
  1068  0027                     CheckSSEvent@lastSS:	
  1069  0027                     	ds	1
  1070  0028                     _newRequest:	
  1071  0028                     	ds	1
  1072  0029                     _commOpen:	
  1073  0029                     	ds	1
  1074  002A                     _SPIBuffer:	
  1075  002A                     	ds	1
  1076  002B                     SPI_SM@currentState:	
  1077  002B                     	ds	1
  1078  002C                     SPI_SM@MyPriority:	
  1079  002C                     	ds	1
  1080  002D                     _hasHeartbeat:	
  1081  002D                     	ds	1
  1082  002E                     _RXFlag:	
  1083  002E                     	ds	1
  1084  002F                     _flag3:	
  1085  002F                     	ds	1
  1086  0030                     _flag2:	
  1087  0030                     	ds	1
  1088  0031                     _newResponseAvailable:	
  1089  0031                     	ds	1
  1090  0032                     _newStatusAvailable:	
  1091  0032                     	ds	1
  1092  0033                     _currentState:	
  1093  0033                     	ds	1
  1094  0034                     _MyPriority:	
  1095  0034                     	ds	1
  1096  0035                     ES_Timer_RTI_Resp@NextTimer2Process:	
  1097  0035                     	ds	1
  1098  0036                     ES_Timer_RTI_Resp@NeedsProcessing:	
  1099  0036                     	ds	1
  1100  0037                     _TMR_ActiveFlags:	
  1101  0037                     	ds	1
  1102  0038                     _TickCount:	
  1103  0038                     	ds	1
  1104  0039                     _Ready:	
  1105  0039                     	ds	1
  1106  003A                     _checksum:	
  1107  003A                     	ds	1
  1108  003B                     _StatusArray:	
  1109  003B                     	ds	9
  1110  0044                     _ReceivedData:	
  1111  0044                     	ds	9
  1112  004D                     ES_Run@ThisEvent:	
  1113  004D                     	ds	3
  1114                           
  1115                           	psect	bssBANK1
  1116  00A0                     __pbssBANK1:	
  1117  00A0                     _TMR_TimerArray:	
  1118  00A0                     	ds	16
  1119  00B0                     _Queue1:	
  1120  00B0                     	ds	12
  1121  00BC                     _Queue0:	
  1122  00BC                     	ds	12
  1123                           
  1124                           	psect	clrtext
  1125  0596                     clear_ram0:	
  1126                           ;	Called with FSR containing the base address, and
  1127                           ;	W with the last address+1
  1128                           
  1129  0596  0064               	clrwdt	;clear the watchdog before getting into this loop
  1130  0597                     clrloop0:	
  1131  0597  0180               	clrf	0	;clear RAM location pointed to by FSR
  1132  0598  0A84               	incf	4,f	;increment pointer
  1133  0599  0604               	xorwf	4,w	;XOR with final address
  1134  059A  1903               	btfsc	3,2	;have we reached the end yet?
  1135  059B  3400               	retlw	0	;all done for this memory range, return
  1136  059C  0604               	xorwf	4,w	;XOR again to restore value
  1137  059D  2D97               	goto	clrloop0	;do the next byte
  1138                           
  1139                           	psect	cstackCOMMON
  1140  0070                     __pcstackCOMMON:	
  1141  0070                     ?_CheckUARTRXEvent:	
  1142  0070                     ?_ES_Sys_Timer_Init:	
  1143                           ; 1 bytes @ 0x0
  1144                           
  1145  0070                     ?_ES_GetMSBitSet:	
  1146                           ; 1 bytes @ 0x0
  1147                           
  1148  0070                     ?_ES_Timer_RTI_Resp:	
  1149                           ; 1 bytes @ 0x0
  1150                           
  1151  0070                     ?_IsTimerPending:	
  1152                           ; 1 bytes @ 0x0
  1153                           
  1154  0070                     ?_CheckSSEvent:	
  1155                           ; 1 bytes @ 0x0
  1156                           
  1157  0070                     ?_SPIIntResponse:	
  1158                           ; 1 bytes @ 0x0
  1159                           
  1160  0070                     ??_SPIIntResponse:	
  1161                           ; 1 bytes @ 0x0
  1162                           
  1163  0070                     ?_UARTRXIntResponse:	
  1164                           ; 1 bytes @ 0x0
  1165                           
  1166  0070                     ?_ClearReceivedDataArray:	
  1167                           ; 1 bytes @ 0x0
  1168                           
  1169  0070                     ??_ClearReceivedDataArray:	
  1170                           ; 1 bytes @ 0x0
  1171                           
  1172  0070                     ?_RX_getStatusBuffer:	
  1173                           ; 1 bytes @ 0x0
  1174                           
  1175  0070                     ??_RX_getStatusBuffer:	
  1176                           ; 1 bytes @ 0x0
  1177                           
  1178  0070                     ?_ES_Initialize:	
  1179                           ; 1 bytes @ 0x0
  1180                           
  1181  0070                     ?_ISR:	
  1182                           ; 1 bytes @ 0x0
  1183                           
  1184  0070                     ?_USART_Init:	
  1185                           ; 1 bytes @ 0x0
  1186                           
  1187  0070                     ?_main:	
  1188                           ; 1 bytes @ 0x0
  1189                           
  1190  0070                     ?_RX_newStatusReady:	
  1191                           ; 1 bytes @ 0x0
  1192                           
  1193  0070                     ??_RX_newStatusReady:	
  1194                           ; 1 bytes @ 0x0
  1195                           
  1196  0070                     ES_Initialize@NewRate:	
  1197                           ; 1 bytes @ 0x0
  1198                           
  1199                           
  1200                           ; 1 bytes @ 0x0
  1201  0070                     	ds	1
  1202  0071                     ClearReceivedDataArray@i:	
  1203  0071                     SPIIntResponse@readByte:	
  1204                           ; 1 bytes @ 0x1
  1205                           
  1206                           
  1207                           ; 1 bytes @ 0x1
  1208  0071                     	ds	1
  1209  0072                     ??_UARTRXIntResponse:	
  1210                           
  1211                           ; 1 bytes @ 0x2
  1212  0072                     	ds	1
  1213  0073                     UARTRXIntResponse@newByte:	
  1214                           
  1215                           ; 1 bytes @ 0x3
  1216  0073                     	ds	1
  1217  0074                     ??_ISR:	
  1218                           
  1219                           ; 1 bytes @ 0x4
  1220  0074                     	ds	5
  1221                           
  1222                           	psect	cstackBANK0
  1223  0050                     __pcstackBANK0:	
  1224  0050                     ??_ES_Sys_Timer_Init:	
  1225  0050                     ?_ES_InitQueue:	
  1226                           ; 1 bytes @ 0x0
  1227                           
  1228  0050                     ??_ES_GetMSBitSet:	
  1229                           ; 1 bytes @ 0x0
  1230                           
  1231  0050                     ??_IsTimerPending:	
  1232                           ; 1 bytes @ 0x0
  1233                           
  1234  0050                     ??_CheckSSEvent:	
  1235                           ; 1 bytes @ 0x0
  1236                           
  1237  0050                     ?_ES_Timer_InitTimer:	
  1238                           ; 1 bytes @ 0x0
  1239                           
  1240  0050                     ??_USART_Init:	
  1241                           ; 1 bytes @ 0x0
  1242                           
  1243  0050                     ?___bmul:	
  1244                           ; 1 bytes @ 0x0
  1245                           
  1246  0050                     ?_RunSPIService:	
  1247                           ; 1 bytes @ 0x0
  1248                           
  1249  0050                     ES_InitQueue@BlockSize:	
  1250                           ; 3 bytes @ 0x0
  1251                           
  1252  0050                     ___bmul@multiplicand:	
  1253                           ; 1 bytes @ 0x0
  1254                           
  1255  0050                     ES_Timer_InitTimer@NewTime:	
  1256                           ; 1 bytes @ 0x0
  1257                           
  1258  0050                     RunSPIService@ThisEvent:	
  1259                           ; 2 bytes @ 0x0
  1260                           
  1261                           
  1262                           ; 3 bytes @ 0x0
  1263  0050                     	ds	1
  1264  0051                     ??_ES_InitQueue:	
  1265  0051                     ??___bmul:	
  1266                           ; 1 bytes @ 0x1
  1267                           
  1268  0051                     CheckSSEvent@returnVal:	
  1269                           ; 1 bytes @ 0x1
  1270                           
  1271                           
  1272                           ; 1 bytes @ 0x1
  1273  0051                     	ds	1
  1274  0052                     ??_ES_Timer_InitTimer:	
  1275  0052                     ES_InitQueue@pBlock:	
  1276                           ; 1 bytes @ 0x2
  1277                           
  1278  0052                     CheckSSEvent@thisSS:	
  1279                           ; 1 bytes @ 0x2
  1280                           
  1281  0052                     ___bmul@product:	
  1282                           ; 1 bytes @ 0x2
  1283                           
  1284                           
  1285                           ; 1 bytes @ 0x2
  1286  0052                     	ds	1
  1287  0053                     ??_RunSPIService:	
  1288  0053                     ES_GetMSBitSet@Val2Check:	
  1289                           ; 1 bytes @ 0x3
  1290                           
  1291  0053                     ES_InitQueue@pThisQueue:	
  1292                           ; 1 bytes @ 0x3
  1293                           
  1294  0053                     ES_Timer_InitTimer@Num:	
  1295                           ; 1 bytes @ 0x3
  1296                           
  1297  0053                     ___bmul@multiplier:	
  1298                           ; 1 bytes @ 0x3
  1299                           
  1300  0053                     RunSPIService@ReturnEvent:	
  1301                           ; 1 bytes @ 0x3
  1302                           
  1303                           
  1304                           ; 3 bytes @ 0x3
  1305  0053                     	ds	1
  1306  0054                     ?_ES_DeQueue:	
  1307  0054                     ?_ES_EnQueueFIFO:	
  1308                           ; 1 bytes @ 0x4
  1309                           
  1310  0054                     ?_RunUARTRXService:	
  1311                           ; 1 bytes @ 0x4
  1312                           
  1313  0054                     ES_GetMSBitSet@ReturnVal:	
  1314                           ; 3 bytes @ 0x4
  1315                           
  1316  0054                     ES_DeQueue@pReturnEvent:	
  1317                           ; 1 bytes @ 0x4
  1318                           
  1319  0054                     ES_EnQueueFIFO@Event2Add:	
  1320                           ; 1 bytes @ 0x4
  1321                           
  1322  0054                     RunUARTRXService@ThisEvent:	
  1323                           ; 3 bytes @ 0x4
  1324                           
  1325                           
  1326                           ; 3 bytes @ 0x4
  1327  0054                     	ds	1
  1328  0055                     ??_ES_DeQueue:	
  1329  0055                     ES_GetMSBitSet@Nybble2Test:	
  1330                           ; 1 bytes @ 0x5
  1331                           
  1332                           
  1333                           ; 1 bytes @ 0x5
  1334  0055                     	ds	1
  1335  0056                     ES_GetMSBitSet@LoopCntr:	
  1336                           
  1337                           ; 1 bytes @ 0x6
  1338  0056                     	ds	1
  1339  0057                     ??_RunUARTRXService:	
  1340  0057                     ??_ES_EnQueueFIFO:	
  1341                           ; 1 bytes @ 0x7
  1342                           
  1343                           
  1344                           ; 1 bytes @ 0x7
  1345  0057                     	ds	2
  1346  0059                     ES_EnQueueFIFO@saveCrit:	
  1347                           
  1348                           ; 1 bytes @ 0x9
  1349  0059                     	ds	1
  1350  005A                     ES_EnQueueFIFO@InsertionPoint:	
  1351  005A                     ES_DeQueue@saveCrit:	
  1352                           ; 1 bytes @ 0xA
  1353                           
  1354                           
  1355                           ; 1 bytes @ 0xA
  1356  005A                     	ds	1
  1357  005B                     ES_EnQueueFIFO@pBlock:	
  1358  005B                     ES_DeQueue@NumLeft:	
  1359                           ; 1 bytes @ 0xB
  1360                           
  1361  005B                     RunUARTRXService@ReturnEvent:	
  1362                           ; 1 bytes @ 0xB
  1363                           
  1364                           
  1365                           ; 3 bytes @ 0xB
  1366  005B                     	ds	1
  1367  005C                     ES_EnQueueFIFO@pThisQueue:	
  1368  005C                     ES_DeQueue@pBlock:	
  1369                           ; 1 bytes @ 0xC
  1370                           
  1371                           
  1372                           ; 1 bytes @ 0xC
  1373  005C                     	ds	1
  1374  005D                     ?_ES_PostToService:	
  1375  005D                     ES_DeQueue@pThisQueue:	
  1376                           ; 1 bytes @ 0xD
  1377                           
  1378  005D                     ES_PostToService@TheEvent:	
  1379                           ; 1 bytes @ 0xD
  1380                           
  1381                           
  1382                           ; 3 bytes @ 0xD
  1383  005D                     	ds	1
  1384  005E                     RunUARTRXService@FieldAddressMSB:	
  1385                           
  1386                           ; 1 bytes @ 0xE
  1387  005E                     	ds	1
  1388  005F                     RunUARTRXService@FieldAddressLSB:	
  1389                           
  1390                           ; 1 bytes @ 0xF
  1391  005F                     	ds	1
  1392  0060                     ??_ES_PostToService:	
  1393  0060                     RunUARTRXService@i:	
  1394                           ; 1 bytes @ 0x10
  1395                           
  1396                           
  1397                           ; 1 bytes @ 0x10
  1398  0060                     	ds	1
  1399  0061                     ES_PostToService@WhichService:	
  1400                           
  1401                           ; 1 bytes @ 0x11
  1402  0061                     	ds	1
  1403  0062                     ??_CheckUARTRXEvent:	
  1404  0062                     ?_InitUARTRXService:	
  1405                           ; 1 bytes @ 0x12
  1406                           
  1407  0062                     ?_InitSPIService:	
  1408                           ; 1 bytes @ 0x12
  1409                           
  1410  0062                     ?_PostUARTRXService:	
  1411                           ; 1 bytes @ 0x12
  1412                           
  1413  0062                     InitUARTRXService@Priority:	
  1414                           ; 1 bytes @ 0x12
  1415                           
  1416  0062                     InitSPIService@Priority:	
  1417                           ; 1 bytes @ 0x12
  1418                           
  1419  0062                     PostUARTRXService@ThisEvent:	
  1420                           ; 1 bytes @ 0x12
  1421                           
  1422                           
  1423                           ; 3 bytes @ 0x12
  1424  0062                     	ds	1
  1425  0063                     ??_InitUARTRXService:	
  1426  0063                     ??_InitSPIService:	
  1427                           ; 1 bytes @ 0x13
  1428                           
  1429  0063                     CheckUARTRXEvent@CommEvent:	
  1430                           ; 1 bytes @ 0x13
  1431                           
  1432                           
  1433                           ; 3 bytes @ 0x13
  1434  0063                     	ds	1
  1435  0064                     InitUARTRXService@ThisEvent:	
  1436  0064                     InitSPIService@ThisEvent:	
  1437                           ; 3 bytes @ 0x14
  1438                           
  1439                           
  1440                           ; 3 bytes @ 0x14
  1441  0064                     	ds	1
  1442  0065                     ??_ES_Timer_RTI_Resp:	
  1443  0065                     ??_PostUARTRXService:	
  1444                           ; 1 bytes @ 0x15
  1445                           
  1446                           
  1447                           ; 1 bytes @ 0x15
  1448  0065                     	ds	2
  1449  0067                     ??_ES_Initialize:	
  1450                           
  1451                           ; 1 bytes @ 0x17
  1452  0067                     	ds	1
  1453  0068                     ?_ES_Run:	
  1454                           
  1455                           ; 1 bytes @ 0x18
  1456  0068                     	ds	1
  1457  0069                     ES_Initialize@i:	
  1458                           
  1459                           ; 1 bytes @ 0x19
  1460  0069                     	ds	1
  1461  006A                     ??_ES_Run:	
  1462                           
  1463                           ; 1 bytes @ 0x1A
  1464  006A                     	ds	2
  1465  006C                     ES_Run@HighestPrior:	
  1466                           
  1467                           ; 1 bytes @ 0x1C
  1468  006C                     	ds	1
  1469  006D                     ??_main:	
  1470                           
  1471                           ; 1 bytes @ 0x1D
  1472  006D                     	ds	1
  1473  006E                     main@ErrorType:	
  1474                           
  1475                           ; 1 bytes @ 0x1E
  1476  006E                     	ds	1
  1477                           
  1478                           	psect	maintext
  1479  03D4                     __pmaintext:	
  1480 ;;
  1481 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1482 ;;
  1483 ;; *************** function _main *****************
  1484 ;; Defined at:
  1485 ;;		line 21 in file "main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  ErrorType       1   30[BANK0 ] enum E1642
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : B00/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1499 ;;      Params:         0       0       0       0
  1500 ;;      Locals:         0       1       0       0
  1501 ;;      Temps:          0       1       0       0
  1502 ;;      Totals:         0       2       0       0
  1503 ;;Total ram usage:        2 bytes
  1504 ;; Hardware stack levels required when called:    8
  1505 ;; This function calls:
  1506 ;;		_ES_Initialize
  1507 ;;		_ES_Run
  1508 ;;		_USART_Init
  1509 ;; This function is called by:
  1510 ;;		Startup code after reset
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           
  1515                           ;psect for function _main
  1516  03D4                     _main:	
  1517                           
  1518                           ;main.c: 22: ES_Return_t ErrorType;
  1519                           ;main.c: 28: OSCCON = 0b01110000;
  1520                           
  1521                           ;incstack = 0
  1522                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1523  03D4  3070               	movlw	112
  1524  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  1525  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  1526  03D7  008F               	movwf	15	;volatile
  1527                           
  1528                           ;main.c: 30: USART_Init();
  1529  03D8  118A  250C  118A   	fcall	_USART_Init
  1530                           
  1531                           ;main.c: 33: TRISC3 = 0;
  1532  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  1533  03DC  1303               	bcf	3,6	;RP1=0, select bank1
  1534  03DD  1187               	bcf	7,3	;volatile
  1535                           
  1536                           ;main.c: 34: ANS7 = 0;
  1537  03DE  1283               	bcf	3,5	;RP0=0, select bank2
  1538  03DF  1703               	bsf	3,6	;RP1=1, select bank2
  1539  03E0  139E               	bcf	30,7	;volatile
  1540                           
  1541                           ;main.c: 35: RC3 = 0;
  1542  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  1543  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  1544  03E3  1187               	bcf	7,3	;volatile
  1545                           
  1546                           ;main.c: 38: TRISC4 = 0;
  1547  03E4  1683               	bsf	3,5	;RP0=1, select bank1
  1548  03E5  1303               	bcf	3,6	;RP1=0, select bank1
  1549  03E6  1207               	bcf	7,4	;volatile
  1550                           
  1551                           ;main.c: 39: RC4 = 0;
  1552  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  1553  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  1554  03E9  1207               	bcf	7,4	;volatile
  1555                           
  1556                           ;main.c: 42: ErrorType = ES_Initialize(ES_Timer_RATE_1MS);
  1557  03EA  3001               	movlw	1
  1558  03EB  118A  22AE  118A   	fcall	_ES_Initialize
  1559  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  1560  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  1561  03F0  00ED               	movwf	??_main
  1562  03F1  086D               	movf	??_main,w
  1563  03F2  00EE               	movwf	main@ErrorType
  1564                           
  1565                           ;main.c: 45: RC4 = 1;
  1566  03F3  1607               	bsf	7,4	;volatile
  1567                           
  1568                           ;main.c: 48: if (ErrorType == Success) {
  1569  03F4  086E               	movf	main@ErrorType,w
  1570  03F5  1D03               	btfss	3,2
  1571  03F6  2C00               	goto	l2364
  1572  03F7  3002               	movlw	low u1497jt
  1573  03F8  118A  283F         	ljmp	_ES_Run
  1574  03FA                     u1497jf:	
  1575  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  1576  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  1577  03FC  0868               	movf	?_ES_Run,w
  1578  03FD  00ED               	movwf	??_main
  1579  03FE  086D               	movf	??_main,w
  1580  03FF  00EE               	movwf	main@ErrorType
  1581  0400                     l2364:	
  1582                           ;main.c: 64: }
  1583                           
  1584                           ;main.c: 63: break;
  1585                           
  1586                           ;main.c: 61: default:
  1587                           
  1588                           ;main.c: 60: break;
  1589                           
  1590                           ;main.c: 58: case FailedInit:
  1591                           
  1592                           ;main.c: 57: break;
  1593                           
  1594                           ;main.c: 55: case FailedPointer:
  1595                           
  1596                           ;main.c: 52: }
  1597                           ;main.c: 54: switch (ErrorType) {
  1598                           
  1599  0400  086E               	movf	main@ErrorType,w
  1600                           
  1601                           ; Switch size 1, requested type "space"
  1602                           ; Number of cases is 2, Range of values is 3 to 5
  1603                           ; switch strategies available:
  1604                           ; Name         Instructions Cycles
  1605                           ; simple_byte            7     4 (average)
  1606                           ; direct_byte           16    10 (fixed)
  1607                           ; jumptable            263     9 (fixed)
  1608                           ;	Chosen strategy is simple_byte
  1609  0401  3A03               	xorlw	3	; case 3
  1610  0402  1903               	skipnz
  1611  0403  2C08               	goto	l337
  1612  0404  3A06               	xorlw	6	; case 5
  1613  0405  1903               	skipnz
  1614  0406  2C08               	goto	l337
  1615  0407  2C08               	goto	l337
  1616  0408                     l337:	
  1617                           ;main.c: 65: for (;;)
  1618                           
  1619                           
  1620                           ;main.c: 66: ;
  1621  0408  2C08               	goto	l337
  1622  0409                     __end_of_main:	
  1623                           
  1624                           	psect	jmp_tab__ES_Run
  1625  0002                     __pjmp_tab__ES_Run:	
  1626                           ;main.c: 50: ErrorType = ES_Run();
  1627                           
  1628  0002                     u1497jt:	
  1629  0002  118A  2BFA         	ljmp	u1497jf
  1630                           
  1631                           	psect	text1
  1632  050C                     __ptext1:	
  1633 ;; *************** function _USART_Init *****************
  1634 ;; Defined at:
  1635 ;;		line 11 in file "sci.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;		None
  1640 ;; Return value:  Size  Location     Type
  1641 ;;                  1    wreg      void 
  1642 ;; Registers used:
  1643 ;;		wreg, status,2
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1649 ;;      Params:         0       0       0       0
  1650 ;;      Locals:         0       0       0       0
  1651 ;;      Temps:          0       0       0       0
  1652 ;;      Totals:         0       0       0       0
  1653 ;;Total ram usage:        0 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    3
  1656 ;; This function calls:
  1657 ;;		Nothing
  1658 ;; This function is called by:
  1659 ;;		_main
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           
  1664                           ;psect for function _USART_Init
  1665  050C                     _USART_Init:	
  1666                           
  1667                           ;sci.c: 13: GIE = 0;
  1668                           
  1669                           ;incstack = 0
  1670                           ; Regs used in _USART_Init: [wreg+status,2]
  1671  050C  138B               	bcf	11,7	;volatile
  1672                           
  1673                           ;sci.c: 16: SPBRG = 129;
  1674  050D  3081               	movlw	129
  1675  050E  1683               	bsf	3,5	;RP0=1, select bank1
  1676  050F  1303               	bcf	3,6	;RP1=0, select bank1
  1677  0510  0099               	movwf	25	;volatile
  1678                           
  1679                           ;sci.c: 17: SPBRGH = 0;
  1680  0511  019A               	clrf	26	;volatile
  1681                           
  1682                           ;sci.c: 18: BRGH = 1;
  1683  0512  1518               	bsf	24,2	;volatile
  1684                           
  1685                           ;sci.c: 19: BRG16 = 0;
  1686  0513  119B               	bcf	27,3	;volatile
  1687                           
  1688                           ;sci.c: 22: SYNC = 0;
  1689  0514  1218               	bcf	24,4	;volatile
  1690                           
  1691                           ;sci.c: 23: SPEN = 1;
  1692  0515  1283               	bcf	3,5	;RP0=0, select bank0
  1693  0516  1303               	bcf	3,6	;RP1=0, select bank0
  1694  0517  1798               	bsf	24,7	;volatile
  1695                           
  1696                           ;sci.c: 26: TXIE = 0;
  1697  0518  1683               	bsf	3,5	;RP0=1, select bank1
  1698  0519  1303               	bcf	3,6	;RP1=0, select bank1
  1699  051A  120C               	bcf	12,4	;volatile
  1700                           
  1701                           ;sci.c: 27: RCIE = 1;
  1702  051B  168C               	bsf	12,5	;volatile
  1703                           
  1704                           ;sci.c: 28: PEIE = 1;
  1705  051C  170B               	bsf	11,6	;volatile
  1706                           
  1707                           ;sci.c: 31: TXEN = 1;
  1708  051D  1698               	bsf	24,5	;volatile
  1709                           
  1710                           ;sci.c: 34: CREN = 1;
  1711  051E  1283               	bcf	3,5	;RP0=0, select bank0
  1712  051F  1303               	bcf	3,6	;RP1=0, select bank0
  1713  0520  1618               	bsf	24,4	;volatile
  1714                           
  1715                           ;sci.c: 35: ANS11 = 0;
  1716  0521  1283               	bcf	3,5	;RP0=0, select bank2
  1717  0522  1703               	bsf	3,6	;RP1=1, select bank2
  1718  0523  119F               	bcf	31,3	;volatile
  1719                           
  1720                           ;sci.c: 38: GIE = 1;
  1721  0524  178B               	bsf	11,7	;volatile
  1722  0525  0008               	return
  1723  0526                     __end_of_USART_Init:	
  1724                           
  1725                           	psect	text2
  1726  003F                     __ptext2:	
  1727 ;; *************** function _ES_Run *****************
  1728 ;; Defined at:
  1729 ;;		line 224 in file "ES_Framework.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  HighestPrior    1   28[BANK0 ] unsigned char 
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1   24[BANK0 ] enum E1595
  1736 ;; Registers used:
  1737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1743 ;;      Params:         0       2       0       0
  1744 ;;      Locals:         0       1       0       0
  1745 ;;      Temps:          0       2       0       0
  1746 ;;      Totals:         0       5       0       0
  1747 ;;Total ram usage:        5 bytes
  1748 ;; Hardware stack levels required when called:    8
  1749 ;; This function calls:
  1750 ;;		_CheckSSEvent
  1751 ;;		_CheckUARTRXEvent
  1752 ;;		_ES_DeQueue
  1753 ;;		_ES_GetMSBitSet
  1754 ;;		_ES_Timer_RTI_Resp
  1755 ;;		_IsTimerPending
  1756 ;;		_RunSPIService
  1757 ;;		_RunUARTRXService
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           
  1764                           ;psect for function _ES_Run
  1765  003F                     _ES_Run:	
  1766                           
  1767                           ;incstack = 0
  1768 ;; using string table level
  1769                           ; Regs used in _ES_Run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1770  003F  1283               	bcf	3,5	;RP0=0, select bank0
  1771  0040  1303               	bcf	3,6	;RP1=0, select bank0
  1772  0041  00E9               	movwf	(?_ES_Run+1)^0
  1773  0042                     l2326:	
  1774                           ;ES_Framework.c: 233: while (Ready != 0) {
  1775                           
  1776                           ;ES_Framework.c: 226: uint8_t HighestPrior;
  1777                           ;ES_Framework.c: 227: static ES_Event ThisEvent;
  1778                           ;ES_Framework.c: 229: while (1) {
  1779                           
  1780  0042  1283               	bcf	3,5	;RP0=0, select bank0
  1781  0043  1303               	bcf	3,6	;RP1=0, select bank0
  1782  0044  0839               	movf	_Ready,w
  1783  0045  1903               	btfsc	3,2
  1784  0046  289F               	goto	l2330
  1785                           
  1786                           ;ES_Framework.c: 234: HighestPrior = ES_GetMSBitSet(Ready);
  1787  0047  1283               	bcf	3,5	;RP0=0, select bank0
  1788  0048  1303               	bcf	3,6	;RP1=0, select bank0
  1789  0049  0839               	movf	_Ready,w
  1790  004A  118A  235A  118A   	fcall	_ES_GetMSBitSet
  1791  004D  1283               	bcf	3,5	;RP0=0, select bank0
  1792  004E  1303               	bcf	3,6	;RP1=0, select bank0
  1793  004F  00EA               	movwf	??_ES_Run
  1794  0050  086A               	movf	??_ES_Run,w
  1795  0051  00EC               	movwf	ES_Run@HighestPrior
  1796                           
  1797                           ;ES_Framework.c: 235: if (ES_DeQueue(EventQueues[HighestPrior].pMem, &ThisEvent) == 0) {
  1798  0052  304D               	movlw	(low (ES_Run@ThisEvent| 0))& (0+255)
  1799  0053  00EA               	movwf	??_ES_Run
  1800  0054  086A               	movf	??_ES_Run,w
  1801  0055  00D4               	movwf	ES_DeQueue@pReturnEvent
  1802  0056  086C               	movf	ES_Run@HighestPrior,w
  1803  0057  00EB               	movwf	??_ES_Run+1
  1804  0058  076B               	addwf	??_ES_Run+1,w
  1805  0059  3E20               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  1806  005A  0084               	movwf	4
  1807  005B  118A  2439  118A   	fcall	stringdir
  1808  005E  118A  224B  118A   	fcall	_ES_DeQueue
  1809  0061  3A00               	xorlw	0
  1810  0062  1D03               	skipz
  1811  0063  2891               	goto	l2324
  1812                           
  1813                           ;ES_Framework.c: 236: Ready &= ~BitNum2SetMask[HighestPrior];
  1814  0064  1283               	bcf	3,5	;RP0=0, select bank0
  1815  0065  1303               	bcf	3,6	;RP1=0, select bank0
  1816  0066  086C               	movf	ES_Run@HighestPrior,w
  1817  0067  3E18               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  1818  0068  0084               	movwf	4
  1819  0069  118A  2439  118A   	fcall	stringdir
  1820  006C  3AFF               	xorlw	255
  1821  006D  00EA               	movwf	??_ES_Run
  1822  006E  086A               	movf	??_ES_Run,w
  1823  006F  05B9               	andwf	_Ready,f
  1824                           
  1825                           ;ES_Framework.c: 237: }
  1826                           ;ES_Framework.c: 243: switch (HighestPrior) {
  1827  0070  2891               	goto	l2324
  1828  0071                     l2310:	
  1829                           ;ES_Framework.c: 244: case 0:
  1830                           
  1831                           
  1832                           ;ES_Framework.c: 245: if (RunUARTRXService(ThisEvent).EventType != ES_NO_EVENT) return F
      +                          ailedRun;
  1833  0071  084D               	movf	ES_Run@ThisEvent,w
  1834  0072  00D4               	movwf	RunUARTRXService@ThisEvent
  1835  0073  084E               	movf	ES_Run@ThisEvent+1,w
  1836  0074  00D5               	movwf	RunUARTRXService@ThisEvent+1
  1837  0075  084F               	movf	ES_Run@ThisEvent+2,w
  1838  0076  00D6               	movwf	RunUARTRXService@ThisEvent+2
  1839  0077  118A  2185  118A   	fcall	_RunUARTRXService
  1840  007A  1283               	bcf	3,5	;RP0=0, select bank0
  1841  007B  1303               	bcf	3,6	;RP1=0, select bank0
  1842  007C  0854               	movf	?_RunUARTRXService,w
  1843  007D  288A               	goto	L2
  1844  007E                     l2316:	
  1845                           ;ES_Framework.c: 247: case 1:
  1846                           
  1847                           ;ES_Framework.c: 246: break;
  1848                           
  1849                           
  1850                           ;ES_Framework.c: 248: if (RunSPIService(ThisEvent).EventType != ES_NO_EVENT) return Fail
      +                          edRun;
  1851  007E  084D               	movf	ES_Run@ThisEvent,w
  1852  007F  00D0               	movwf	RunSPIService@ThisEvent
  1853  0080  084E               	movf	ES_Run@ThisEvent+1,w
  1854  0081  00D1               	movwf	RunSPIService@ThisEvent+1
  1855  0082  084F               	movf	ES_Run@ThisEvent+2,w
  1856  0083  00D2               	movwf	RunSPIService@ThisEvent+2
  1857  0084  118A  258C  118A   	fcall	_RunSPIService
  1858  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1859  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1860  0089  0850               	movf	?_RunSPIService,w
  1861  008A                     L2:	
  1862  008A  1903               	btfsc	3,2
  1863  008B  2842               	goto	l2326
  1864  008C  3002               	movlw	2
  1865  008D  00EA               	movwf	??_ES_Run
  1866  008E  086A               	movf	??_ES_Run,w
  1867  008F  00E8               	movwf	?_ES_Run
  1868  0090  28AE               	goto	l71
  1869  0091                     l2324:	
  1870                           ;ES_Framework.c: 250: }
  1871                           
  1872                           ;ES_Framework.c: 249: break;
  1873                           
  1874  0091  1283               	bcf	3,5	;RP0=0, select bank0
  1875  0092  1303               	bcf	3,6	;RP1=0, select bank0
  1876  0093  086C               	movf	ES_Run@HighestPrior,w
  1877                           
  1878                           ; Switch size 1, requested type "space"
  1879                           ; Number of cases is 2, Range of values is 0 to 1
  1880                           ; switch strategies available:
  1881                           ; Name         Instructions Cycles
  1882                           ; simple_byte            7     4 (average)
  1883                           ; direct_byte           11     7 (fixed)
  1884                           ; jumptable            260     6 (fixed)
  1885                           ;	Chosen strategy is simple_byte
  1886  0094  3A00               	xorlw	0	; case 0
  1887  0095  1903               	skipnz
  1888  0096  2871               	goto	l2310
  1889  0097  3A01               	xorlw	1	; case 1
  1890  0098  1903               	skipnz
  1891  0099  287E               	goto	l2316
  1892  009A  2842               	goto	l2326
  1893  009B  2842               	goto	l2326
  1894  009C                     l2328:	
  1895                           ;ES_Framework.c: 251: }
  1896                           ;ES_Framework.c: 254: while (IsTimerPending() > 0)
  1897                           
  1898                           
  1899                           ;ES_Framework.c: 255: ES_Timer_RTI_Resp();
  1900  009C  118A  21E8  118A   	fcall	_ES_Timer_RTI_Resp
  1901  009F                     l2330:	
  1902  009F  118A  2581  118A   	fcall	_IsTimerPending
  1903  00A2  3A00               	xorlw	0
  1904  00A3  1D03               	skipz
  1905  00A4  289C               	goto	l2328
  1906                           
  1907                           ;ES_Framework.c: 259: CheckSSEvent();
  1908  00A5  118A  253D  118A   	fcall	_CheckSSEvent
  1909                           
  1910                           ;ES_Framework.c: 260: CheckUARTRXEvent();
  1911  00A8  118A  24D6  118A   	fcall	_CheckUARTRXEvent
  1912  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  1913  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  1914  00AD  2842               	goto	l2326
  1915  00AE                     l71:	
  1916                           ;ES_Framework.c: 262: }
  1917                           ;ES_Framework.c: 263: return 0;
  1918                           
  1919  00AE  3000               	movlw	high __pjmp_tab__ES_Run
  1920  00AF  008A               	movwf	10
  1921  00B0  0869               	movf	(?_ES_Run+1)^0,w
  1922  00B1  0082               	movwf	2
  1923  00B2                     __end_of_ES_Run:	
  1924                           
  1925                           	psect	text3
  1926  0185                     __ptext3:	
  1927 ;; *************** function _RunUARTRXService *****************
  1928 ;; Defined at:
  1929 ;;		line 131 in file "UART_RX_SM.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  ThisEvent       3    4[BANK0 ] struct ES_Event_t
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;  i               1   16[BANK0 ] unsigned char 
  1934 ;;  FieldAddress    1   15[BANK0 ] unsigned char 
  1935 ;;  FieldAddress    1   14[BANK0 ] unsigned char 
  1936 ;;  ReturnEvent     3   11[BANK0 ] struct ES_Event_t
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  3    4[BANK0 ] struct ES_Event_t
  1939 ;; Registers used:
  1940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1946 ;;      Params:         0       3       0       0
  1947 ;;      Locals:         0       6       0       0
  1948 ;;      Temps:          0       4       0       0
  1949 ;;      Totals:         0      13       0       0
  1950 ;;Total ram usage:       13 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    4
  1953 ;; This function calls:
  1954 ;;		_ES_Timer_InitTimer
  1955 ;; This function is called by:
  1956 ;;		_ES_Run
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           
  1961                           ;psect for function _RunUARTRXService
  1962  0185                     _RunUARTRXService:	
  1963                           
  1964                           ;UART_RX_SM.c: 133: ES_Event ReturnEvent;
  1965                           ;UART_RX_SM.c: 134: ReturnEvent.EventType = ES_NO_EVENT;
  1966                           
  1967                           ;incstack = 0
  1968                           ; Regs used in _RunUARTRXService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1969  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1970  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1971  0187  01DB               	clrf	RunUARTRXService@ReturnEvent
  1972                           
  1973                           ;UART_RX_SM.c: 136: switch (ThisEvent.EventType)
  1974  0188  29D9               	goto	l1868
  1975  0189                     l1832:	
  1976                           ;UART_RX_SM.c: 137: {
  1977                           ;UART_RX_SM.c: 138: case ES_RX_NEW_PACKET:
  1978                           
  1979                           
  1980                           ;UART_RX_SM.c: 139: if (ReceivedData[0] == 0x81)
  1981  0189  3081               	movlw	129
  1982  018A  0644               	xorwf	_ReceivedData,w	;volatile
  1983  018B  1D03               	btfss	3,2
  1984  018C  29E1               	goto	l1870
  1985                           
  1986                           ;UART_RX_SM.c: 140: {
  1987                           ;UART_RX_SM.c: 142: if (ReceivedData[4] & (0x00000004 | 0x00000002))
  1988  018D  0848               	movf	_ReceivedData+4,w	;volatile
  1989  018E  3906               	andlw	6
  1990  018F  1903               	btfsc	3,2
  1991  0190  29E1               	goto	l1870
  1992                           
  1993                           ;UART_RX_SM.c: 143: {
  1994                           ;UART_RX_SM.c: 144: newStatusAvailable = ((boolean) 0);
  1995  0191  01B2               	clrf	_newStatusAvailable	;volatile
  1996                           
  1997                           ;UART_RX_SM.c: 146: uint8_t FieldAddressMSB = ReceivedData[4];
  1998  0192  0848               	movf	_ReceivedData+4,w	;volatile
  1999  0193  00D7               	movwf	??_RunUARTRXService
  2000  0194  0857               	movf	??_RunUARTRXService,w
  2001  0195  00DE               	movwf	RunUARTRXService@FieldAddressMSB
  2002                           
  2003                           ;UART_RX_SM.c: 147: uint8_t FieldAddressLSB = ReceivedData[4];
  2004  0196  0848               	movf	_ReceivedData+4,w	;volatile
  2005  0197  00D7               	movwf	??_RunUARTRXService
  2006  0198  0857               	movf	??_RunUARTRXService,w
  2007  0199  00DF               	movwf	RunUARTRXService@FieldAddressLSB
  2008                           
  2009                           ;UART_RX_SM.c: 149: FieldAddr = (FieldAddressMSB<<8) | FieldAddressLSB;
  2010  019A  085F               	movf	RunUARTRXService@FieldAddressLSB,w
  2011  019B  00D7               	movwf	??_RunUARTRXService
  2012  019C  01D8               	clrf	??_RunUARTRXService+1
  2013  019D  085E               	movf	RunUARTRXService@FieldAddressMSB,w
  2014  019E  00D9               	movwf	??_RunUARTRXService+2
  2015  019F  01DA               	clrf	??_RunUARTRXService+3
  2016  01A0  0859               	movf	??_RunUARTRXService+2,w
  2017  01A1  00DA               	movwf	??_RunUARTRXService+3
  2018  01A2  01D9               	clrf	??_RunUARTRXService+2
  2019  01A3  0857               	movf	??_RunUARTRXService,w
  2020  01A4  0459               	iorwf	??_RunUARTRXService+2,w
  2021  01A5  00A3               	movwf	_FieldAddr
  2022  01A6  0858               	movf	??_RunUARTRXService+1,w
  2023  01A7  045A               	iorwf	??_RunUARTRXService+3,w
  2024  01A8  00A4               	movwf	_FieldAddr+1
  2025                           
  2026                           ;UART_RX_SM.c: 152: for (uint8_t i = 0; i < 2 + 2; i++)
  2027  01A9  01E0               	clrf	RunUARTRXService@i
  2028  01AA  3004               	movlw	4
  2029  01AB  0260               	subwf	RunUARTRXService@i,w
  2030  01AC  1803               	btfsc	3,0
  2031  01AD  29C2               	goto	l1856
  2032  01AE                     l1850:	
  2033                           
  2034                           ;UART_RX_SM.c: 153: {
  2035                           ;UART_RX_SM.c: 154: StatusArray[i] = ReceivedData[4+1 + i];
  2036  01AE  0860               	movf	RunUARTRXService@i,w
  2037  01AF  3E05               	addlw	5
  2038  01B0  3E44               	addlw	(low (_ReceivedData| 0))& (0+255)
  2039  01B1  0084               	movwf	4
  2040  01B2  1383               	bcf	3,7	;select IRP bank0
  2041  01B3  0800               	movf	0,w
  2042  01B4  00D7               	movwf	??_RunUARTRXService
  2043  01B5  0860               	movf	RunUARTRXService@i,w
  2044  01B6  3E3B               	addlw	(low (_StatusArray| 0))& (0+255)
  2045  01B7  0084               	movwf	4
  2046  01B8  0857               	movf	??_RunUARTRXService,w
  2047  01B9  0080               	movwf	0
  2048  01BA  3001               	movlw	1
  2049  01BB  00D7               	movwf	??_RunUARTRXService
  2050  01BC  0857               	movf	??_RunUARTRXService,w
  2051  01BD  07E0               	addwf	RunUARTRXService@i,f
  2052  01BE  3004               	movlw	4
  2053  01BF  0260               	subwf	RunUARTRXService@i,w
  2054  01C0  1C03               	skipc
  2055  01C1  29AE               	goto	l1850
  2056  01C2                     l1856:	
  2057                           
  2058                           ;UART_RX_SM.c: 155: }
  2059                           ;UART_RX_SM.c: 157: newStatusAvailable = ((boolean) !((boolean) 0));
  2060  01C2  3001               	movlw	1
  2061  01C3  00D7               	movwf	??_RunUARTRXService
  2062  01C4  0857               	movf	??_RunUARTRXService,w
  2063  01C5  00B2               	movwf	_newStatusAvailable	;volatile
  2064                           
  2065                           ;UART_RX_SM.c: 159: ES_Timer_InitTimer(0, 76);
  2066  01C6  304C               	movlw	76
  2067  01C7  00D0               	movwf	ES_Timer_InitTimer@NewTime
  2068  01C8  3000               	movlw	0
  2069  01C9  00D1               	movwf	ES_Timer_InitTimer@NewTime+1
  2070  01CA  3000               	movlw	0
  2071  01CB  118A  2490  118A   	fcall	_ES_Timer_InitTimer
  2072                           
  2073                           ;UART_RX_SM.c: 160: hasHeartbeat = ((boolean) !((boolean) 0));
  2074  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  2075  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  2076  01D0  01AD               	clrf	_hasHeartbeat
  2077  01D1  0AAD               	incf	_hasHeartbeat,f
  2078                           
  2079                           ;UART_RX_SM.c: 162: }
  2080                           ;UART_RX_SM.c: 163: }
  2081                           ;UART_RX_SM.c: 164: break;
  2082  01D2  29E1               	goto	l1870
  2083  01D3                     l1862:	
  2084                           ;UART_RX_SM.c: 165: case ES_TIMEOUT:
  2085                           
  2086                           
  2087                           ;UART_RX_SM.c: 166: if (ThisEvent.EventParam == 0)
  2088  01D3  0855               	movf	RunUARTRXService@ThisEvent+1,w
  2089  01D4  0456               	iorwf	RunUARTRXService@ThisEvent+2,w
  2090  01D5  1D03               	btfss	3,2
  2091  01D6  29E1               	goto	l1870
  2092                           
  2093                           ;UART_RX_SM.c: 167: {
  2094                           ;UART_RX_SM.c: 168: hasHeartbeat = ((boolean) 0);
  2095  01D7  01AD               	clrf	_hasHeartbeat
  2096                           
  2097                           ;UART_RX_SM.c: 173: }
  2098                           
  2099                           ;UART_RX_SM.c: 172: break;
  2100                           
  2101                           ;UART_RX_SM.c: 171: default:
  2102                           
  2103                           ;UART_RX_SM.c: 169: }
  2104                           ;UART_RX_SM.c: 170: break;
  2105  01D8  29E1               	goto	l1870
  2106  01D9                     l1868:	
  2107  01D9  0854               	movf	RunUARTRXService@ThisEvent,w
  2108                           
  2109                           ; Switch size 1, requested type "space"
  2110                           ; Number of cases is 2, Range of values is 4 to 7
  2111                           ; switch strategies available:
  2112                           ; Name         Instructions Cycles
  2113                           ; simple_byte            7     4 (average)
  2114                           ; direct_byte           18    10 (fixed)
  2115                           ; jumptable            263     9 (fixed)
  2116                           ;	Chosen strategy is simple_byte
  2117  01DA  3A04               	xorlw	4	; case 4
  2118  01DB  1903               	skipnz
  2119  01DC  29D3               	goto	l1862
  2120  01DD  3A03               	xorlw	3	; case 7
  2121  01DE  1903               	skipnz
  2122  01DF  2989               	goto	l1832
  2123  01E0  29E1               	goto	l1870
  2124  01E1                     l1870:	
  2125                           
  2126                           ;UART_RX_SM.c: 175: return ReturnEvent;
  2127  01E1  085B               	movf	RunUARTRXService@ReturnEvent,w
  2128  01E2  00D4               	movwf	?_RunUARTRXService
  2129  01E3  085C               	movf	RunUARTRXService@ReturnEvent+1,w
  2130  01E4  00D5               	movwf	?_RunUARTRXService+1
  2131  01E5  085D               	movf	RunUARTRXService@ReturnEvent+2,w
  2132  01E6  00D6               	movwf	?_RunUARTRXService+2
  2133  01E7  0008               	return
  2134  01E8                     __end_of_RunUARTRXService:	
  2135                           
  2136                           	psect	text4
  2137  0490                     __ptext4:	
  2138 ;; *************** function _ES_Timer_InitTimer *****************
  2139 ;; Defined at:
  2140 ;;		line 205 in file "ES_Timers.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;  Num             1    wreg     unsigned char 
  2143 ;;  NewTime         2    0[BANK0 ] unsigned int 
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;  Num             1    3[BANK0 ] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  1    wreg      enum E1482
  2148 ;; Registers used:
  2149 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2155 ;;      Params:         0       2       0       0
  2156 ;;      Locals:         0       1       0       0
  2157 ;;      Temps:          0       1       0       0
  2158 ;;      Totals:         0       4       0       0
  2159 ;;Total ram usage:        4 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    3
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_RunUARTRXService
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           
  2170                           ;psect for function _ES_Timer_InitTimer
  2171  0490                     _ES_Timer_InitTimer:	
  2172                           
  2173                           ;incstack = 0
  2174                           ; Regs used in _ES_Timer_InitTimer: [wreg-fsr0h+status,2+status,0+pclath]
  2175                           ;ES_Timer_InitTimer@Num stored from wreg
  2176  0490  1283               	bcf	3,5	;RP0=0, select bank0
  2177  0491  1303               	bcf	3,6	;RP1=0, select bank0
  2178  0492  00D3               	movwf	ES_Timer_InitTimer@Num
  2179                           
  2180                           ;ES_Timers.c: 208: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  2181                           ;ES_Timers.c: 210: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  2182                           ;ES_Timers.c: 212: (NewTime == 0) )
  2183  0493  3008               	movlw	8
  2184  0494  0253               	subwf	ES_Timer_InitTimer@Num,w
  2185  0495  1803               	skipnc
  2186  0496  0008               	return
  2187  0497  0853               	movf	ES_Timer_InitTimer@Num,w
  2188  0498  3E10               	addlw	low ((_Timer2PostFunc-__stringbase)| (0+32768))
  2189  0499  0084               	movwf	4
  2190  049A  118A  2439  118A   	fcall	stringdir
  2191  049D  3A00               	xorlw	0
  2192  049E  1903               	skipnz
  2193  049F  0008               	return
  2194  04A0  0850               	movf	ES_Timer_InitTimer@NewTime,w
  2195  04A1  0451               	iorwf	ES_Timer_InitTimer@NewTime+1,w
  2196  04A2  1903               	btfsc	3,2
  2197  04A3  0008               	return
  2198                           
  2199                           ;ES_Timers.c: 214: TMR_TimerArray[Num] = NewTime;
  2200                           
  2201                           ;ES_Timers.c: 213: return ES_Timer_ERR;
  2202                           ;	Return value of _ES_Timer_InitTimer is never used
  2203  04A4  0853               	movf	ES_Timer_InitTimer@Num,w
  2204  04A5  00D2               	movwf	??_ES_Timer_InitTimer
  2205  04A6  0752               	addwf	??_ES_Timer_InitTimer,w
  2206  04A7  3EA0               	addlw	(low (_TMR_TimerArray| 0))& (0+255)
  2207  04A8  0084               	movwf	4
  2208  04A9  0850               	movf	ES_Timer_InitTimer@NewTime,w
  2209  04AA  1383               	bcf	3,7	;select IRP bank1
  2210  04AB  0080               	movwf	0
  2211  04AC  0A84               	incf	4,f
  2212  04AD  0851               	movf	ES_Timer_InitTimer@NewTime+1,w
  2213  04AE  0080               	movwf	0
  2214                           
  2215                           ;ES_Timers.c: 215: TMR_ActiveFlags |= BitNum2SetMask[Num];
  2216  04AF  0853               	movf	ES_Timer_InitTimer@Num,w
  2217  04B0  3E18               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  2218  04B1  0084               	movwf	4
  2219  04B2  118A  2439         	fcall	stringdir
  2220  04B4  00D2               	movwf	??_ES_Timer_InitTimer
  2221  04B5  0852               	movf	??_ES_Timer_InitTimer,w
  2222  04B6  04B7               	iorwf	_TMR_ActiveFlags,f
  2223  04B7  0008               	return
  2224  04B8                     __end_of_ES_Timer_InitTimer:	
  2225                           ;ES_Timers.c: 216: return ES_Timer_OK;
  2226                           ;	Return value of _ES_Timer_InitTimer is never used
  2227                           
  2228                           
  2229                           	psect	text5
  2230  058C                     __ptext5:	
  2231 ;; *************** function _RunSPIService *****************
  2232 ;; Defined at:
  2233 ;;		line 162 in file "SPI_SM.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;  ReturnEvent     3    3[BANK0 ] struct ES_Event_t
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  3    0[BANK0 ] struct ES_Event_t
  2240 ;; Registers used:
  2241 ;;		wreg, status,2
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2247 ;;      Params:         0       3       0       0
  2248 ;;      Locals:         0       3       0       0
  2249 ;;      Temps:          0       0       0       0
  2250 ;;      Totals:         0       6       0       0
  2251 ;;Total ram usage:        6 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    3
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_ES_Run
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           
  2262                           ;psect for function _RunSPIService
  2263  058C                     _RunSPIService:	
  2264                           
  2265                           ;SPI_SM.c: 163: ES_Event ReturnEvent;
  2266                           ;SPI_SM.c: 164: ReturnEvent.EventType = ES_NO_EVENT;
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _RunSPIService: [wreg+status,2]
  2270  058C  1283               	bcf	3,5	;RP0=0, select bank0
  2271  058D  1303               	bcf	3,6	;RP1=0, select bank0
  2272  058E  01D3               	clrf	RunSPIService@ReturnEvent
  2273                           
  2274                           ;SPI_SM.c: 166: return ReturnEvent;
  2275  058F  0853               	movf	RunSPIService@ReturnEvent,w
  2276  0590  00D0               	movwf	?_RunSPIService
  2277  0591  0854               	movf	RunSPIService@ReturnEvent+1,w
  2278  0592  00D1               	movwf	?_RunSPIService+1
  2279  0593  0855               	movf	RunSPIService@ReturnEvent+2,w
  2280  0594  00D2               	movwf	?_RunSPIService+2
  2281  0595  0008               	return
  2282  0596                     __end_of_RunSPIService:	
  2283                           
  2284                           	psect	text6
  2285  0581                     __ptext6:	
  2286 ;; *************** function _IsTimerPending *****************
  2287 ;; Defined at:
  2288 ;;		line 78 in file "ES_Port.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      unsigned char 
  2295 ;; Registers used:
  2296 ;;		wreg, status,2, status,0
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2302 ;;      Params:         0       0       0       0
  2303 ;;      Locals:         0       0       0       0
  2304 ;;      Temps:          0       0       0       0
  2305 ;;      Totals:         0       0       0       0
  2306 ;;Total ram usage:        0 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    3
  2309 ;; This function calls:
  2310 ;;		Nothing
  2311 ;; This function is called by:
  2312 ;;		_ES_Run
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           
  2317                           ;psect for function _IsTimerPending
  2318  0581                     _IsTimerPending:	
  2319                           
  2320                           ;ES_Port.c: 79: if (TickCount > 0) {
  2321                           
  2322                           ;incstack = 0
  2323                           ; Regs used in _IsTimerPending: [wreg+status,2+status,0]
  2324  0581  1283               	bcf	3,5	;RP0=0, select bank0
  2325  0582  1303               	bcf	3,6	;RP1=0, select bank0
  2326  0583  0838               	movf	_TickCount,w
  2327  0584  1903               	btfsc	3,2
  2328  0585  2D8A               	goto	l1910
  2329                           
  2330                           ;ES_Port.c: 80: TickCount--;
  2331  0586  3001               	movlw	1
  2332  0587  02B8               	subwf	_TickCount,f
  2333                           
  2334                           ;ES_Port.c: 81: return (1);
  2335  0588  3001               	movlw	1
  2336                           
  2337                           ;ES_Port.c: 82: } else
  2338  0589  0008               	return
  2339  058A                     l1910:	
  2340                           
  2341                           ;ES_Port.c: 83: return (0);
  2342  058A  3000               	movlw	0
  2343  058B  0008               	return
  2344  058C                     __end_of_IsTimerPending:	
  2345                           
  2346                           	psect	text7
  2347  01E8                     __ptext7:	
  2348 ;; *************** function _ES_Timer_RTI_Resp *****************
  2349 ;; Defined at:
  2350 ;;		line 259 in file "ES_Timers.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;		None
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;		None
  2355 ;; Return value:  Size  Location     Type
  2356 ;;                  1    wreg      void 
  2357 ;; Registers used:
  2358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2364 ;;      Params:         0       0       0       0
  2365 ;;      Locals:         0       0       0       0
  2366 ;;      Temps:          0       3       0       0
  2367 ;;      Totals:         0       3       0       0
  2368 ;;Total ram usage:        3 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    7
  2371 ;; This function calls:
  2372 ;;		Absolute function
  2373 ;;		_ES_GetMSBitSet
  2374 ;;		_PostUARTRXService
  2375 ;; This function is called by:
  2376 ;;		_ES_Run
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           
  2381                           ;psect for function _ES_Timer_RTI_Resp
  2382  01E8                     _ES_Timer_RTI_Resp:	
  2383                           
  2384                           ;ES_Timers.c: 260: static Tflag_t NeedsProcessing;
  2385                           ;ES_Timers.c: 261: static uint8_t NextTimer2Process;
  2386                           ;ES_Timers.c: 262: static ES_Event NewEvent;
  2387                           ;ES_Timers.c: 264: ++time;
  2388                           
  2389                           ;incstack = 0
  2390 ;; using string table level
  2391                           ; Regs used in _ES_Timer_RTI_Resp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2392  01E8  3001               	movlw	1
  2393  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  2394  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  2395  01EB  07A5               	addwf	_time,f	;volatile
  2396  01EC  1803               	skipnc
  2397  01ED  0AA6               	incf	_time+1,f	;volatile
  2398  01EE  3000               	movlw	0
  2399  01EF  07A6               	addwf	_time+1,f	;volatile
  2400                           
  2401                           ;ES_Timers.c: 265: if (TMR_ActiveFlags != 0) {
  2402  01F0  0837               	movf	_TMR_ActiveFlags,w
  2403  01F1  1903               	btfsc	3,2
  2404  01F2  0008               	return
  2405                           
  2406                           ;ES_Timers.c: 267: NeedsProcessing = TMR_ActiveFlags;
  2407  01F3  0837               	movf	_TMR_ActiveFlags,w
  2408  01F4  00E5               	movwf	??_ES_Timer_RTI_Resp
  2409  01F5  0865               	movf	??_ES_Timer_RTI_Resp,w
  2410  01F6  00B6               	movwf	ES_Timer_RTI_Resp@NeedsProcessing
  2411  01F7                     l2292:	
  2412                           ;ES_Timers.c: 268: do {
  2413                           
  2414                           
  2415                           ;ES_Timers.c: 270: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  2416  01F7  0836               	movf	ES_Timer_RTI_Resp@NeedsProcessing,w
  2417  01F8  118A  235A  118A   	fcall	_ES_GetMSBitSet
  2418  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  2419  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  2420  01FD  00E5               	movwf	??_ES_Timer_RTI_Resp
  2421  01FE  0865               	movf	??_ES_Timer_RTI_Resp,w
  2422  01FF  00B5               	movwf	ES_Timer_RTI_Resp@NextTimer2Process
  2423                           
  2424                           ;ES_Timers.c: 272: if (--TMR_TimerArray[NextTimer2Process] == 0) {
  2425  0200  0835               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  2426  0201  00E5               	movwf	??_ES_Timer_RTI_Resp
  2427  0202  0765               	addwf	??_ES_Timer_RTI_Resp,w
  2428  0203  3EA0               	addlw	(low (_TMR_TimerArray| 0))& (0+255)
  2429  0204  0084               	movwf	4
  2430  0205  3001               	movlw	1
  2431  0206  1383               	bcf	3,7	;select IRP bank1
  2432  0207  0280               	subwf	0,f
  2433  0208  0F84               	incfsz	4,f
  2434  0209  3000               	movlw	0
  2435  020A  1C03               	skipc
  2436  020B  0380               	decf	0,f
  2437  020C  0280               	subwf	0,f
  2438  020D  0384               	decf	4,f
  2439  020E  0800               	movf	0,w
  2440  020F  00E6               	movwf	??_ES_Timer_RTI_Resp+1
  2441  0210  0A84               	incf	4,f
  2442  0211  0800               	movf	0,w
  2443  0212  00E7               	movwf	??_ES_Timer_RTI_Resp+2
  2444  0213  0866               	movf	??_ES_Timer_RTI_Resp+1,w
  2445  0214  0467               	iorwf	??_ES_Timer_RTI_Resp+2,w
  2446  0215  1D03               	btfss	3,2
  2447  0216  2A3D               	goto	l2302
  2448                           
  2449                           ;ES_Timers.c: 273: NewEvent.EventType = ES_TIMEOUT;
  2450  0217  3004               	movlw	4
  2451  0218  00E5               	movwf	??_ES_Timer_RTI_Resp
  2452  0219  0865               	movf	??_ES_Timer_RTI_Resp,w
  2453  021A  00A0               	movwf	ES_Timer_RTI_Resp@NewEvent
  2454                           
  2455                           ;ES_Timers.c: 274: NewEvent.EventParam = NextTimer2Process;
  2456  021B  0835               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  2457  021C  00E5               	movwf	??_ES_Timer_RTI_Resp
  2458  021D  01E6               	clrf	??_ES_Timer_RTI_Resp+1
  2459  021E  0865               	movf	??_ES_Timer_RTI_Resp,w
  2460  021F  00A1               	movwf	ES_Timer_RTI_Resp@NewEvent+1
  2461  0220  0866               	movf	??_ES_Timer_RTI_Resp+1,w
  2462  0221  00A2               	movwf	ES_Timer_RTI_Resp@NewEvent+2
  2463                           
  2464                           ;ES_Timers.c: 276: Timer2PostFunc[NextTimer2Process](NewEvent);
  2465  0222  0820               	movf	ES_Timer_RTI_Resp@NewEvent,w
  2466  0223  00E2               	movwf	PostUARTRXService@ThisEvent
  2467  0224  0821               	movf	ES_Timer_RTI_Resp@NewEvent+1,w
  2468  0225  00E3               	movwf	PostUARTRXService@ThisEvent+1
  2469  0226  0822               	movf	ES_Timer_RTI_Resp@NewEvent+2,w
  2470  0227  00E4               	movwf	PostUARTRXService@ThisEvent+2
  2471  0228  0835               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  2472  0229  3E10               	addlw	low ((_Timer2PostFunc-__stringbase)| (0+32768))
  2473  022A  0084               	movwf	4
  2474  022B  118A  2439  118A   	fcall	stringdir
  2475  022E  118A  202D  118A   	fcall	fptable
  2476                           
  2477                           ;ES_Timers.c: 278: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  2478  0231  1283               	bcf	3,5	;RP0=0, select bank0
  2479  0232  1303               	bcf	3,6	;RP1=0, select bank0
  2480  0233  0835               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  2481  0234  3E18               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  2482  0235  0084               	movwf	4
  2483  0236  118A  2439  118A   	fcall	stringdir
  2484  0239  3AFF               	xorlw	255
  2485  023A  00E5               	movwf	??_ES_Timer_RTI_Resp
  2486  023B  0865               	movf	??_ES_Timer_RTI_Resp,w
  2487  023C  05B7               	andwf	_TMR_ActiveFlags,f
  2488  023D                     l2302:	
  2489                           
  2490                           ;ES_Timers.c: 279: }
  2491                           ;ES_Timers.c: 281: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  2492  023D  0835               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  2493  023E  3E18               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  2494  023F  0084               	movwf	4
  2495  0240  118A  2439  118A   	fcall	stringdir
  2496  0243  3AFF               	xorlw	255
  2497  0244  00E5               	movwf	??_ES_Timer_RTI_Resp
  2498  0245  0865               	movf	??_ES_Timer_RTI_Resp,w
  2499  0246  05B6               	andwf	ES_Timer_RTI_Resp@NeedsProcessing,f
  2500                           
  2501                           ;ES_Timers.c: 282: } while (NeedsProcessing != 0);
  2502  0247  0836               	movf	ES_Timer_RTI_Resp@NeedsProcessing,w
  2503  0248  1903               	btfsc	3,2
  2504  0249  0008               	return
  2505  024A  29F7               	goto	l2292
  2506  024B                     __end_of_ES_Timer_RTI_Resp:	
  2507                           
  2508                           	psect	text8
  2509  0575                     __ptext8:	
  2510 ;; *************** function _PostUARTRXService *****************
  2511 ;; Defined at:
  2512 ;;		line 110 in file "UART_RX_SM.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  ThisEvent       3   18[BANK0 ] struct ES_Event_t
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;		None
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  1    wreg      unsigned char 
  2519 ;; Registers used:
  2520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2526 ;;      Params:         0       3       0       0
  2527 ;;      Locals:         0       0       0       0
  2528 ;;      Temps:          0       0       0       0
  2529 ;;      Totals:         0       3       0       0
  2530 ;;Total ram usage:        3 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    6
  2533 ;; This function calls:
  2534 ;;		_ES_PostToService
  2535 ;; This function is called by:
  2536 ;;		_ES_Timer_RTI_Resp
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           
  2541                           ;psect for function _PostUARTRXService
  2542  0575                     _PostUARTRXService:	
  2543                           
  2544                           ;UART_RX_SM.c: 111: return ES_PostToService(MyPriority, ThisEvent);
  2545                           ;	Return value of _PostUARTRXService is never used
  2546                           
  2547                           ;incstack = 0
  2548                           ; Regs used in _PostUARTRXService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2549  0575  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0576  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0577  0862               	movf	PostUARTRXService@ThisEvent,w
  2552  0578  00DD               	movwf	ES_PostToService@TheEvent
  2553  0579  0863               	movf	PostUARTRXService@ThisEvent+1,w
  2554  057A  00DE               	movwf	ES_PostToService@TheEvent+1
  2555  057B  0864               	movf	PostUARTRXService@ThisEvent+2,w
  2556  057C  00DF               	movwf	ES_PostToService@TheEvent+2
  2557  057D  0834               	movf	_MyPriority,w
  2558  057E  118A  2467         	fcall	_ES_PostToService
  2559  0580  0008               	return
  2560  0581                     __end_of_PostUARTRXService:	
  2561                           
  2562                           	psect	text9
  2563  035A                     __ptext9:	
  2564 ;; *************** function _ES_GetMSBitSet *****************
  2565 ;; Defined at:
  2566 ;;		line 78 in file "ES_LookupTables.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;  Val2Check       1    wreg     unsigned char 
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;  Val2Check       1    3[BANK0 ] unsigned char 
  2571 ;;  LoopCntr        1    6[BANK0 ] char 
  2572 ;;  Nybble2Test     1    5[BANK0 ] unsigned char 
  2573 ;;  ReturnVal       1    4[BANK0 ] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      unsigned char 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2583 ;;      Params:         0       0       0       0
  2584 ;;      Locals:         0       4       0       0
  2585 ;;      Temps:          0       3       0       0
  2586 ;;      Totals:         0       7       0       0
  2587 ;;Total ram usage:        7 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    3
  2590 ;; This function calls:
  2591 ;;		Nothing
  2592 ;; This function is called by:
  2593 ;;		_ES_Run
  2594 ;;		_ES_Timer_RTI_Resp
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           
  2599                           ;psect for function _ES_GetMSBitSet
  2600  035A                     _ES_GetMSBitSet:	
  2601                           
  2602                           ;incstack = 0
  2603                           ; Regs used in _ES_GetMSBitSet: [wreg-fsr0h+status,2+status,0+pclath]
  2604                           ;ES_GetMSBitSet@Val2Check stored from wreg
  2605  035A  1283               	bcf	3,5	;RP0=0, select bank0
  2606  035B  1303               	bcf	3,6	;RP1=0, select bank0
  2607  035C  00D3               	movwf	ES_GetMSBitSet@Val2Check
  2608                           
  2609                           ;ES_LookupTables.c: 80: int8_t LoopCntr;
  2610                           ;ES_LookupTables.c: 81: uint8_t Nybble2Test;
  2611                           ;ES_LookupTables.c: 82: uint8_t ReturnVal = 128;
  2612  035D  3080               	movlw	128
  2613  035E  00D0               	movwf	??_ES_GetMSBitSet
  2614  035F  0850               	movf	??_ES_GetMSBitSet,w
  2615  0360  00D4               	movwf	ES_GetMSBitSet@ReturnVal
  2616                           
  2617                           ;ES_LookupTables.c: 85: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2618  0361  01D6               	clrf	ES_GetMSBitSet@LoopCntr
  2619  0362  0AD6               	incf	ES_GetMSBitSet@LoopCntr,f
  2620                           
  2621                           ;ES_LookupTables.c: 86: LoopCntr >= 0; LoopCntr--) {
  2622  0363  1BD6               	btfsc	ES_GetMSBitSet@LoopCntr,7
  2623  0364  2B9A               	goto	l1742
  2624  0365                     l1734:	
  2625                           
  2626                           ;ES_LookupTables.c: 88: Nybble2Test = (uint8_t)
  2627                           ;ES_LookupTables.c: 89: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2628                           ;ES_LookupTables.c: 90: 0x0F);
  2629  0365  0853               	movf	ES_GetMSBitSet@Val2Check,w
  2630  0366  00D0               	movwf	??_ES_GetMSBitSet
  2631  0367  0856               	movf	ES_GetMSBitSet@LoopCntr,w
  2632  0368  00D1               	movwf	??_ES_GetMSBitSet+1
  2633  0369  3001               	movlw	1
  2634  036A                     u785:	
  2635  036A  1003               	clrc
  2636  036B  0DD1               	rlf	??_ES_GetMSBitSet+1,f
  2637  036C  3EFF               	addlw	-1
  2638  036D  1D03               	skipz
  2639  036E  2B6A               	goto	u785
  2640  036F  1003               	clrc
  2641  0370  0D51               	rlf	??_ES_GetMSBitSet+1,w
  2642  0371  3E01               	addlw	1
  2643  0372  2B75               	goto	u794
  2644  0373                     u795:	
  2645  0373  1003               	clrc
  2646  0374  0CD0               	rrf	??_ES_GetMSBitSet,f
  2647  0375                     u794:	
  2648  0375  3EFF               	addlw	-1
  2649  0376  1D03               	skipz
  2650  0377  2B73               	goto	u795
  2651  0378  0850               	movf	??_ES_GetMSBitSet,w
  2652  0379  390F               	andlw	15
  2653  037A  00D2               	movwf	??_ES_GetMSBitSet+2
  2654  037B  0852               	movf	??_ES_GetMSBitSet+2,w
  2655  037C  00D5               	movwf	ES_GetMSBitSet@Nybble2Test
  2656                           
  2657                           ;ES_LookupTables.c: 91: if ( Nybble2Test != 0){
  2658  037D  0855               	movf	ES_GetMSBitSet@Nybble2Test,w
  2659  037E  1903               	btfsc	3,2
  2660  037F  2B94               	goto	l1738
  2661                           
  2662                           ;ES_LookupTables.c: 93: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2663                           ;ES_LookupTables.c: 94: (LoopCntr * 4);
  2664  0380  0856               	movf	ES_GetMSBitSet@LoopCntr,w
  2665  0381  00D0               	movwf	??_ES_GetMSBitSet
  2666  0382  3002               	movlw	2
  2667  0383                     u815:	
  2668  0383  1003               	clrc
  2669  0384  0DD0               	rlf	??_ES_GetMSBitSet,f
  2670  0385  3EFF               	addlw	-1
  2671  0386  1D03               	skipz
  2672  0387  2B83               	goto	u815
  2673  0388  0855               	movf	ES_GetMSBitSet@Nybble2Test,w
  2674  0389  3EFF               	addlw	255
  2675  038A  3E01               	addlw	low ((_Nybble2MSBitNum-__stringbase)| (0+32768))
  2676  038B  0084               	movwf	4
  2677  038C  118A  2439  118A   	fcall	stringdir
  2678  038F  0750               	addwf	??_ES_GetMSBitSet,w
  2679  0390  00D1               	movwf	??_ES_GetMSBitSet+1
  2680  0391  0851               	movf	??_ES_GetMSBitSet+1,w
  2681  0392  00D4               	movwf	ES_GetMSBitSet@ReturnVal
  2682                           
  2683                           ;ES_LookupTables.c: 95: break;
  2684  0393  2B9A               	goto	l1742
  2685  0394                     l1738:	
  2686  0394  30FF               	movlw	255
  2687  0395  00D0               	movwf	??_ES_GetMSBitSet
  2688  0396  0850               	movf	??_ES_GetMSBitSet,w
  2689  0397  07D6               	addwf	ES_GetMSBitSet@LoopCntr,f
  2690  0398  1FD6               	btfss	ES_GetMSBitSet@LoopCntr,7
  2691  0399  2B65               	goto	l1734
  2692  039A                     l1742:	
  2693                           
  2694                           ;ES_LookupTables.c: 96: }
  2695                           ;ES_LookupTables.c: 97: }
  2696                           ;ES_LookupTables.c: 98: return ReturnVal;
  2697  039A  0854               	movf	ES_GetMSBitSet@ReturnVal,w
  2698  039B  0008               	return
  2699  039C                     __end_of_ES_GetMSBitSet:	
  2700                           
  2701                           	psect	text10
  2702  024B                     __ptext10:	
  2703 ;; *************** function _ES_DeQueue *****************
  2704 ;; Defined at:
  2705 ;;		line 125 in file "ES_Queue.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;  pBlock          1    wreg     PTR struct ES_Event_t
  2708 ;;		 -> Queue1(12), Queue0(12), 
  2709 ;;  pReturnEvent    1    4[BANK0 ] PTR struct ES_Event_t
  2710 ;;		 -> ES_Run@ThisEvent(3), 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  pBlock          1   12[BANK0 ] PTR struct ES_Event_t
  2713 ;;		 -> Queue1(12), Queue0(12), 
  2714 ;;  pThisQueue      1   13[BANK0 ] PTR struct .
  2715 ;;		 -> Queue1(12), Queue0(12), 
  2716 ;;  NumLeft         1   11[BANK0 ] unsigned char 
  2717 ;;  saveCrit        1   10[BANK0 ] unsigned char 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      unsigned char 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2727 ;;      Params:         0       1       0       0
  2728 ;;      Locals:         0       4       0       0
  2729 ;;      Temps:          0       5       0       0
  2730 ;;      Totals:         0      10       0       0
  2731 ;;Total ram usage:       10 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    4
  2734 ;; This function calls:
  2735 ;;		___bmul
  2736 ;; This function is called by:
  2737 ;;		_ES_Run
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           
  2742                           ;psect for function _ES_DeQueue
  2743  024B                     _ES_DeQueue:	
  2744                           
  2745                           ;incstack = 0
  2746                           ; Regs used in _ES_DeQueue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2747                           ;ES_DeQueue@pBlock stored from wreg
  2748  024B  1283               	bcf	3,5	;RP0=0, select bank0
  2749  024C  1303               	bcf	3,6	;RP1=0, select bank0
  2750  024D  00DC               	movwf	ES_DeQueue@pBlock
  2751                           
  2752                           ;ES_Queue.c: 127: unsigned char saveCrit;
  2753                           ;ES_Queue.c: 128: pQueue_t pThisQueue;
  2754                           ;ES_Queue.c: 129: uint8_t NumLeft;
  2755                           ;ES_Queue.c: 131: pThisQueue = (pQueue_t)pBlock;
  2756  024E  085C               	movf	ES_DeQueue@pBlock,w
  2757  024F  00D5               	movwf	??_ES_DeQueue
  2758  0250  0855               	movf	??_ES_DeQueue,w
  2759  0251  00DD               	movwf	ES_DeQueue@pThisQueue
  2760                           
  2761                           ;ES_Queue.c: 132: if ( pThisQueue->NumEntries > 0)
  2762  0252  085D               	movf	ES_DeQueue@pThisQueue,w
  2763  0253  3E02               	addlw	2
  2764  0254  0084               	movwf	4
  2765  0255  1383               	bcf	3,7	;select IRP bank0
  2766  0256  0800               	movf	0,w
  2767  0257  1903               	btfsc	3,2
  2768  0258  2AA3               	goto	l1820
  2769                           
  2770                           ;ES_Queue.c: 133: {
  2771                           ;ES_Queue.c: 134: do{ saveCrit = INTCON; GIE = 0;}while(0);
  2772  0259  080B               	movf	11,w	;volatile
  2773  025A  00D5               	movwf	??_ES_DeQueue
  2774  025B  0855               	movf	??_ES_DeQueue,w
  2775  025C  00DA               	movwf	ES_DeQueue@saveCrit
  2776  025D  138B               	bcf	11,7	;volatile
  2777                           
  2778                           ;ES_Queue.c: 135: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2779  025E  3003               	movlw	3
  2780  025F  00D5               	movwf	??_ES_DeQueue
  2781  0260  0855               	movf	??_ES_DeQueue,w
  2782  0261  00D0               	movwf	___bmul@multiplicand
  2783  0262  0A5D               	incf	ES_DeQueue@pThisQueue,w
  2784  0263  0084               	movwf	4
  2785  0264  0800               	movf	0,w
  2786  0265  3E01               	addlw	1
  2787  0266  118A  2553  118A   	fcall	___bmul
  2788  0269  1283               	bcf	3,5	;RP0=0, select bank0
  2789  026A  1303               	bcf	3,6	;RP1=0, select bank0
  2790  026B  075C               	addwf	ES_DeQueue@pBlock,w
  2791  026C  00D6               	movwf	??_ES_DeQueue+1
  2792  026D  0856               	movf	??_ES_DeQueue+1,w
  2793  026E  0084               	movwf	4
  2794  026F  1383               	bcf	3,7	;select IRP bank0
  2795  0270  0800               	movf	0,w
  2796  0271  00D7               	movwf	??_ES_DeQueue+2
  2797  0272  0A84               	incf	4,f
  2798  0273  0800               	movf	0,w
  2799  0274  00D8               	movwf	??_ES_DeQueue+3
  2800  0275  0A84               	incf	4,f
  2801  0276  0800               	movf	0,w
  2802  0277  00D9               	movwf	??_ES_DeQueue+4
  2803  0278  0854               	movf	ES_DeQueue@pReturnEvent,w
  2804  0279  0084               	movwf	4
  2805  027A  0857               	movf	??_ES_DeQueue+2,w
  2806  027B  0080               	movwf	0
  2807  027C  0A84               	incf	4,f
  2808  027D  0858               	movf	??_ES_DeQueue+3,w
  2809  027E  0080               	movwf	0
  2810  027F  0A84               	incf	4,f
  2811  0280  0859               	movf	??_ES_DeQueue+4,w
  2812  0281  0080               	movwf	0
  2813                           
  2814                           ;ES_Queue.c: 137: pThisQueue->CurrentIndex++;
  2815  0282  3001               	movlw	1
  2816  0283  00D5               	movwf	??_ES_DeQueue
  2817  0284  0A5D               	incf	ES_DeQueue@pThisQueue,w
  2818  0285  0084               	movwf	4
  2819  0286  0855               	movf	??_ES_DeQueue,w
  2820  0287  0780               	addwf	0,f
  2821                           
  2822                           ;ES_Queue.c: 138: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2823  0288  085D               	movf	ES_DeQueue@pThisQueue,w
  2824  0289  0084               	movwf	4
  2825  028A  0800               	movf	0,w
  2826  028B  00D5               	movwf	??_ES_DeQueue
  2827  028C  0A5D               	incf	ES_DeQueue@pThisQueue,w
  2828  028D  0084               	movwf	4
  2829  028E  0800               	movf	0,w
  2830  028F  00D6               	movwf	??_ES_DeQueue+1
  2831  0290  0855               	movf	??_ES_DeQueue,w
  2832  0291  0256               	subwf	??_ES_DeQueue+1,w
  2833  0292  1C03               	skipc
  2834  0293  2A97               	goto	l1816
  2835                           
  2836                           ;ES_Queue.c: 139: pThisQueue->CurrentIndex = 0;
  2837  0294  0A5D               	incf	ES_DeQueue@pThisQueue,w
  2838  0295  0084               	movwf	4
  2839  0296  0180               	clrf	0
  2840  0297                     l1816:	
  2841                           
  2842                           ;ES_Queue.c: 141: NumLeft = --pThisQueue->NumEntries;
  2843  0297  085D               	movf	ES_DeQueue@pThisQueue,w
  2844  0298  3E02               	addlw	2
  2845  0299  0084               	movwf	4
  2846  029A  3001               	movlw	1
  2847  029B  0280               	subwf	0,f
  2848  029C  0800               	movf	0,w
  2849  029D  00D5               	movwf	??_ES_DeQueue
  2850  029E  0855               	movf	??_ES_DeQueue,w
  2851  029F  00DB               	movwf	ES_DeQueue@NumLeft
  2852                           
  2853                           ;ES_Queue.c: 142: {INTCON = saveCrit;};
  2854  02A0  085A               	movf	ES_DeQueue@saveCrit,w
  2855  02A1  008B               	movwf	11	;volatile
  2856                           
  2857                           ;ES_Queue.c: 143: }else {
  2858  02A2  2AAC               	goto	l1826
  2859  02A3                     l1820:	
  2860                           
  2861                           ;ES_Queue.c: 144: (*pReturnEvent).EventType = ES_NO_EVENT;
  2862  02A3  0854               	movf	ES_DeQueue@pReturnEvent,w
  2863  02A4  0084               	movwf	4
  2864  02A5  0180               	clrf	0
  2865                           
  2866                           ;ES_Queue.c: 145: (*pReturnEvent).EventParam = 0;
  2867  02A6  0A54               	incf	ES_DeQueue@pReturnEvent,w
  2868  02A7  0084               	movwf	4
  2869  02A8  0180               	clrf	0
  2870  02A9  0A84               	incf	4,f
  2871  02AA  0180               	clrf	0
  2872                           
  2873                           ;ES_Queue.c: 146: NumLeft = 0;
  2874  02AB  01DB               	clrf	ES_DeQueue@NumLeft
  2875  02AC                     l1826:	
  2876                           
  2877                           ;ES_Queue.c: 147: }
  2878                           ;ES_Queue.c: 148: return NumLeft;
  2879  02AC  085B               	movf	ES_DeQueue@NumLeft,w
  2880  02AD  0008               	return
  2881  02AE                     __end_of_ES_DeQueue:	
  2882                           
  2883                           	psect	text11
  2884  04D6                     __ptext11:	
  2885 ;; *************** function _CheckUARTRXEvent *****************
  2886 ;; Defined at:
  2887 ;;		line 396 in file "UART_RX_SM.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;		None
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  CommEvent       3   19[BANK0 ] struct ES_Event_t
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      unsigned char 
  2894 ;; Registers used:
  2895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2901 ;;      Params:         0       0       0       0
  2902 ;;      Locals:         0       3       0       0
  2903 ;;      Temps:          0       1       0       0
  2904 ;;      Totals:         0       4       0       0
  2905 ;;Total ram usage:        4 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    6
  2908 ;; This function calls:
  2909 ;;		_ES_PostToService
  2910 ;; This function is called by:
  2911 ;;		_ES_Run
  2912 ;;		_ES_CheckUserEvents
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           
  2917                           ;psect for function _CheckUARTRXEvent
  2918  04D6                     _CheckUARTRXEvent:	
  2919                           
  2920                           ;UART_RX_SM.c: 397: if (RXFlag)
  2921                           
  2922                           ;incstack = 0
  2923                           ; Regs used in _CheckUARTRXEvent: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2924  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  2925  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  2926  04D8  082E               	movf	_RXFlag,w	;volatile
  2927  04D9  1903               	btfsc	3,2
  2928  04DA  2CEF               	goto	l1776
  2929                           
  2930                           ;UART_RX_SM.c: 398: {
  2931                           ;UART_RX_SM.c: 400: ES_Event CommEvent;
  2932                           ;UART_RX_SM.c: 401: CommEvent.EventType = ES_RX_NEW_PACKET;
  2933  04DB  3007               	movlw	7
  2934  04DC  00E2               	movwf	??_CheckUARTRXEvent
  2935  04DD  0862               	movf	??_CheckUARTRXEvent,w
  2936  04DE  00E3               	movwf	CheckUARTRXEvent@CommEvent
  2937                           
  2938                           ;UART_RX_SM.c: 402: CommEvent.EventParam = 0;
  2939  04DF  01E4               	clrf	CheckUARTRXEvent@CommEvent+1
  2940  04E0  01E5               	clrf	CheckUARTRXEvent@CommEvent+2
  2941                           
  2942                           ;UART_RX_SM.c: 403: ES_PostToService(0, CommEvent);
  2943  04E1  0863               	movf	CheckUARTRXEvent@CommEvent,w
  2944  04E2  00DD               	movwf	ES_PostToService@TheEvent
  2945  04E3  0864               	movf	CheckUARTRXEvent@CommEvent+1,w
  2946  04E4  00DE               	movwf	ES_PostToService@TheEvent+1
  2947  04E5  0865               	movf	CheckUARTRXEvent@CommEvent+2,w
  2948  04E6  00DF               	movwf	ES_PostToService@TheEvent+2
  2949  04E7  3000               	movlw	0
  2950  04E8  118A  2467         	fcall	_ES_PostToService
  2951                           
  2952                           ;UART_RX_SM.c: 405: RXFlag = ((boolean) 0);
  2953  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  2954  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  2955  04EC  01AE               	clrf	_RXFlag	;volatile
  2956                           
  2957                           ;UART_RX_SM.c: 406: return ((boolean) !((boolean) 0));
  2958  04ED  3001               	movlw	1
  2959  04EE  0008               	return
  2960  04EF                     l1776:	
  2961                           
  2962                           ;UART_RX_SM.c: 407: }
  2963                           ;UART_RX_SM.c: 408: return ((boolean) 0);
  2964  04EF  3000               	movlw	0
  2965  04F0  0008               	return
  2966  04F1                     __end_of_CheckUARTRXEvent:	
  2967                           
  2968                           	psect	text12
  2969  053D                     __ptext12:	
  2970 ;; *************** function _CheckSSEvent *****************
  2971 ;; Defined at:
  2972 ;;		line 290 in file "SPI_SM.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;		None
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  thisSS          1    2[BANK0 ] unsigned char 
  2977 ;;  returnVal       1    1[BANK0 ] unsigned char 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      unsigned char 
  2980 ;; Registers used:
  2981 ;;		wreg, status,2, status,0
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2987 ;;      Params:         0       0       0       0
  2988 ;;      Locals:         0       2       0       0
  2989 ;;      Temps:          0       1       0       0
  2990 ;;      Totals:         0       3       0       0
  2991 ;;Total ram usage:        3 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    3
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		_ES_Run
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           
  3002                           ;psect for function _CheckSSEvent
  3003  053D                     _CheckSSEvent:	
  3004                           
  3005                           ;SPI_SM.c: 291: static uint8_t lastSS = 0;
  3006                           ;SPI_SM.c: 292: uint8_t thisSS;
  3007                           ;SPI_SM.c: 293: boolean returnVal = ((boolean) 0);
  3008                           
  3009                           ;incstack = 0
  3010                           ; Regs used in _CheckSSEvent: [wreg+status,2+status,0]
  3011  053D  1283               	bcf	3,5	;RP0=0, select bank0
  3012  053E  1303               	bcf	3,6	;RP1=0, select bank0
  3013  053F  01D1               	clrf	CheckSSEvent@returnVal
  3014                           
  3015                           ;SPI_SM.c: 295: thisSS = RC6;
  3016  0540  3000               	movlw	0
  3017  0541  1B07               	btfsc	7,6	;volatile
  3018  0542  3001               	movlw	1
  3019  0543  00D2               	movwf	CheckSSEvent@thisSS
  3020                           
  3021                           ;SPI_SM.c: 296: if (thisSS != lastSS && thisSS)
  3022  0544  0852               	movf	CheckSSEvent@thisSS,w
  3023  0545  0627               	xorwf	CheckSSEvent@lastSS,w
  3024  0546  1903               	skipnz
  3025  0547  2D4E               	goto	l1924
  3026  0548  0852               	movf	CheckSSEvent@thisSS,w
  3027  0549  1903               	btfsc	3,2
  3028  054A  2D4E               	goto	l1924
  3029                           
  3030                           ;SPI_SM.c: 297: {
  3031                           ;SPI_SM.c: 299: currentState = Waiting4Command;
  3032  054B  01AB               	clrf	SPI_SM@currentState
  3033                           
  3034                           ;SPI_SM.c: 300: returnVal = ((boolean) !((boolean) 0));
  3035  054C  01D1               	clrf	CheckSSEvent@returnVal
  3036  054D  0AD1               	incf	CheckSSEvent@returnVal,f
  3037  054E                     l1924:	
  3038                           
  3039                           ;SPI_SM.c: 301: }
  3040                           ;SPI_SM.c: 303: lastSS = thisSS;
  3041  054E  0852               	movf	CheckSSEvent@thisSS,w
  3042  054F  00D0               	movwf	??_CheckSSEvent
  3043  0550  0850               	movf	??_CheckSSEvent,w
  3044  0551  00A7               	movwf	CheckSSEvent@lastSS
  3045  0552  0008               	return
  3046  0553                     __end_of_CheckSSEvent:	
  3047                           ;SPI_SM.c: 304: return returnVal;
  3048                           ;	Return value of _CheckSSEvent is never used
  3049                           
  3050                           
  3051                           	psect	text13
  3052  02AE                     __ptext13:	
  3053 ;; *************** function _ES_Initialize *****************
  3054 ;; Defined at:
  3055 ;;		line 189 in file "ES_Framework.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;  NewRate         1    wreg     enum E93
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  NewRate         1    0[COMMON] enum E93
  3060 ;;  i               1   25[BANK0 ] unsigned char 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  1    wreg      enum E1595
  3063 ;; Registers used:
  3064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3070 ;;      Params:         0       0       0       0
  3071 ;;      Locals:         0       1       0       0
  3072 ;;      Temps:          0       2       0       0
  3073 ;;      Totals:         0       3       0       0
  3074 ;;Total ram usage:        3 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    7
  3077 ;; This function calls:
  3078 ;;		_ES_InitQueue
  3079 ;;		_ES_Sys_Timer_Init
  3080 ;;		_InitSPIService
  3081 ;;		_InitUARTRXService
  3082 ;; This function is called by:
  3083 ;;		_main
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           
  3088                           ;psect for function _ES_Initialize
  3089  02AE                     _ES_Initialize:	
  3090                           
  3091                           ;ES_Framework.c: 190: unsigned char i;
  3092                           ;ES_Framework.c: 191: ES_Sys_Timer_Init();
  3093                           
  3094                           ;incstack = 0
  3095 ;; using string table level
  3096                           ; Regs used in _ES_Initialize: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3097  02AE  118A  24B8  118A   	fcall	_ES_Sys_Timer_Init
  3098                           
  3099                           ;ES_Framework.c: 193: for (i = 0; i < (sizeof(ServDescList)/sizeof(ServDescList[0])); i+
      +                          +) {
  3100  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  3101  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  3102  02B3  01E9               	clrf	ES_Initialize@i
  3103  02B4  3002               	movlw	2
  3104  02B5  0269               	subwf	ES_Initialize@i,w
  3105  02B6  1803               	btfsc	3,0
  3106  02B7  2B04               	goto	l2030
  3107  02B8                     l2012:	
  3108                           
  3109                           ;ES_Framework.c: 194: if ((ServDescList[i].InitFunc == (pInitFunc) 0) ||
  3110                           ;ES_Framework.c: 195: (ServDescList[i].RunFunc == (pRunFunc) 0))
  3111  02B8  0869               	movf	ES_Initialize@i,w
  3112  02B9  00E7               	movwf	??_ES_Initialize
  3113  02BA  0767               	addwf	??_ES_Initialize,w
  3114  02BB  3E24               	addlw	low ((_ServDescList-__stringbase)| (0+32768))
  3115  02BC  0084               	movwf	4
  3116  02BD  118A  2439  118A   	fcall	stringdir
  3117  02C0  3A00               	xorlw	0
  3118  02C1  1903               	skipnz
  3119  02C2  2ACD               	goto	l2016
  3120  02C3  1403               	setc
  3121  02C4  0D69               	rlf	ES_Initialize@i,w
  3122  02C5  3E24               	addlw	low ((_ServDescList-__stringbase)| (0+32768))
  3123  02C6  0084               	movwf	4
  3124  02C7  118A  2439  118A   	fcall	stringdir
  3125  02CA  3A00               	xorlw	0
  3126  02CB  1D03               	skipz
  3127  02CC  2ACF               	goto	l2020
  3128  02CD                     l2016:	
  3129                           
  3130                           ;ES_Framework.c: 196: return FailedPointer;
  3131  02CD  3003               	movlw	3
  3132  02CE  0008               	return
  3133  02CF                     l2020:	
  3134                           
  3135                           ;ES_Framework.c: 198: ES_InitQueue(EventQueues[i].pMem, EventQueues[i].Size);
  3136  02CF  1403               	setc
  3137  02D0  0D69               	rlf	ES_Initialize@i,w
  3138  02D1  3E20               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  3139  02D2  0084               	movwf	4
  3140  02D3  118A  2439  118A   	fcall	stringdir
  3141  02D6  00E7               	movwf	??_ES_Initialize
  3142  02D7  0867               	movf	??_ES_Initialize,w
  3143  02D8  00D0               	movwf	ES_InitQueue@BlockSize
  3144  02D9  0869               	movf	ES_Initialize@i,w
  3145  02DA  00E8               	movwf	??_ES_Initialize+1
  3146  02DB  0768               	addwf	??_ES_Initialize+1,w
  3147  02DC  3E20               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  3148  02DD  0084               	movwf	4
  3149  02DE  118A  2439  118A   	fcall	stringdir
  3150  02E1  118A  2526  118A   	fcall	_ES_InitQueue
  3151                           
  3152                           ;ES_Framework.c: 200: if (ServDescList[i].InitFunc(i) != ((boolean) !((boolean) 0)))
  3153  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  3154  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  3155  02E6  0869               	movf	ES_Initialize@i,w
  3156  02E7  00E7               	movwf	??_ES_Initialize
  3157  02E8  0867               	movf	??_ES_Initialize,w
  3158  02E9  00E2               	movwf	InitSPIService@Priority
  3159  02EA  0869               	movf	ES_Initialize@i,w
  3160  02EB  00E8               	movwf	??_ES_Initialize+1
  3161  02EC  0768               	addwf	??_ES_Initialize+1,w
  3162  02ED  3E24               	addlw	low ((_ServDescList-__stringbase)| (0+32768))
  3163  02EE  0084               	movwf	4
  3164  02EF  118A  2439  118A   	fcall	stringdir
  3165  02F2  118A  202D  118A   	fcall	fptable
  3166  02F5  3A01               	xorlw	1
  3167  02F6  1903               	skipnz
  3168  02F7  2AFA               	goto	l2026
  3169                           
  3170                           ;ES_Framework.c: 201: return FailedInit;
  3171  02F8  3005               	movlw	5
  3172  02F9  0008               	return
  3173  02FA                     l2026:	
  3174  02FA  3001               	movlw	1
  3175  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  3176  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  3177  02FD  00E7               	movwf	??_ES_Initialize
  3178  02FE  0867               	movf	??_ES_Initialize,w
  3179  02FF  07E9               	addwf	ES_Initialize@i,f
  3180  0300  3002               	movlw	2
  3181  0301  0269               	subwf	ES_Initialize@i,w
  3182  0302  1C03               	skipc
  3183  0303  2AB8               	goto	l2012
  3184  0304                     l2030:	
  3185                           
  3186                           ;ES_Framework.c: 202: }
  3187                           ;ES_Framework.c: 203: return Success;
  3188  0304  3000               	movlw	0
  3189  0305  0008               	return
  3190  0306                     __end_of_ES_Initialize:	
  3191                           
  3192                           	psect	text14
  3193  039C                     __ptext14:	
  3194 ;; *************** function _InitSPIService *****************
  3195 ;; Defined at:
  3196 ;;		line 78 in file "SPI_SM.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;  Priority        1   18[BANK0 ] unsigned char 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;  ThisEvent       3   20[BANK0 ] struct ES_Event_t
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      unsigned char 
  3203 ;; Registers used:
  3204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3210 ;;      Params:         0       1       0       0
  3211 ;;      Locals:         0       3       0       0
  3212 ;;      Temps:          0       1       0       0
  3213 ;;      Totals:         0       5       0       0
  3214 ;;Total ram usage:        5 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    6
  3217 ;; This function calls:
  3218 ;;		_ES_PostToService
  3219 ;; This function is called by:
  3220 ;;		_ES_Initialize
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _InitSPIService
  3226  039C                     _InitSPIService:	
  3227                           
  3228                           ;SPI_SM.c: 79: ES_Event ThisEvent;
  3229                           ;SPI_SM.c: 81: MyPriority = Priority;
  3230                           
  3231                           ;incstack = 0
  3232                           ; Regs used in _InitSPIService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3233  039C  1283               	bcf	3,5	;RP0=0, select bank0
  3234  039D  1303               	bcf	3,6	;RP1=0, select bank0
  3235  039E  0862               	movf	InitSPIService@Priority,w
  3236  039F  00E3               	movwf	??_InitSPIService
  3237  03A0  0863               	movf	??_InitSPIService,w
  3238  03A1  00AC               	movwf	SPI_SM@MyPriority
  3239                           
  3240                           ;SPI_SM.c: 84: GIE = 0;
  3241  03A2  138B               	bcf	11,7	;volatile
  3242                           
  3243                           ;SPI_SM.c: 88: SSPSTAT = 0b00000000;
  3244  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  3245  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  3246  03A5  0194               	clrf	20	;volatile
  3247                           
  3248                           ;SPI_SM.c: 96: TRISC7 = 0;
  3249  03A6  1387               	bcf	7,7	;volatile
  3250                           
  3251                           ;SPI_SM.c: 97: TRISB4 = 1;
  3252  03A7  1606               	bsf	6,4	;volatile
  3253                           
  3254                           ;SPI_SM.c: 98: TRISB6 = 1;
  3255  03A8  1706               	bsf	6,6	;volatile
  3256                           
  3257                           ;SPI_SM.c: 99: TRISC6 = 1;
  3258  03A9  1707               	bsf	7,6	;volatile
  3259                           
  3260                           ;SPI_SM.c: 102: ANSELH &= (~0x00000001 & ~0x00000002 & ~0x00000004);
  3261  03AA  30F8               	movlw	248
  3262  03AB  1283               	bcf	3,5	;RP0=0, select bank0
  3263  03AC  1303               	bcf	3,6	;RP1=0, select bank0
  3264  03AD  00E3               	movwf	??_InitSPIService
  3265  03AE  0863               	movf	??_InitSPIService,w
  3266  03AF  1283               	bcf	3,5	;RP0=0, select bank2
  3267  03B0  1703               	bsf	3,6	;RP1=1, select bank2
  3268  03B1  059F               	andwf	31,f	;volatile
  3269                           
  3270                           ;SPI_SM.c: 105: SSPBUF = 0x00;
  3271  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  3272  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  3273  03B4  0193               	clrf	19	;volatile
  3274                           
  3275                           ;SPI_SM.c: 110: SSPCON = 0b00110100;
  3276  03B5  3034               	movlw	52
  3277  03B6  0094               	movwf	20	;volatile
  3278                           
  3279                           ;SPI_SM.c: 113: currentState = Waiting4Command;
  3280  03B7  01AB               	clrf	SPI_SM@currentState
  3281                           
  3282                           ;SPI_SM.c: 115: SSPIE = 1;
  3283  03B8  1683               	bsf	3,5	;RP0=1, select bank1
  3284  03B9  1303               	bcf	3,6	;RP1=0, select bank1
  3285  03BA  158C               	bsf	12,3	;volatile
  3286                           
  3287                           ;SPI_SM.c: 116: PEIE = 1;
  3288  03BB  170B               	bsf	11,6	;volatile
  3289                           
  3290                           ;SPI_SM.c: 117: GIE = 1;
  3291  03BC  178B               	bsf	11,7	;volatile
  3292                           
  3293                           ;SPI_SM.c: 120: ThisEvent.EventType = ES_INIT;
  3294  03BD  3002               	movlw	2
  3295  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3296  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  3297  03C0  00E3               	movwf	??_InitSPIService
  3298  03C1  0863               	movf	??_InitSPIService,w
  3299  03C2  00E4               	movwf	InitSPIService@ThisEvent
  3300                           
  3301                           ;SPI_SM.c: 121: if (ES_PostToService(MyPriority, ThisEvent) == ((boolean) !((boolean) 0)
      +                          )) {
  3302  03C3  0864               	movf	InitSPIService@ThisEvent,w
  3303  03C4  00DD               	movwf	ES_PostToService@TheEvent
  3304  03C5  0865               	movf	InitSPIService@ThisEvent+1,w
  3305  03C6  00DE               	movwf	ES_PostToService@TheEvent+1
  3306  03C7  0866               	movf	InitSPIService@ThisEvent+2,w
  3307  03C8  00DF               	movwf	ES_PostToService@TheEvent+2
  3308  03C9  082C               	movf	SPI_SM@MyPriority,w
  3309  03CA  118A  2467  118A   	fcall	_ES_PostToService
  3310  03CD  3A01               	xorlw	1
  3311  03CE  1D03               	skipz
  3312  03CF  2BD2               	goto	l2000
  3313                           
  3314                           ;SPI_SM.c: 122: return ((boolean) !((boolean) 0));
  3315  03D0  3001               	movlw	1
  3316                           
  3317                           ;SPI_SM.c: 123: } else {
  3318  03D1  0008               	return
  3319  03D2                     l2000:	
  3320                           
  3321                           ;SPI_SM.c: 124: return ((boolean) 0);
  3322  03D2  3000               	movlw	0
  3323  03D3  0008               	return
  3324  03D4                     __end_of_InitSPIService:	
  3325                           
  3326                           	psect	text15
  3327  04F1                     __ptext15:	
  3328 ;; *************** function _InitUARTRXService *****************
  3329 ;; Defined at:
  3330 ;;		line 79 in file "UART_RX_SM.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  Priority        1   18[BANK0 ] unsigned char 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  ThisEvent       3   20[BANK0 ] struct ES_Event_t
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      unsigned char 
  3337 ;; Registers used:
  3338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3344 ;;      Params:         0       1       0       0
  3345 ;;      Locals:         0       3       0       0
  3346 ;;      Temps:          0       1       0       0
  3347 ;;      Totals:         0       5       0       0
  3348 ;;Total ram usage:        5 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    6
  3351 ;; This function calls:
  3352 ;;		_ES_PostToService
  3353 ;; This function is called by:
  3354 ;;		_ES_Initialize
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           
  3359                           ;psect for function _InitUARTRXService
  3360  04F1                     _InitUARTRXService:	
  3361                           
  3362                           ;UART_RX_SM.c: 80: ES_Event ThisEvent;
  3363                           ;UART_RX_SM.c: 82: MyPriority = Priority;
  3364                           
  3365                           ;incstack = 0
  3366                           ; Regs used in _InitUARTRXService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3367  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  3368  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  3369  04F3  0862               	movf	InitUARTRXService@Priority,w
  3370  04F4  00E3               	movwf	??_InitUARTRXService
  3371  04F5  0863               	movf	??_InitUARTRXService,w
  3372  04F6  00B4               	movwf	_MyPriority
  3373                           
  3374                           ;UART_RX_SM.c: 85: ThisEvent.EventType = ES_INIT;
  3375  04F7  3002               	movlw	2
  3376  04F8  00E3               	movwf	??_InitUARTRXService
  3377  04F9  0863               	movf	??_InitUARTRXService,w
  3378  04FA  00E4               	movwf	InitUARTRXService@ThisEvent
  3379                           
  3380                           ;UART_RX_SM.c: 86: if (ES_PostToService(MyPriority, ThisEvent) == ((boolean) !((boolean)
      +                           0))) {
  3381  04FB  0864               	movf	InitUARTRXService@ThisEvent,w
  3382  04FC  00DD               	movwf	ES_PostToService@TheEvent
  3383  04FD  0865               	movf	InitUARTRXService@ThisEvent+1,w
  3384  04FE  00DE               	movwf	ES_PostToService@TheEvent+1
  3385  04FF  0866               	movf	InitUARTRXService@ThisEvent+2,w
  3386  0500  00DF               	movwf	ES_PostToService@TheEvent+2
  3387  0501  0834               	movf	_MyPriority,w
  3388  0502  118A  2467  118A   	fcall	_ES_PostToService
  3389  0505  3A01               	xorlw	1
  3390  0506  1D03               	skipz
  3391  0507  2D0A               	goto	l1938
  3392                           
  3393                           ;UART_RX_SM.c: 87: return ((boolean) !((boolean) 0));
  3394  0508  3001               	movlw	1
  3395                           
  3396                           ;UART_RX_SM.c: 88: } else {
  3397  0509  0008               	return
  3398  050A                     l1938:	
  3399                           
  3400                           ;UART_RX_SM.c: 89: return ((boolean) 0);
  3401  050A  3000               	movlw	0
  3402  050B  0008               	return
  3403  050C                     __end_of_InitUARTRXService:	
  3404                           
  3405                           	psect	text16
  3406  0467                     __ptext16:	
  3407 ;; *************** function _ES_PostToService *****************
  3408 ;; Defined at:
  3409 ;;		line 313 in file "ES_Framework.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  WhichService    1    wreg     unsigned char 
  3412 ;;  TheEvent        3   13[BANK0 ] struct ES_Event_t
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  WhichService    1   17[BANK0 ] unsigned char 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      unsigned char 
  3417 ;; Registers used:
  3418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3424 ;;      Params:         0       3       0       0
  3425 ;;      Locals:         0       1       0       0
  3426 ;;      Temps:          0       1       0       0
  3427 ;;      Totals:         0       5       0       0
  3428 ;;Total ram usage:        5 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    5
  3431 ;; This function calls:
  3432 ;;		_ES_EnQueueFIFO
  3433 ;; This function is called by:
  3434 ;;		_InitUARTRXService
  3435 ;;		_PostUARTRXService
  3436 ;;		_CheckUARTRXEvent
  3437 ;;		_InitSPIService
  3438 ;;		_PostSPIService
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           
  3443                           ;psect for function _ES_PostToService
  3444  0467                     _ES_PostToService:	
  3445                           
  3446                           ;incstack = 0
  3447 ;; using string table level
  3448                           ; Regs used in _ES_PostToService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3449                           ;ES_PostToService@WhichService stored from wreg
  3450  0467  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0468  1303               	bcf	3,6	;RP1=0, select bank0
  3452  0469  00E1               	movwf	ES_PostToService@WhichService
  3453                           
  3454                           ;ES_Framework.c: 314: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  3455                           ;ES_Framework.c: 315: (ES_EnQueueFIFO(EventQueues[WhichService].pMem, TheEvent) ==
  3456                           ;ES_Framework.c: 316: ((boolean) !((boolean) 0)))) {
  3457  046A  3002               	movlw	2
  3458  046B  0261               	subwf	ES_PostToService@WhichService,w
  3459  046C  1803               	skipnc
  3460  046D  2C8E               	goto	l1722
  3461  046E  085D               	movf	ES_PostToService@TheEvent,w
  3462  046F  00D4               	movwf	ES_EnQueueFIFO@Event2Add
  3463  0470  085E               	movf	ES_PostToService@TheEvent+1,w
  3464  0471  00D5               	movwf	ES_EnQueueFIFO@Event2Add+1
  3465  0472  085F               	movf	ES_PostToService@TheEvent+2,w
  3466  0473  00D6               	movwf	ES_EnQueueFIFO@Event2Add+2
  3467  0474  0861               	movf	ES_PostToService@WhichService,w
  3468  0475  00E0               	movwf	??_ES_PostToService
  3469  0476  0760               	addwf	??_ES_PostToService,w
  3470  0477  3E20               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  3471  0478  0084               	movwf	4
  3472  0479  118A  2439  118A   	fcall	stringdir
  3473  047C  118A  2306  118A   	fcall	_ES_EnQueueFIFO
  3474  047F  3A01               	xorlw	1
  3475  0480  1D03               	skipz
  3476  0481  2C8E               	goto	l1722
  3477                           
  3478                           ;ES_Framework.c: 317: Ready |= BitNum2SetMask[WhichService];
  3479  0482  1283               	bcf	3,5	;RP0=0, select bank0
  3480  0483  1303               	bcf	3,6	;RP1=0, select bank0
  3481  0484  0861               	movf	ES_PostToService@WhichService,w
  3482  0485  3E18               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  3483  0486  0084               	movwf	4
  3484  0487  118A  2439         	fcall	stringdir
  3485  0489  00E0               	movwf	??_ES_PostToService
  3486  048A  0860               	movf	??_ES_PostToService,w
  3487  048B  04B9               	iorwf	_Ready,f
  3488                           
  3489                           ;ES_Framework.c: 318: return ((boolean) !((boolean) 0));
  3490  048C  3001               	movlw	1
  3491                           
  3492                           ;ES_Framework.c: 319: } else
  3493  048D  0008               	return
  3494  048E                     l1722:	
  3495                           
  3496                           ;ES_Framework.c: 320: return ((boolean) 0);
  3497  048E  3000               	movlw	0
  3498  048F  0008               	return
  3499  0490                     __end_of_ES_PostToService:	
  3500                           
  3501                           	psect	text17
  3502  0306                     __ptext17:	
  3503 ;; *************** function _ES_EnQueueFIFO *****************
  3504 ;; Defined at:
  3505 ;;		line 83 in file "ES_Queue.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  pBlock          1    wreg     PTR struct ES_Event_t
  3508 ;;		 -> Queue1(12), Queue0(12), 
  3509 ;;  Event2Add       3    4[BANK0 ] struct ES_Event_t
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;  pBlock          1   11[BANK0 ] PTR struct ES_Event_t
  3512 ;;		 -> Queue1(12), Queue0(12), 
  3513 ;;  pThisQueue      1   12[BANK0 ] PTR struct .
  3514 ;;		 -> Queue1(12), Queue0(12), 
  3515 ;;  InsertionPoi    1   10[BANK0 ] unsigned char 
  3516 ;;  saveCrit        1    9[BANK0 ] unsigned char 
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      unsigned char 
  3519 ;; Registers used:
  3520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3526 ;;      Params:         0       3       0       0
  3527 ;;      Locals:         0       4       0       0
  3528 ;;      Temps:          0       2       0       0
  3529 ;;      Totals:         0       9       0       0
  3530 ;;Total ram usage:        9 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    4
  3533 ;; This function calls:
  3534 ;;		___bmul
  3535 ;; This function is called by:
  3536 ;;		_ES_PostToService
  3537 ;;		_ES_PostAll
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           
  3542                           ;psect for function _ES_EnQueueFIFO
  3543  0306                     _ES_EnQueueFIFO:	
  3544                           
  3545                           ;incstack = 0
  3546                           ; Regs used in _ES_EnQueueFIFO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3547                           ;ES_EnQueueFIFO@pBlock stored from wreg
  3548  0306  1283               	bcf	3,5	;RP0=0, select bank0
  3549  0307  1303               	bcf	3,6	;RP1=0, select bank0
  3550  0308  00DB               	movwf	ES_EnQueueFIFO@pBlock
  3551                           
  3552                           ;ES_Queue.c: 85: unsigned char saveCrit;
  3553                           ;ES_Queue.c: 86: unsigned char InsertionPoint;
  3554                           ;ES_Queue.c: 87: pQueue_t pThisQueue;
  3555                           ;ES_Queue.c: 88: pThisQueue = (pQueue_t)pBlock;
  3556  0309  085B               	movf	ES_EnQueueFIFO@pBlock,w
  3557  030A  00D7               	movwf	??_ES_EnQueueFIFO
  3558  030B  0857               	movf	??_ES_EnQueueFIFO,w
  3559  030C  00DC               	movwf	ES_EnQueueFIFO@pThisQueue
  3560                           
  3561                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3562  030D  085C               	movf	ES_EnQueueFIFO@pThisQueue,w
  3563  030E  0084               	movwf	4
  3564  030F  1383               	bcf	3,7	;select IRP bank0
  3565  0310  0800               	movf	0,w
  3566  0311  00D7               	movwf	??_ES_EnQueueFIFO
  3567  0312  085C               	movf	ES_EnQueueFIFO@pThisQueue,w
  3568  0313  3E02               	addlw	2
  3569  0314  0084               	movwf	4
  3570  0315  0800               	movf	0,w
  3571  0316  00D8               	movwf	??_ES_EnQueueFIFO+1
  3572  0317  0857               	movf	??_ES_EnQueueFIFO,w
  3573  0318  0258               	subwf	??_ES_EnQueueFIFO+1,w
  3574  0319  1803               	skipnc
  3575  031A  2B58               	goto	l1706
  3576                           
  3577                           ;ES_Queue.c: 92: {
  3578                           ;ES_Queue.c: 93: InsertionPoint = (pThisQueue->CurrentIndex + pThisQueue->NumEntries);
  3579  031B  085C               	movf	ES_EnQueueFIFO@pThisQueue,w
  3580  031C  3E02               	addlw	2
  3581  031D  0084               	movwf	4
  3582  031E  0800               	movf	0,w
  3583  031F  00D7               	movwf	??_ES_EnQueueFIFO
  3584  0320  0A5C               	incf	ES_EnQueueFIFO@pThisQueue,w
  3585  0321  0084               	movwf	4
  3586  0322  0800               	movf	0,w
  3587  0323  0757               	addwf	??_ES_EnQueueFIFO,w
  3588  0324  00D8               	movwf	??_ES_EnQueueFIFO+1
  3589  0325  0858               	movf	??_ES_EnQueueFIFO+1,w
  3590  0326  00DA               	movwf	ES_EnQueueFIFO@InsertionPoint
  3591                           
  3592                           ;ES_Queue.c: 94: if (InsertionPoint >= pThisQueue->QueueSize)
  3593  0327  085C               	movf	ES_EnQueueFIFO@pThisQueue,w
  3594  0328  0084               	movwf	4
  3595  0329  0800               	movf	0,w
  3596  032A  025A               	subwf	ES_EnQueueFIFO@InsertionPoint,w
  3597  032B  1C03               	skipc
  3598  032C  2B31               	goto	l1690
  3599                           
  3600                           ;ES_Queue.c: 95: InsertionPoint -= pThisQueue->QueueSize;
  3601  032D  085C               	movf	ES_EnQueueFIFO@pThisQueue,w
  3602  032E  0084               	movwf	4
  3603  032F  0800               	movf	0,w
  3604  0330  02DA               	subwf	ES_EnQueueFIFO@InsertionPoint,f
  3605  0331                     l1690:	
  3606                           ;ES_Queue.c: 98: do{ saveCrit = INTCON; GIE = 0;}while(0);
  3607                           
  3608  0331  080B               	movf	11,w	;volatile
  3609  0332  00D7               	movwf	??_ES_EnQueueFIFO
  3610  0333  0857               	movf	??_ES_EnQueueFIFO,w
  3611  0334  00D9               	movwf	ES_EnQueueFIFO@saveCrit
  3612  0335  138B               	bcf	11,7	;volatile
  3613                           
  3614                           ;ES_Queue.c: 99: pBlock[ 1 + InsertionPoint] = Event2Add;
  3615  0336  3003               	movlw	3
  3616  0337  00D7               	movwf	??_ES_EnQueueFIFO
  3617  0338  0857               	movf	??_ES_EnQueueFIFO,w
  3618  0339  00D0               	movwf	___bmul@multiplicand
  3619  033A  085A               	movf	ES_EnQueueFIFO@InsertionPoint,w
  3620  033B  3E01               	addlw	1
  3621  033C  118A  2553         	fcall	___bmul
  3622  033E  1283               	bcf	3,5	;RP0=0, select bank0
  3623  033F  1303               	bcf	3,6	;RP1=0, select bank0
  3624  0340  075B               	addwf	ES_EnQueueFIFO@pBlock,w
  3625  0341  00D8               	movwf	??_ES_EnQueueFIFO+1
  3626  0342  0858               	movf	??_ES_EnQueueFIFO+1,w
  3627  0343  0084               	movwf	4
  3628  0344  0854               	movf	ES_EnQueueFIFO@Event2Add,w
  3629  0345  1383               	bcf	3,7	;select IRP bank0
  3630  0346  0080               	movwf	0
  3631  0347  0A84               	incf	4,f
  3632  0348  0855               	movf	ES_EnQueueFIFO@Event2Add+1,w
  3633  0349  0080               	movwf	0
  3634  034A  0A84               	incf	4,f
  3635  034B  0856               	movf	ES_EnQueueFIFO@Event2Add+2,w
  3636  034C  0080               	movwf	0
  3637                           
  3638                           ;ES_Queue.c: 100: pThisQueue->NumEntries++;
  3639  034D  3001               	movlw	1
  3640  034E  00D7               	movwf	??_ES_EnQueueFIFO
  3641  034F  085C               	movf	ES_EnQueueFIFO@pThisQueue,w
  3642  0350  3E02               	addlw	2
  3643  0351  0084               	movwf	4
  3644  0352  0857               	movf	??_ES_EnQueueFIFO,w
  3645  0353  0780               	addwf	0,f
  3646                           
  3647                           ;ES_Queue.c: 101: {INTCON = saveCrit;};
  3648  0354  0859               	movf	ES_EnQueueFIFO@saveCrit,w
  3649  0355  008B               	movwf	11	;volatile
  3650                           
  3651                           ;ES_Queue.c: 103: return(((boolean) !((boolean) 0)));
  3652  0356  3001               	movlw	1
  3653                           
  3654                           ;ES_Queue.c: 104: }else
  3655  0357  0008               	return
  3656  0358                     l1706:	
  3657                           
  3658                           ;ES_Queue.c: 105: return(((boolean) 0));
  3659  0358  3000               	movlw	0
  3660  0359  0008               	return
  3661  035A                     __end_of_ES_EnQueueFIFO:	
  3662                           
  3663                           	psect	text18
  3664  0553                     __ptext18:	
  3665 ;; *************** function ___bmul *****************
  3666 ;; Defined at:
  3667 ;;		line 4 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul8.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  multiplier      1    wreg     unsigned char 
  3670 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3673 ;;  product         1    2[BANK0 ] unsigned char 
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      unsigned char 
  3676 ;; Registers used:
  3677 ;;		wreg, status,2, status,0
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3683 ;;      Params:         0       1       0       0
  3684 ;;      Locals:         0       2       0       0
  3685 ;;      Temps:          0       1       0       0
  3686 ;;      Totals:         0       4       0       0
  3687 ;;Total ram usage:        4 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; Hardware stack levels required when called:    3
  3690 ;; This function calls:
  3691 ;;		Nothing
  3692 ;; This function is called by:
  3693 ;;		_ES_Initialize
  3694 ;;		_ES_Run
  3695 ;;		_ES_PostToService
  3696 ;;		_ES_EnQueueFIFO
  3697 ;;		_ES_DeQueue
  3698 ;;		_ES_PostAll
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           
  3703                           ;psect for function ___bmul
  3704  0553                     ___bmul:	
  3705                           
  3706                           ;incstack = 0
  3707                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3708                           ;___bmul@multiplier stored from wreg
  3709  0553  1283               	bcf	3,5	;RP0=0, select bank0
  3710  0554  1303               	bcf	3,6	;RP1=0, select bank0
  3711  0555  00D3               	movwf	___bmul@multiplier
  3712  0556  01D2               	clrf	___bmul@product
  3713  0557                     l1668:	
  3714  0557  1C53               	btfss	___bmul@multiplier,0
  3715  0558  2D5D               	goto	l1672
  3716  0559  0850               	movf	___bmul@multiplicand,w
  3717  055A  00D1               	movwf	??___bmul
  3718  055B  0851               	movf	??___bmul,w
  3719  055C  07D2               	addwf	___bmul@product,f
  3720  055D                     l1672:	
  3721  055D  1003               	clrc
  3722  055E  0DD0               	rlf	___bmul@multiplicand,f
  3723  055F  1003               	clrc
  3724  0560  0CD3               	rrf	___bmul@multiplier,f
  3725  0561  0853               	movf	___bmul@multiplier,w
  3726  0562  1D03               	btfss	3,2
  3727  0563  2D57               	goto	l1668
  3728  0564  0852               	movf	___bmul@product,w
  3729  0565  0008               	return
  3730  0566                     __end_of___bmul:	
  3731                           
  3732                           	psect	text19
  3733  04B8                     __ptext19:	
  3734 ;; *************** function _ES_Sys_Timer_Init *****************
  3735 ;; Defined at:
  3736 ;;		line 25 in file "ES_Port.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;		None
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;		None
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		status,2
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3750 ;;      Params:         0       0       0       0
  3751 ;;      Locals:         0       0       0       0
  3752 ;;      Temps:          0       0       0       0
  3753 ;;      Totals:         0       0       0       0
  3754 ;;Total ram usage:        0 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    3
  3757 ;; This function calls:
  3758 ;;		Nothing
  3759 ;; This function is called by:
  3760 ;;		_ES_Initialize
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           
  3765                           ;psect for function _ES_Sys_Timer_Init
  3766  04B8                     _ES_Sys_Timer_Init:	
  3767                           
  3768                           ;ES_Port.c: 29: TRISC0 = 0;
  3769                           
  3770                           ;incstack = 0
  3771                           ; Regs used in _ES_Sys_Timer_Init: [status,2]
  3772  04B8  1683               	bsf	3,5	;RP0=1, select bank1
  3773  04B9  1303               	bcf	3,6	;RP1=0, select bank1
  3774  04BA  1007               	bcf	7,0	;volatile
  3775                           
  3776                           ;ES_Port.c: 30: ANS4 = 0;
  3777  04BB  1283               	bcf	3,5	;RP0=0, select bank2
  3778  04BC  1703               	bsf	3,6	;RP1=1, select bank2
  3779  04BD  121E               	bcf	30,4	;volatile
  3780                           
  3781                           ;ES_Port.c: 31: RC0 = 0;
  3782  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  3783  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  3784  04C0  1007               	bcf	7,0	;volatile
  3785                           
  3786                           ;ES_Port.c: 34: TRISC5 = 0;
  3787  04C1  1683               	bsf	3,5	;RP0=1, select bank1
  3788  04C2  1303               	bcf	3,6	;RP1=0, select bank1
  3789  04C3  1287               	bcf	7,5	;volatile
  3790                           
  3791                           ;ES_Port.c: 35: RC5 = 0;
  3792  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  3793  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  3794  04C6  1287               	bcf	7,5	;volatile
  3795                           
  3796                           ;ES_Port.c: 38: {GIE = 0;};
  3797  04C7  138B               	bcf	11,7	;volatile
  3798                           
  3799                           ;ES_Port.c: 40: T0CS = 0;
  3800  04C8  1683               	bsf	3,5	;RP0=1, select bank1
  3801  04C9  1303               	bcf	3,6	;RP1=0, select bank1
  3802  04CA  1281               	bcf	1,5	;volatile
  3803                           
  3804                           ;ES_Port.c: 41: PSA = 0;
  3805  04CB  1181               	bcf	1,3	;volatile
  3806                           
  3807                           ;ES_Port.c: 42: PS0 = 1;
  3808  04CC  1401               	bsf	1,0	;volatile
  3809                           
  3810                           ;ES_Port.c: 43: PS1 = 1;
  3811  04CD  1481               	bsf	1,1	;volatile
  3812                           
  3813                           ;ES_Port.c: 44: PS2 = 1;
  3814  04CE  1501               	bsf	1,2	;volatile
  3815                           
  3816                           ;ES_Port.c: 46: TMR0 = 0;
  3817  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  3818  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  3819  04D1  0181               	clrf	1	;volatile
  3820                           
  3821                           ;ES_Port.c: 47: T0IF = 0;
  3822  04D2  110B               	bcf	11,2	;volatile
  3823                           
  3824                           ;ES_Port.c: 48: T0IE = 1;
  3825  04D3  168B               	bsf	11,5	;volatile
  3826                           
  3827                           ;ES_Port.c: 50: {GIE = 1;};
  3828  04D4  178B               	bsf	11,7	;volatile
  3829  04D5  0008               	return
  3830  04D6                     __end_of_ES_Sys_Timer_Init:	
  3831                           
  3832                           	psect	text20
  3833  0526                     __ptext20:	
  3834 ;; *************** function _ES_InitQueue *****************
  3835 ;; Defined at:
  3836 ;;		line 56 in file "ES_Queue.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  pBlock          1    wreg     PTR struct ES_Event_t
  3839 ;;		 -> Queue1(12), Queue0(12), 
  3840 ;;  BlockSize       1    0[BANK0 ] unsigned char 
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  pBlock          1    2[BANK0 ] PTR struct ES_Event_t
  3843 ;;		 -> Queue1(12), Queue0(12), 
  3844 ;;  pThisQueue      1    3[BANK0 ] PTR struct .
  3845 ;;		 -> Queue1(12), Queue0(12), 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      unsigned char 
  3848 ;; Registers used:
  3849 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3855 ;;      Params:         0       1       0       0
  3856 ;;      Locals:         0       2       0       0
  3857 ;;      Temps:          0       1       0       0
  3858 ;;      Totals:         0       4       0       0
  3859 ;;Total ram usage:        4 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    3
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_ES_Initialize
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _ES_InitQueue
  3871  0526                     _ES_InitQueue:	
  3872                           
  3873                           ;incstack = 0
  3874                           ; Regs used in _ES_InitQueue: [wreg-fsr0h+status,2+status,0]
  3875                           ;ES_InitQueue@pBlock stored from wreg
  3876  0526  1283               	bcf	3,5	;RP0=0, select bank0
  3877  0527  1303               	bcf	3,6	;RP1=0, select bank0
  3878  0528  00D2               	movwf	ES_InitQueue@pBlock
  3879                           
  3880                           ;ES_Queue.c: 58: pQueue_t pThisQueue;
  3881                           ;ES_Queue.c: 60: pThisQueue = (pQueue_t)pBlock;
  3882  0529  0852               	movf	ES_InitQueue@pBlock,w
  3883  052A  00D1               	movwf	??_ES_InitQueue
  3884  052B  0851               	movf	??_ES_InitQueue,w
  3885  052C  00D3               	movwf	ES_InitQueue@pThisQueue
  3886                           
  3887                           ;ES_Queue.c: 62: pThisQueue->QueueSize = BlockSize - 1;
  3888  052D  0850               	movf	ES_InitQueue@BlockSize,w
  3889  052E  3EFF               	addlw	255
  3890  052F  00D1               	movwf	??_ES_InitQueue
  3891  0530  0853               	movf	ES_InitQueue@pThisQueue,w
  3892  0531  0084               	movwf	4
  3893  0532  0851               	movf	??_ES_InitQueue,w
  3894  0533  1383               	bcf	3,7	;select IRP bank0
  3895  0534  0080               	movwf	0
  3896                           
  3897                           ;ES_Queue.c: 63: pThisQueue->CurrentIndex = 0;
  3898  0535  0A53               	incf	ES_InitQueue@pThisQueue,w
  3899  0536  0084               	movwf	4
  3900  0537  0180               	clrf	0
  3901                           
  3902                           ;ES_Queue.c: 64: pThisQueue->NumEntries = 0;
  3903  0538  0853               	movf	ES_InitQueue@pThisQueue,w
  3904  0539  3E02               	addlw	2
  3905  053A  0084               	movwf	4
  3906  053B  0180               	clrf	0
  3907  053C  0008               	return
  3908  053D                     __end_of_ES_InitQueue:	
  3909                           ;ES_Queue.c: 65: return(pThisQueue->QueueSize);
  3910                           ;	Return value of _ES_InitQueue is never used
  3911                           
  3912                           
  3913                           	psect	text21
  3914  0409                     __ptext21:	
  3915 ;; *************** function _ISR *****************
  3916 ;; Defined at:
  3917 ;;		line 53 in file "ES_Port.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;		None
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;		None
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      void 
  3924 ;; Registers used:
  3925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3931 ;;      Params:         0       0       0       0
  3932 ;;      Locals:         0       0       0       0
  3933 ;;      Temps:          5       0       0       0
  3934 ;;      Totals:         5       0       0       0
  3935 ;;Total ram usage:        5 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    2
  3938 ;; This function calls:
  3939 ;;		_SPIIntResponse
  3940 ;;		_UARTRXIntResponse
  3941 ;; This function is called by:
  3942 ;;		Interrupt level 1
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function _ISR
  3948  0409                     _ISR:	
  3949                           
  3950                           ;ES_Port.c: 54: RC5 = 1;
  3951  0409  1687               	bsf	7,5	;volatile
  3952                           
  3953                           ;ES_Port.c: 56: if (SSPIF && SSPIE) {
  3954  040A  1D8C               	btfss	12,3	;volatile
  3955  040B  2C13               	goto	i1l2216
  3956  040C  1683               	bsf	3,5	;RP0=1, select bank1
  3957  040D  1303               	bcf	3,6	;RP1=0, select bank1
  3958  040E  1D8C               	btfss	12,3	;volatile
  3959  040F  2C13               	goto	i1l2216
  3960                           
  3961                           ;ES_Port.c: 57: SPIIntResponse();
  3962  0410  118A  20B2  118A   	fcall	_SPIIntResponse
  3963  0413                     i1l2216:	
  3964                           
  3965                           ;ES_Port.c: 58: }
  3966                           ;ES_Port.c: 60: if (RCIF && RCIE) {
  3967  0413  1283               	bcf	3,5	;RP0=0, select bank0
  3968  0414  1303               	bcf	3,6	;RP1=0, select bank0
  3969  0415  1E8C               	btfss	12,5	;volatile
  3970  0416  2C1E               	goto	i1l2222
  3971  0417  1683               	bsf	3,5	;RP0=1, select bank1
  3972  0418  1303               	bcf	3,6	;RP1=0, select bank1
  3973  0419  1E8C               	btfss	12,5	;volatile
  3974  041A  2C1E               	goto	i1l2222
  3975                           
  3976                           ;ES_Port.c: 61: UARTRXIntResponse();
  3977  041B  118A  211C  118A   	fcall	_UARTRXIntResponse
  3978  041E                     i1l2222:	
  3979                           
  3980                           ;ES_Port.c: 62: }
  3981                           ;ES_Port.c: 69: if (T0IF) {
  3982  041E  1D0B               	btfss	11,2	;volatile
  3983  041F  2C2B               	goto	i1l2228
  3984                           
  3985                           ;ES_Port.c: 70: T0IF = 0;
  3986  0420  110B               	bcf	11,2	;volatile
  3987                           
  3988                           ;ES_Port.c: 71: TickCount++;
  3989  0421  3001               	movlw	1
  3990  0422  00F4               	movwf	??_ISR
  3991  0423  0874               	movf	??_ISR,w
  3992  0424  1283               	bcf	3,5	;RP0=0, select bank0
  3993  0425  1303               	bcf	3,6	;RP1=0, select bank0
  3994  0426  07B8               	addwf	_TickCount,f
  3995                           
  3996                           ;ES_Port.c: 72: PORTC ^= 0x00000001;
  3997  0427  3001               	movlw	1
  3998  0428  00F4               	movwf	??_ISR
  3999  0429  0874               	movf	??_ISR,w
  4000  042A  0687               	xorwf	7,f	;volatile
  4001  042B                     i1l2228:	
  4002                           
  4003                           ;ES_Port.c: 73: }
  4004                           ;ES_Port.c: 75: RC5 = 0;
  4005  042B  1283               	bcf	3,5	;RP0=0, select bank0
  4006  042C  1303               	bcf	3,6	;RP1=0, select bank0
  4007  042D  1287               	bcf	7,5	;volatile
  4008  042E  0878               	movf	??_ISR+4,w
  4009  042F  00FF               	movwf	127
  4010  0430  0877               	movf	??_ISR+3,w
  4011  0431  008A               	movwf	10
  4012  0432  0876               	movf	??_ISR+2,w
  4013  0433  0084               	movwf	4
  4014  0434  0E75               	swapf	(??_ISR+1)^(0+-128),w
  4015  0435  0083               	movwf	3
  4016  0436  0EFE               	swapf	126,f
  4017  0437  0E7E               	swapf	126,w
  4018  0438  0009               	retfie
  4019  0439                     __end_of_ISR:	
  4020                           
  4021                           	psect	intentry
  4022  0004                     __pintentry:	
  4023                           ;incstack = 0
  4024                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4025                           
  4026  0004                     interrupt_function:	
  4027  007E                     saved_w	set	btemp
  4028  0004  00FE               	movwf	btemp
  4029  0005  0E03               	swapf	3,w
  4030  0006  00F5               	movwf	??_ISR+1
  4031  0007  0804               	movf	4,w
  4032  0008  00F6               	movwf	??_ISR+2
  4033  0009  080A               	movf	10,w
  4034  000A  00F7               	movwf	??_ISR+3
  4035  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4036  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4037  000D  087F               	movf	btemp+1,w
  4038  000E  00F8               	movwf	??_ISR+4
  4039  000F  118A  2C09         	ljmp	_ISR
  4040                           
  4041                           	psect	text22
  4042  011C                     __ptext22:	
  4043 ;; *************** function _UARTRXIntResponse *****************
  4044 ;; Defined at:
  4045 ;;		line 310 in file "UART_RX_SM.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;  newByte         1    3[COMMON] unsigned char 
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4059 ;;      Params:         0       0       0       0
  4060 ;;      Locals:         1       0       0       0
  4061 ;;      Temps:          1       0       0       0
  4062 ;;      Totals:         2       0       0       0
  4063 ;;Total ram usage:        2 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    1
  4066 ;; This function calls:
  4067 ;;		_ClearReceivedDataArray
  4068 ;; This function is called by:
  4069 ;;		_ISR
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           
  4074                           ;psect for function _UARTRXIntResponse
  4075  011C                     _UARTRXIntResponse:	
  4076                           
  4077                           ;UART_RX_SM.c: 311: static uint8_t currentByteIndex;
  4078                           ;UART_RX_SM.c: 312: static uint8_t bodyByteCount;
  4079                           ;UART_RX_SM.c: 315: uint8_t newByte = RCREG;
  4080                           
  4081                           ;incstack = 0
  4082                           ; Regs used in _UARTRXIntResponse: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4083  011C  1283               	bcf	3,5	;RP0=0, select bank0
  4084  011D  1303               	bcf	3,6	;RP1=0, select bank0
  4085  011E  081A               	movf	26,w	;volatile
  4086  011F  00F2               	movwf	??_UARTRXIntResponse
  4087  0120  0872               	movf	??_UARTRXIntResponse,w
  4088  0121  00F3               	movwf	UARTRXIntResponse@newByte
  4089                           
  4090                           ;UART_RX_SM.c: 317: switch (currentState) {
  4091  0122  2973               	goto	i1l2152
  4092  0123                     i1l2108:	
  4093                           ;UART_RX_SM.c: 318: case WaitFor7E:
  4094                           
  4095                           
  4096                           ;UART_RX_SM.c: 319: if (newByte == 0x7E)
  4097  0123  307E               	movlw	126
  4098  0124  0673               	xorwf	UARTRXIntResponse@newByte,w
  4099  0125  1D03               	btfss	3,2
  4100  0126  0008               	return
  4101                           
  4102                           ;UART_RX_SM.c: 320: {
  4103                           ;UART_RX_SM.c: 321: ClearReceivedDataArray();
  4104  0127  118A  2566         	fcall	_ClearReceivedDataArray
  4105                           
  4106                           ;UART_RX_SM.c: 322: currentState = WaitForMSB;
  4107  0129  1283               	bcf	3,5	;RP0=0, select bank0
  4108  012A  1303               	bcf	3,6	;RP1=0, select bank0
  4109  012B  01B3               	clrf	_currentState
  4110  012C  0AB3               	incf	_currentState,f
  4111                           
  4112                           ;UART_RX_SM.c: 323: }
  4113                           ;UART_RX_SM.c: 324: break;
  4114  012D  0008               	return
  4115  012E                     i1l2114:	
  4116                           ;UART_RX_SM.c: 326: case WaitForMSB:
  4117                           
  4118                           
  4119                           ;UART_RX_SM.c: 327: if (newByte == 0)
  4120  012E  0873               	movf	UARTRXIntResponse@newByte,w
  4121  012F  1D03               	btfss	3,2
  4122  0130  2936               	goto	i1l2118
  4123                           
  4124                           ;UART_RX_SM.c: 328: {
  4125                           ;UART_RX_SM.c: 329: currentState = WaitForLSB;
  4126  0131  3002               	movlw	2
  4127  0132  00F2               	movwf	??_UARTRXIntResponse
  4128  0133  0872               	movf	??_UARTRXIntResponse,w
  4129  0134  00B3               	movwf	_currentState
  4130                           
  4131                           ;UART_RX_SM.c: 330: }
  4132  0135  0008               	return
  4133  0136                     i1l2118:	
  4134                           
  4135                           ;UART_RX_SM.c: 331: else
  4136                           ;UART_RX_SM.c: 332: {
  4137                           ;UART_RX_SM.c: 333: currentState = WaitFor7E;
  4138  0136  01B3               	clrf	_currentState
  4139                           
  4140                           ;UART_RX_SM.c: 334: }
  4141                           ;UART_RX_SM.c: 335: break;
  4142  0137  0008               	return
  4143  0138                     i1l2120:	
  4144                           ;UART_RX_SM.c: 337: case WaitForLSB:
  4145                           
  4146                           
  4147                           ;UART_RX_SM.c: 338: bodyByteCount = newByte;
  4148  0138  0873               	movf	UARTRXIntResponse@newByte,w
  4149  0139  00F2               	movwf	??_UARTRXIntResponse
  4150  013A  0872               	movf	??_UARTRXIntResponse,w
  4151  013B  00FA               	movwf	UARTRXIntResponse@bodyByteCount
  4152                           
  4153                           ;UART_RX_SM.c: 339: if (bodyByteCount > 9)
  4154  013C  300A               	movlw	10
  4155  013D  027A               	subwf	UARTRXIntResponse@bodyByteCount,w
  4156  013E  1C03               	skipc
  4157  013F  2942               	goto	i1l2124
  4158                           
  4159                           ;UART_RX_SM.c: 340: {
  4160                           ;UART_RX_SM.c: 341: currentState = WaitFor7E;
  4161  0140  01B3               	clrf	_currentState
  4162                           
  4163                           ;UART_RX_SM.c: 342: }
  4164  0141  0008               	return
  4165  0142                     i1l2124:	
  4166                           
  4167                           ;UART_RX_SM.c: 343: else
  4168                           ;UART_RX_SM.c: 344: {
  4169                           ;UART_RX_SM.c: 345: currentByteIndex = 0;
  4170  0142  01FB               	clrf	UARTRXIntResponse@currentByteIndex
  4171                           
  4172                           ;UART_RX_SM.c: 346: checksum = 0;
  4173  0143  01BA               	clrf	_checksum
  4174                           
  4175                           ;UART_RX_SM.c: 348: currentState = SuckUpData;
  4176  0144  3004               	movlw	4
  4177  0145  00F2               	movwf	??_UARTRXIntResponse
  4178  0146  0872               	movf	??_UARTRXIntResponse,w
  4179  0147  00B3               	movwf	_currentState
  4180                           
  4181                           ;UART_RX_SM.c: 349: }
  4182                           ;UART_RX_SM.c: 350: break;
  4183  0148  0008               	return
  4184  0149                     i1l2128:	
  4185                           ;UART_RX_SM.c: 352: case SuckUpData:
  4186                           
  4187                           
  4188                           ;UART_RX_SM.c: 353: if (currentByteIndex < 9)
  4189  0149  3009               	movlw	9
  4190  014A  027B               	subwf	UARTRXIntResponse@currentByteIndex,w
  4191  014B  1803               	skipnc
  4192  014C  295A               	goto	i1l2134
  4193                           
  4194                           ;UART_RX_SM.c: 354: {
  4195                           ;UART_RX_SM.c: 355: ReceivedData[currentByteIndex] = newByte;
  4196  014D  0873               	movf	UARTRXIntResponse@newByte,w
  4197  014E  00F2               	movwf	??_UARTRXIntResponse
  4198  014F  087B               	movf	UARTRXIntResponse@currentByteIndex,w
  4199  0150  3E44               	addlw	(low (_ReceivedData| 0))& (0+255)
  4200  0151  0084               	movwf	4
  4201  0152  0872               	movf	??_UARTRXIntResponse,w
  4202  0153  1383               	bcf	3,7	;select IRP bank0
  4203  0154  0080               	movwf	0
  4204                           
  4205                           ;UART_RX_SM.c: 356: ++currentByteIndex;
  4206  0155  3001               	movlw	1
  4207  0156  00F2               	movwf	??_UARTRXIntResponse
  4208  0157  0872               	movf	??_UARTRXIntResponse,w
  4209  0158  07FB               	addwf	UARTRXIntResponse@currentByteIndex,f
  4210                           
  4211                           ;UART_RX_SM.c: 358: }
  4212  0159  2965               	goto	i1l2142
  4213  015A                     i1l2134:	
  4214                           
  4215                           ;UART_RX_SM.c: 359: else if (currentByteIndex == bodyByteCount)
  4216  015A  087B               	movf	UARTRXIntResponse@currentByteIndex,w
  4217  015B  067A               	xorwf	UARTRXIntResponse@bodyByteCount,w
  4218  015C  1D03               	skipz
  4219  015D  2964               	goto	i1l2140
  4220                           
  4221                           ;UART_RX_SM.c: 360: {
  4222                           ;UART_RX_SM.c: 361: currentByteIndex = 0;
  4223  015E  01FB               	clrf	UARTRXIntResponse@currentByteIndex
  4224                           
  4225                           ;UART_RX_SM.c: 362: currentState = WaitForCkSum;
  4226  015F  3005               	movlw	5
  4227  0160  00F2               	movwf	??_UARTRXIntResponse
  4228  0161  0872               	movf	??_UARTRXIntResponse,w
  4229  0162  00B3               	movwf	_currentState
  4230                           
  4231                           ;UART_RX_SM.c: 363: }
  4232  0163  2965               	goto	i1l2142
  4233  0164                     i1l2140:	
  4234                           
  4235                           ;UART_RX_SM.c: 364: else
  4236                           ;UART_RX_SM.c: 365: {
  4237                           ;UART_RX_SM.c: 366: currentState = WaitFor7E;
  4238  0164  01B3               	clrf	_currentState
  4239  0165                     i1l2142:	
  4240                           
  4241                           ;UART_RX_SM.c: 367: }
  4242                           ;UART_RX_SM.c: 368: checksum += newByte;
  4243  0165  0873               	movf	UARTRXIntResponse@newByte,w
  4244  0166  00F2               	movwf	??_UARTRXIntResponse
  4245  0167  0872               	movf	??_UARTRXIntResponse,w
  4246  0168  07BA               	addwf	_checksum,f
  4247                           
  4248                           ;UART_RX_SM.c: 369: break;
  4249  0169  0008               	return
  4250  016A                     i1l2144:	
  4251                           ;UART_RX_SM.c: 371: case WaitForCkSum:
  4252                           
  4253                           
  4254                           ;UART_RX_SM.c: 372: if (0xFF == checksum)
  4255  016A  0A3A               	incf	_checksum,w
  4256  016B  1D03               	btfss	3,2
  4257  016C  2971               	goto	i1l2148
  4258                           
  4259                           ;UART_RX_SM.c: 373: {
  4260                           ;UART_RX_SM.c: 374: RXFlag = ((boolean) !((boolean) 0));
  4261  016D  3001               	movlw	1
  4262  016E  00F2               	movwf	??_UARTRXIntResponse
  4263  016F  0872               	movf	??_UARTRXIntResponse,w
  4264  0170  00AE               	movwf	_RXFlag	;volatile
  4265  0171                     i1l2148:	
  4266                           
  4267                           ;UART_RX_SM.c: 375: }
  4268                           ;UART_RX_SM.c: 376: currentState = WaitFor7E;
  4269  0171  01B3               	clrf	_currentState
  4270                           
  4271                           ;UART_RX_SM.c: 380: }
  4272                           
  4273                           ;UART_RX_SM.c: 379: break;
  4274                           
  4275                           ;UART_RX_SM.c: 378: default:
  4276                           
  4277                           ;UART_RX_SM.c: 377: break;
  4278  0172  0008               	return
  4279  0173                     i1l2152:	
  4280  0173  0833               	movf	_currentState,w
  4281                           
  4282                           ; Switch size 1, requested type "space"
  4283                           ; Number of cases is 5, Range of values is 0 to 5
  4284                           ; switch strategies available:
  4285                           ; Name         Instructions Cycles
  4286                           ; simple_byte           16     9 (average)
  4287                           ; direct_byte           19     7 (fixed)
  4288                           ; jumptable            260     6 (fixed)
  4289                           ;	Chosen strategy is simple_byte
  4290  0174  3A00               	xorlw	0	; case 0
  4291  0175  1903               	skipnz
  4292  0176  2923               	goto	i1l2108
  4293  0177  3A01               	xorlw	1	; case 1
  4294  0178  1903               	skipnz
  4295  0179  292E               	goto	i1l2114
  4296  017A  3A03               	xorlw	3	; case 2
  4297  017B  1903               	skipnz
  4298  017C  2938               	goto	i1l2120
  4299  017D  3A06               	xorlw	6	; case 4
  4300  017E  1903               	skipnz
  4301  017F  2949               	goto	i1l2128
  4302  0180  3A01               	xorlw	1	; case 5
  4303  0181  1903               	skipnz
  4304  0182  296A               	goto	i1l2144
  4305  0183  2984               	goto	i1l438
  4306  0184                     i1l438:	
  4307  0184  0008               	return
  4308  0185                     __end_of_UARTRXIntResponse:	
  4309                           
  4310                           	psect	text23
  4311  0566                     __ptext23:	
  4312 ;; *************** function _ClearReceivedDataArray *****************
  4313 ;; Defined at:
  4314 ;;		line 427 in file "UART_RX_SM.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;		None
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  i               1    1[COMMON] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      void 
  4321 ;; Registers used:
  4322 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4328 ;;      Params:         0       0       0       0
  4329 ;;      Locals:         1       0       0       0
  4330 ;;      Temps:          1       0       0       0
  4331 ;;      Totals:         2       0       0       0
  4332 ;;Total ram usage:        2 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; This function calls:
  4335 ;;		Nothing
  4336 ;; This function is called by:
  4337 ;;		_UARTRXIntResponse
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           
  4342                           ;psect for function _ClearReceivedDataArray
  4343  0566                     _ClearReceivedDataArray:	
  4344                           
  4345                           ;UART_RX_SM.c: 428: for (uint8_t i = 0; i < 9; i++)
  4346                           
  4347                           ;incstack = 0
  4348                           ; Regs used in _ClearReceivedDataArray: [wreg-fsr0h+status,2+status,0]
  4349  0566  01F1               	clrf	ClearReceivedDataArray@i
  4350  0567                     L3:	
  4351  0567  3009               	movlw	9
  4352  0568  0271               	subwf	ClearReceivedDataArray@i,w
  4353  0569  1803               	btfsc	3,0
  4354  056A  0008               	return
  4355                           
  4356                           ;UART_RX_SM.c: 429: {
  4357                           ;UART_RX_SM.c: 430: ReceivedData[i] = 0;
  4358  056B  0871               	movf	ClearReceivedDataArray@i,w
  4359  056C  3E44               	addlw	(low (_ReceivedData| 0))& (0+255)
  4360  056D  0084               	movwf	4
  4361  056E  1383               	bcf	3,7	;select IRP bank0
  4362  056F  0180               	clrf	0
  4363  0570  3001               	movlw	1
  4364  0571  00F0               	movwf	??_ClearReceivedDataArray
  4365  0572  0870               	movf	??_ClearReceivedDataArray,w
  4366  0573  07F1               	addwf	ClearReceivedDataArray@i,f
  4367  0574  2D67               	goto	L3
  4368  0575                     __end_of_ClearReceivedDataArray:	
  4369                           
  4370                           	psect	text24
  4371  00B2                     __ptext24:	
  4372 ;; *************** function _SPIIntResponse *****************
  4373 ;; Defined at:
  4374 ;;		line 183 in file "SPI_SM.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;  readByte        1    1[COMMON] unsigned char 
  4379 ;; Return value:  Size  Location     Type
  4380 ;;                  1    wreg      void 
  4381 ;; Registers used:
  4382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4388 ;;      Params:         0       0       0       0
  4389 ;;      Locals:         1       0       0       0
  4390 ;;      Temps:          1       0       0       0
  4391 ;;      Totals:         2       0       0       0
  4392 ;;Total ram usage:        2 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    1
  4395 ;; This function calls:
  4396 ;;		_RX_getStatusBuffer
  4397 ;;		_RX_newStatusReady
  4398 ;; This function is called by:
  4399 ;;		_ISR
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           
  4404                           ;psect for function _SPIIntResponse
  4405  00B2                     _SPIIntResponse:	
  4406                           
  4407                           ;SPI_SM.c: 185: uint8_t readByte;
  4408                           ;SPI_SM.c: 187: if (BF == 1)
  4409                           
  4410                           ;incstack = 0
  4411                           ; Regs used in _SPIIntResponse: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4412  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  4413  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  4414  00B4  1C14               	btfss	20,0	;volatile
  4415  00B5  0008               	return
  4416                           
  4417                           ;SPI_SM.c: 188: {
  4418                           ;SPI_SM.c: 190: readByte = SSPBUF;
  4419  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  4420  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  4421  00B8  0813               	movf	19,w	;volatile
  4422  00B9  00F0               	movwf	??_SPIIntResponse
  4423  00BA  0870               	movf	??_SPIIntResponse,w
  4424  00BB  00F1               	movwf	SPIIntResponse@readByte
  4425                           
  4426                           ;SPI_SM.c: 193: switch (currentState)
  4427  00BC  290C               	goto	i1l2104
  4428  00BD                     i1l2072:	
  4429                           ;SPI_SM.c: 194: {
  4430                           ;SPI_SM.c: 195: case Waiting4Command:
  4431                           
  4432                           
  4433                           ;SPI_SM.c: 197: SSPBUF = 0xFF;
  4434  00BD  30FF               	movlw	255
  4435  00BE  0093               	movwf	19	;volatile
  4436                           
  4437                           ;SPI_SM.c: 199: if (RX_newStatusReady() != ((boolean) !((boolean) 0)))
  4438  00BF  118A  259E  118A   	fcall	_RX_newStatusReady
  4439  00C2  3A01               	xorlw	1
  4440  00C3  1D03               	btfss	3,2
  4441  00C4  28E9               	goto	i1l2088
  4442                           
  4443                           ;SPI_SM.c: 207: else
  4444                           ;SPI_SM.c: 208: {
  4445                           ;SPI_SM.c: 211: StatusResponseStore = RX_getStatusBuffer();
  4446                           
  4447                           ;SPI_SM.c: 205: }
  4448                           
  4449                           ;SPI_SM.c: 204: responseBytes[1] = 0xFF;
  4450                           
  4451                           ;SPI_SM.c: 200: {
  4452                           ;SPI_SM.c: 203: responseBytes[0] = 0xFF;
  4453  00C5  118A  25A4  118A   	fcall	_RX_getStatusBuffer
  4454  00C8  00F0               	movwf	??_SPIIntResponse
  4455  00C9  0870               	movf	??_SPIIntResponse,w
  4456  00CA  00F9               	movwf	_StatusResponseStore
  4457                           
  4458                           ;SPI_SM.c: 213: if (readByte == (0x3F))
  4459  00CB  303F               	movlw	63
  4460  00CC  0671               	xorwf	SPIIntResponse@readByte,w
  4461  00CD  1D03               	btfss	3,2
  4462  00CE  28D8               	goto	i1l2084
  4463                           
  4464                           ;SPI_SM.c: 214: {
  4465                           ;SPI_SM.c: 217: responseBytes[0] = StatusResponseStore[0];
  4466  00CF  0879               	movf	_StatusResponseStore,w
  4467  00D0  0084               	movwf	4
  4468  00D1  1383               	bcf	3,7	;select IRP bank0
  4469  00D2  0800               	movf	0,w
  4470  00D3  00F0               	movwf	??_SPIIntResponse
  4471  00D4  0870               	movf	??_SPIIntResponse,w
  4472  00D5  00FC               	movwf	_responseBytes	;volatile
  4473                           
  4474                           ;SPI_SM.c: 218: responseBytes[1] = StatusResponseStore[0 + 1];
  4475  00D6  0A79               	incf	_StatusResponseStore,w
  4476  00D7  28E6               	goto	L8
  4477  00D8                     i1l2084:	
  4478                           ;SPI_SM.c: 219: }
  4479                           
  4480                           
  4481                           ;SPI_SM.c: 221: else if (readByte == (0xC3))
  4482  00D8  30C3               	movlw	195
  4483  00D9  0671               	xorwf	SPIIntResponse@readByte,w
  4484  00DA  1D03               	btfss	3,2
  4485  00DB  28E9               	goto	i1l2088
  4486                           
  4487                           ;SPI_SM.c: 222: {
  4488                           ;SPI_SM.c: 225: responseBytes[0] = StatusResponseStore[0+2];
  4489  00DC  0879               	movf	_StatusResponseStore,w
  4490  00DD  3E02               	addlw	2
  4491  00DE  0084               	movwf	4
  4492  00DF  1383               	bcf	3,7	;select IRP bank0
  4493  00E0  0800               	movf	0,w
  4494  00E1  00F0               	movwf	??_SPIIntResponse
  4495  00E2  0870               	movf	??_SPIIntResponse,w
  4496  00E3  00FC               	movwf	_responseBytes	;volatile
  4497                           
  4498                           ;SPI_SM.c: 226: responseBytes[1] = StatusResponseStore[0+2 + 1];
  4499  00E4  0879               	movf	_StatusResponseStore,w
  4500  00E5  3E03               	addlw	3
  4501  00E6                     L8:	
  4502  00E6  0084               	movwf	4
  4503  00E7  0800               	movf	0,w
  4504  00E8  28EE               	goto	L6
  4505  00E9                     i1l2088:	
  4506                           ;SPI_SM.c: 227: }
  4507                           
  4508                           
  4509                           ;SPI_SM.c: 228: else {
  4510                           ;SPI_SM.c: 229: responseBytes[0] = 0xFF;
  4511  00E9  30FF               	movlw	255
  4512  00EA  00F0               	movwf	??_SPIIntResponse
  4513  00EB  0870               	movf	??_SPIIntResponse,w
  4514  00EC  00FC               	movwf	_responseBytes	;volatile
  4515                           
  4516                           ;SPI_SM.c: 230: responseBytes[1] = 0xFF;
  4517  00ED  30FF               	movlw	255
  4518  00EE                     L6:	
  4519  00EE  00F0               	movwf	??_SPIIntResponse
  4520  00EF  0870               	movf	??_SPIIntResponse,w
  4521  00F0  00FD               	movwf	_responseBytes+1	;volatile
  4522                           
  4523                           ;SPI_SM.c: 231: }
  4524                           ;SPI_SM.c: 232: }
  4525                           ;SPI_SM.c: 233: SPIBuffer = &responseBytes;
  4526  00F1  307C               	movlw	(low (_responseBytes| 0))& (0+255)
  4527  00F2  00F0               	movwf	??_SPIIntResponse
  4528  00F3  0870               	movf	??_SPIIntResponse,w
  4529  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  4530  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  4531  00F6  00AA               	movwf	_SPIBuffer
  4532                           
  4533                           ;SPI_SM.c: 234: currentState = Waiting4Dummy1;
  4534  00F7  01AB               	clrf	SPI_SM@currentState
  4535  00F8  0AAB               	incf	SPI_SM@currentState,f
  4536                           
  4537                           ;SPI_SM.c: 235: break;
  4538  00F9  291A               	goto	i1l520
  4539  00FA                     i1l2092:	
  4540                           ;SPI_SM.c: 236: case Waiting4Dummy1:
  4541                           
  4542                           
  4543                           ;SPI_SM.c: 237: SSPBUF = SPIBuffer[0];
  4544  00FA  082A               	movf	_SPIBuffer,w
  4545  00FB  0084               	movwf	4
  4546  00FC  0800               	movf	0,w
  4547  00FD  0093               	movwf	19	;volatile
  4548                           
  4549                           ;SPI_SM.c: 238: currentState = Waiting4Dummy2;
  4550  00FE  3002               	movlw	2
  4551  00FF  2905               	goto	L7
  4552  0100                     i1l2096:	
  4553                           ;SPI_SM.c: 240: case Waiting4Dummy2:
  4554                           
  4555                           ;SPI_SM.c: 239: break;
  4556                           
  4557                           
  4558                           ;SPI_SM.c: 241: SSPBUF = SPIBuffer[1];
  4559  0100  0A2A               	incf	_SPIBuffer,w
  4560  0101  0084               	movwf	4
  4561  0102  0800               	movf	0,w
  4562  0103  0093               	movwf	19	;volatile
  4563                           
  4564                           ;SPI_SM.c: 242: currentState = Waiting4Dummy3;
  4565  0104  3003               	movlw	3
  4566  0105                     L7:	
  4567  0105  00F0               	movwf	??_SPIIntResponse
  4568  0106  0870               	movf	??_SPIIntResponse,w
  4569  0107  00AB               	movwf	SPI_SM@currentState
  4570                           
  4571                           ;SPI_SM.c: 243: break;
  4572  0108  291A               	goto	i1l520
  4573  0109                     i1l2100:	
  4574                           ;SPI_SM.c: 244: case Waiting4Dummy3:
  4575                           
  4576                           
  4577                           ;SPI_SM.c: 245: SSPBUF = 0x00;
  4578  0109  0193               	clrf	19	;volatile
  4579                           
  4580                           ;SPI_SM.c: 246: currentState = Waiting4Command;
  4581  010A  01AB               	clrf	SPI_SM@currentState
  4582                           
  4583                           ;SPI_SM.c: 250: }
  4584                           
  4585                           ;SPI_SM.c: 249: break;
  4586                           
  4587                           ;SPI_SM.c: 248: default:
  4588                           
  4589                           ;SPI_SM.c: 247: break;
  4590  010B  291A               	goto	i1l520
  4591  010C                     i1l2104:	
  4592  010C  082B               	movf	SPI_SM@currentState,w
  4593                           
  4594                           ; Switch size 1, requested type "space"
  4595                           ; Number of cases is 4, Range of values is 0 to 3
  4596                           ; switch strategies available:
  4597                           ; Name         Instructions Cycles
  4598                           ; simple_byte           13     7 (average)
  4599                           ; direct_byte           15     7 (fixed)
  4600                           ; jumptable            260     6 (fixed)
  4601                           ;	Chosen strategy is simple_byte
  4602  010D  3A00               	xorlw	0	; case 0
  4603  010E  1903               	skipnz
  4604  010F  28BD               	goto	i1l2072
  4605  0110  3A01               	xorlw	1	; case 1
  4606  0111  1903               	skipnz
  4607  0112  28FA               	goto	i1l2092
  4608  0113  3A03               	xorlw	3	; case 2
  4609  0114  1903               	skipnz
  4610  0115  2900               	goto	i1l2096
  4611  0116  3A01               	xorlw	1	; case 3
  4612  0117  1903               	skipnz
  4613  0118  2909               	goto	i1l2100
  4614  0119  291A               	goto	i1l520
  4615  011A                     i1l520:	
  4616                           
  4617                           ;SPI_SM.c: 251: SSPIF = 0;
  4618  011A  118C               	bcf	12,3	;volatile
  4619  011B  0008               	return
  4620  011C                     __end_of_SPIIntResponse:	
  4621                           
  4622                           	psect	text25
  4623  059E                     __ptext25:	
  4624 ;; *************** function _RX_newStatusReady *****************
  4625 ;; Defined at:
  4626 ;;		line 208 in file "UART_RX_SM.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      unsigned char 
  4633 ;; Registers used:
  4634 ;;		wreg
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4640 ;;      Params:         0       0       0       0
  4641 ;;      Locals:         0       0       0       0
  4642 ;;      Temps:          0       0       0       0
  4643 ;;      Totals:         0       0       0       0
  4644 ;;Total ram usage:        0 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; This function calls:
  4647 ;;		Nothing
  4648 ;; This function is called by:
  4649 ;;		_SPIIntResponse
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           
  4654                           ;psect for function _RX_newStatusReady
  4655  059E                     _RX_newStatusReady:	
  4656                           
  4657                           ;UART_RX_SM.c: 209: return newStatusAvailable;
  4658                           
  4659                           ;incstack = 0
  4660                           ; Regs used in _RX_newStatusReady: [wreg]
  4661  059E  1283               	bcf	3,5	;RP0=0, select bank0
  4662  059F  1303               	bcf	3,6	;RP1=0, select bank0
  4663  05A0  0832               	movf	_newStatusAvailable,w	;volatile
  4664  05A1  0008               	return
  4665  05A2                     __end_of_RX_newStatusReady:	
  4666                           
  4667                           	psect	text26
  4668  05A4                     __ptext26:	
  4669 ;; *************** function _RX_getStatusBuffer *****************
  4670 ;; Defined at:
  4671 ;;		line 225 in file "UART_RX_SM.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;		None
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;		None
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      PTR volatile unsigned ch
  4678 ;; Registers used:
  4679 ;;		wreg
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4685 ;;      Params:         0       0       0       0
  4686 ;;      Locals:         0       0       0       0
  4687 ;;      Temps:          0       0       0       0
  4688 ;;      Totals:         0       0       0       0
  4689 ;;Total ram usage:        0 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; This function calls:
  4692 ;;		Nothing
  4693 ;; This function is called by:
  4694 ;;		_SPIIntResponse
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           
  4699                           ;psect for function _RX_getStatusBuffer
  4700  05A4                     _RX_getStatusBuffer:	
  4701                           
  4702                           ;UART_RX_SM.c: 226: return &StatusArray;
  4703                           
  4704                           ;incstack = 0
  4705                           ; Regs used in _RX_getStatusBuffer: [wreg]
  4706  05A4  303B               	movlw	(low (_StatusArray| 0))& (0+255)
  4707  05A5  0008               	return
  4708  05A6                     __end_of_RX_getStatusBuffer:	
  4709  000C                     
  4710                           	psect	functab
  4711  002D                     __pfunctab:	
  4712  002D                     __fptable:	
  4713  002D                     fptable:	
  4714  002D  00FF               	movwf	(btemp+1)& (0+127)
  4715  002E  3000               	movlw	high fptable
  4716  002F  008A               	movwf	10
  4717  0030  087F               	movf	(btemp+1)& (0+127),w
  4718  0031  0782               	addwf	2,f
  4719  0032                     fpbase:	
  4720  0032  2832               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  4721  0033                     fp__InitUARTRXService:	
  4722  0033  118A  2CF1         	ljmp	_InitUARTRXService
  4723  0035                     fp__InitSPIService:	
  4724  0035  118A  2B9C         	ljmp	_InitSPIService
  4725  0037                     fp__CheckUARTRXEvent:	
  4726  0037                     entry__CheckUARTRXEvent:	
  4727  0037  118A  2CD6         	ljmp	_CheckUARTRXEvent
  4728  0039                     fp__PostUARTRXService:	
  4729  0039  118A  2D75         	ljmp	_PostUARTRXService
  4730  003B                     fp__RunSPIService:	
  4731  003B                     entry__RunSPIService:	
  4732  003B  118A  2D8C         	ljmp	_RunSPIService
  4733  003D                     fp__RunUARTRXService:	
  4734  003D                     entry__RunUARTRXService:	
  4735  003D  118A  2985         	ljmp	_RunUARTRXService
  4736  003F                     __end_of__fptable:	
  4737  007E                     btemp	set	126	;btemp
  4738  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    40
    Data        2
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     31      79
    BANK1            80      0      40
    BANK2            80      0       0

Pointer List with Targets:

    ES_PostToService$1091	const PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    ES_Run$1085	const PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    ES_Timer_RTI_Resp$1070	const PTR FTN(struct ES_Event_t,)unsigned char  size(1) Largest target is 1
		 -> PostUARTRXService(), Absolute function(), 

    ES_PostToService$1067	const PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    ES_Run$1061	const PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    SPIBuffer	PTR volatile unsigned char  size(1) Largest target is 2
		 -> NULL(NULL[0]), responseBytes(COMMON[2]), 

    StatusResponseStore	PTR volatile unsigned char  size(1) Largest target is 9
		 -> NULL(NULL[0]), StatusArray(BANK0[9]), 

    sp__RX_getResponseBuffer	PTR volatile unsigned char  size(1) Largest target is 9
		 -> ReceivedData(BANK0[9]), 

    sp__RX_getStatusBuffer	PTR volatile unsigned char  size(1) Largest target is 9
		 -> StatusArray(BANK0[9]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [8] size(1) Largest target is 1
		 -> PostUARTRXService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(1) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    S81$pMem	PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(1) Largest target is 12
		 -> Queue1(BANK1[12]), Queue0(BANK1[12]), 

    S50$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(1) Largest target is 3
		 -> RunSPIService(), RunUARTRXService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(1) Largest target is 3
		 -> RunSPIService(), RunUARTRXService(), 

    S50$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> InitSPIService(), InitUARTRXService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> InitSPIService(), InitUARTRXService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(1) Largest target is 1
		 -> CheckUARTRXEvent(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_UARTRXIntResponse
    _UARTRXIntResponse->_ClearReceivedDataArray

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_ES_Timer_RTI_Resp
    _RunUARTRXService->_ES_Timer_InitTimer
    _ES_Timer_RTI_Resp->_PostUARTRXService
    _PostUARTRXService->_ES_PostToService
    _ES_DeQueue->___bmul
    _CheckUARTRXEvent->_ES_PostToService
    _ES_Initialize->_InitSPIService
    _ES_Initialize->_InitUARTRXService
    _InitUARTRXService->_ES_PostToService
    _InitSPIService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___bmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7772
                                             29 BANK0      2     2      0
                      _ES_Initialize
                             _ES_Run
                         _USART_Init
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (0) _ES_Run                                               5     3      2    4569
                                             24 BANK0      5     3      2
                       _CheckSSEvent
                   _CheckUARTRXEvent
                         _ES_DeQueue
                     _ES_GetMSBitSet
                  _ES_Timer_RTI_Resp
                     _IsTimerPending
                      _RunSPIService
                   _RunUARTRXService
 ---------------------------------------------------------------------------------
 (1) _RunUARTRXService                                    13    10      3     488
                                              4 BANK0     13    10      3
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_InitTimer                                   4     2      2     208
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _RunSPIService                                        6     3      3      99
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _IsTimerPending                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Timer_RTI_Resp                                    3     3      0    1550
                                             21 BANK0      3     3      0
                   Absolute function *
                     _ES_GetMSBitSet
                  _PostUARTRXService *
 ---------------------------------------------------------------------------------
 (2) _PostUARTRXService                                    3     0      3    1369
                                             18 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _ES_GetMSBitSet                                       7     7      0     181
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               3     0      3       0
 ---------------------------------------------------------------------------------
 (1) _ES_DeQueue                                          10     9      1     729
                                              4 BANK0     10     9      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _CheckUARTRXEvent                                     4     4      0    1341
                                             18 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (1) _CheckSSEvent                                         3     3      0      75
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        4     4      0    3135
                                             23 BANK0      3     3      0
                       _ES_InitQueue
                  _ES_Sys_Timer_Init
                     _InitSPIService *
                  _InitUARTRXService *
 ---------------------------------------------------------------------------------
 (2) _InitUARTRXService                                    5     4      1    1339
                                             18 BANK0      5     4      1
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitSPIService                                       5     4      1    1392
                                             18 BANK0      5     4      1
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _ES_PostToService                                     5     2      3    1294
                                             13 BANK0      5     2      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (4) _ES_EnQueueFIFO                                       9     6      3     816
                                              4 BANK0      9     6      3
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     308
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_Sys_Timer_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  5     5      0     224
                                              4 COMMON     5     5      0
                     _SPIIntResponse
                  _UARTRXIntResponse
 ---------------------------------------------------------------------------------
 (7) _UARTRXIntResponse                                    2     2      0     179
                                              2 COMMON     2     2      0
             _ClearReceivedDataArray
 ---------------------------------------------------------------------------------
 (8) _ClearReceivedDataArray                               2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) _SPIIntResponse                                       2     2      0      45
                                              0 COMMON     2     2      0
                 _RX_getStatusBuffer
                  _RX_newStatusReady
 ---------------------------------------------------------------------------------
 (8) _RX_newStatusReady                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _RX_getStatusBuffer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Sys_Timer_Init
     _InitSPIService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
     _InitUARTRXService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
   _ES_Run
     _CheckSSEvent
     _CheckUARTRXEvent
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
     _ES_DeQueue
       ___bmul
     _ES_GetMSBitSet
     _ES_Timer_RTI_Resp
       Absolute function(Fake) *
       _ES_GetMSBitSet *
       _PostUARTRXService *
         _ES_PostToService
           _ES_EnQueueFIFO
             ___bmul
     _IsTimerPending
     _RunSPIService
     _RunUARTRXService
       _ES_Timer_InitTimer
   _USART_Init

 _ISR (ROOT)
   _SPIIntResponse
     _RX_getStatusBuffer
     _RX_newStatusReady
   _UARTRXIntResponse
     _ClearReceivedDataArray

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      28       5       50.0%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1F      4F       3       98.8%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      85      10        0.0%
ABS                  0      0      85       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May  7 19:41:05 2018

                                 pc 0002                      ___bmul@product 0052  
        __size_of_ES_Sys_Timer_Init 001E                         __CFG_CP$OFF 0000  
                                _BF 04A0                                  l71 00AE  
                                fsr 0004     RunUARTRXService@FieldAddressLSB 005F  
   RunUARTRXService@FieldAddressMSB 005E                                 l337 0408  
             __end_of_ES_Initialize 0306                                 _GIE 005F  
                               _RC0 0038                                 _RC3 003B  
                               _RC4 003C                                 _RC5 003D  
                               _RC6 003E                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                      __CFG_CPD$OFF 0000                                 _ISR 0409  
                               u815 0383                                 _PSA 040B  
                               u785 036A                                 u794 0375  
                               u795 0373                  SPI_SM@currentState 002B  
           ?_ClearReceivedDataArray 0070                                 fsr0 0004  
                               indf 0000                        __CFG_FOSC$HS 0000  
           ES_EnQueueFIFO@Event2Add 0054              __end_of_InitSPIService 03D4  
                 ?_ES_PostToService 005D                                ?_ISR 0070  
                   ?_SPIIntResponse 0070                                l2000 03D2  
                              l2020 02CF                                l2012 02B8  
                              l2030 0304                                l2016 02CD  
                              l2026 02FA                                l2302 023D  
                              l2310 0071                                l2330 009F  
                              l2316 007E                                l2324 0091  
                              l2326 0042                                l2328 009C  
                              l1706 0358                                l1722 048E  
                              l1820 02A3                                l2292 01F7  
                              l2364 0400                                l1742 039A  
                              l1734 0365                                l1910 058A  
                              l1672 055D                                l1816 0297  
                              l1832 0189                                l1690 0331  
                              l1826 02AC                                l1738 0394  
                              l1850 01AE                                l1668 0557  
                              l1924 054E                                l1862 01D3  
                              l1870 01E1                                l1776 04EF  
                              l1856 01C2                                l1938 050A  
                              l1868 01D9                                _ANS4 08F4  
                              _ANS7 08F7                                _BRGH 04C2  
                              _T0IE 005D                                _T0IF 005A  
                              _CREN 00C4                                _T0CS 040D  
                              _PEIE 005E                                _RCIE 0465  
                              _RCIF 0065                                _TMR0 0001  
                              _SPEN 00C7                  ??_ES_PostToService 0060  
                              _TXIE 0464                                _TXEN 04C5  
                              _TXIF 0064                                _SYNC 04C4  
                              _main 03D4                         ?_ES_DeQueue 0054  
                              _time 0025                                btemp 007E  
                     main@ErrorType 006E                                start 0011  
                     __CFG_IESO$OFF 0000                   ___bmul@multiplier 0053  
                     __CFG_MCLRE$ON 0000                               ??_ISR 0074  
        __size_of_ES_Timer_RTI_Resp 0063                  ES_Run@HighestPrior 006C  
                  _CheckUARTRXEvent 04D6                               ?_main 0070  
    __end_of_ClearReceivedDataArray 0575                               _ANS11 08FB  
                             _BRG16 04DB                       __CFG_WDTE$OFF 0000  
                             i1l520 011A                               i1l438 0184  
                             _RCREG 001A               __size_of_CheckSSEvent 0016  
                             _SPBRG 0099                               _PORTC 0007  
                             _SSPIE 0463                               _SSPIF 0063  
                             _TXREG 0019                       __CFG_PWRTE$ON 0000  
                             _Ready 0039                      __CFG_FCMEN$OFF 0000  
            ES_EnQueueFIFO@saveCrit 0059                               _flag2 0030  
                             _flag3 002F                     ?_InitSPIService 0062  
                             fpbase 0032                      __CFG_BOREN$OFF 0000  
                 _RX_newStatusReady 059E                               pclath 000A  
       RunUARTRXService@ReturnEvent 005B                               status 0003  
                             wtemp0 007E                  ?_RX_newStatusReady 0070  
                _RX_getStatusBuffer 05A4                         ?_USART_Init 0070  
                   __initialization 0013              ES_GetMSBitSet@LoopCntr 0056  
               ??_RX_newStatusReady 0070                        __end_of_main 0409  
               ?_RX_getStatusBuffer 0070           ES_Timer_RTI_Resp@NewEvent 0020  
                      _CheckSSEvent 053D        ES_EnQueueFIFO@InsertionPoint 005A  
               __end_of_EventQueues 0462                              ??_main 006D  
               __size_of_ES_DeQueue 0063                     _Nybble2MSBitNum 043F  
                 RunUARTRXService@i 0060               __end_of_RunSPIService 0596  
          RunSPIService@ReturnEvent 0053                ??_RX_getStatusBuffer 0070  
         __end_of_RX_newStatusReady 05A2      UARTRXIntResponse@bodyByteCount 007A  
                        _MyPriority 0034                              _ANSELH 011F  
                  ??_ES_GetMSBitSet 0050                              i1l2100 0109  
                            i1l2104 010C                              i1l2120 0138  
                            i1l2114 012E                              i1l2140 0164  
                            i1l2124 0142                              i1l2108 0123  
                            i1l2142 0165                              i1l2134 015A  
                            i1l2118 0136                              i1l2222 041E  
                            i1l2072 00BD                              i1l2144 016A  
                            i1l2128 0149                              i1l2152 0173  
                            i1l2216 0413                              i1l2092 00FA  
                            i1l2084 00D8                              i1l2148 0171  
                            i1l2228 042B                              i1l2096 0100  
                            i1l2088 00E9                              _INTCON 000B  
                            u1497jf 03FA                              u1497jt 0002  
                            _OSCCON 008F                              _ES_Run 003F  
                            _SPBRGH 009A                              _TRISC0 0438  
                            _TRISB4 0434                              _TRISC3 043B  
                            _TRISC4 043C                              _TRISB6 0436  
                            _TRISC5 043D                              _TRISC6 043E  
                            _TRISC7 043F                              _SSPBUF 0013  
                            _SSPCON 0014                    ??_IsTimerPending 0050  
                  __end_of__fptable 003F                              _RXFlag 002E  
                  ??_ES_EnQueueFIFO 0057                      _Timer2PostFunc 044E  
                            _Queue0 00BC                              _Queue1 00B0  
                            ___bmul 0553         __size_of_ES_Timer_InitTimer 0028  
                 ?_RunUARTRXService 0054           ES_Timer_InitTimer@NewTime 0050  
             CheckSSEvent@returnVal 0051                  ??_RunUARTRXService 0057  
                            fptable 002D                        __pdataCOMMON 007C  
                            fptotal 000C              ES_InitQueue@pThisQueue 0053  
                            saved_w 007E                 __size_of_USART_Init 001A  
              _newResponseAvailable 0031                ES_DeQueue@pThisQueue 005D  
           ES_GetMSBitSet@Val2Check 0053             __end_of__initialization 002A  
            __end_of_Timer2PostFunc 0456                 ___bmul@multiplicand 0050  
                       _EventQueues 045E                      __pcstackCOMMON 0070  
                     ?_ES_InitQueue 0050                  _newStatusAvailable 0032  
           __end_of_Nybble2MSBitNum 044E                   _PostUARTRXService 0575  
                 __pjmp_tab__ES_Run 0002                     _TMR_ActiveFlags 0037  
                ?_PostUARTRXService 0062             ES_GetMSBitSet@ReturnVal 0054  
               fp__CheckUARTRXEvent 0037                    ??_SPIIntResponse 0070  
         CheckUARTRXEvent@CommEvent 0063                      _TMR_TimerArray 00A0  
               ??_PostUARTRXService 0065          __size_of_RX_newStatusReady 0004  
                      _hasHeartbeat 002D                   _UARTRXIntResponse 011C  
          ES_EnQueueFIFO@pThisQueue 005C            __end_of_CheckUARTRXEvent 04F1  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                ?_UARTRXIntResponse 0070                             ?_ES_Run 0068  
                      ??_ES_DeQueue 0055                 ??_UARTRXIntResponse 0072  
                        __pmaintext 03D4           __size_of_ES_PostToService 0029  
                           ?___bmul 0050              entry__CheckUARTRXEvent 0037  
                    ??_ES_InitQueue 0051           __end_of_PostUARTRXService 0581  
                        __pintentry 0004                 _StatusResponseStore 0079  
                  ??_InitSPIService 0063                  __end_of_ES_DeQueue 02AE  
         __end_of_UARTRXIntResponse 0185                             _SSPSTAT 0094  
                        __stringtab 0439                     __size_of_ES_Run 0073  
            __size_of_ES_Initialize 0058                        ??_USART_Init 0050  
                   __size_of___bmul 0013               ES_Timer_InitTimer@Num 0053  
                        _newRequest 0028                             __ptext1 050C  
                           __ptext2 003F                             __ptext3 0185  
                           __ptext4 0490                             __ptext5 058C  
                           __ptext6 0581                             __ptext7 01E8  
                           __ptext8 0575                             __ptext9 035A  
                      __size_of_ISR 0030                     ES_Run@ThisEvent 004D  
                __end_of_USART_Init 0526                             clrloop0 0597  
              end_of_initialization 002A                   _InitUARTRXService 04F1  
                ?_InitUARTRXService 0062        ES_PostToService@WhichService 0061  
               ??_InitUARTRXService 0063          __size_of_PostUARTRXService 000C  
 UARTRXIntResponse@currentByteIndex 007B                         _StatusArray 003B  
                     _ES_Initialize 02AE                           _SPIBuffer 002A  
        __size_of_UARTRXIntResponse 0069                __end_of_ES_EventList 0467  
         __end_of_InitUARTRXService 050C         __size_of_RX_getStatusBuffer 0002  
              __end_of_ES_InitQueue 053D                      ES_Initialize@i 0069  
         __size_of_RunUARTRXService 0063                      __end_of_ES_Run 00B2  
                  _ES_PostToService 0467                           _FieldAddr 0023  
            RunSPIService@ThisEvent 0050          __end_of_ES_Timer_InitTimer 04B8  
            __size_of_RunSPIService 000A            ??_ClearReceivedDataArray 0070  
                  fp__RunSPIService 003B                __end_of_ServDescList 0466  
                    __end_of___bmul 0566                       __pidataCOMMON 05A2  
                    ?_ES_Initialize 0070                 start_initialization 0013  
                       __end_of_ISR 0439                   ?_CheckUARTRXEvent 0070  
  ES_Timer_RTI_Resp@NeedsProcessing 0036                            ??_ES_Run 006A  
                ??_CheckUARTRXEvent 0062                           _TickCount 0038  
           __size_of_ES_GetMSBitSet 0042                            ??___bmul 0051  
           __size_of_IsTimerPending 000B             __size_of_ES_EnQueueFIFO 0054  
        PostUARTRXService@ThisEvent 0062           RunUARTRXService@ThisEvent 0054  
                       __pbssCOMMON 0079                           ___latbits 0001  
                     __pcstackBANK0 0050                        _ReceivedData 0044  
                ES_InitQueue@pBlock 0052                       _RunSPIService 058C  
                 __size_of__fptable 0012          __size_of_InitUARTRXService 001B  
                CheckSSEvent@lastSS 0027             ClearReceivedDataArray@i 0071  
                CheckSSEvent@thisSS 0052                        _currentState 0033  
                         __pfunctab 002D                       ?_CheckSSEvent 0070  
   __size_of_ClearReceivedDataArray 000F                     ??_ES_Initialize 0067  
          ES_PostToService@TheEvent 005D                           __pstrings 0439  
             __size_of_ES_InitQueue 0017                      ?_RunSPIService 0050  
              fp__PostUARTRXService 0039                    _RunUARTRXService 0185  
              ES_Initialize@NewRate 0070           ES_GetMSBitSet@Nybble2Test 0055  
                 interrupt_function 0004             __size_of_SPIIntResponse 006A  
                         clear_ram0 0596                      ??_CheckSSEvent 0050  
                      _ES_EventList 0466                        _ES_InitQueue 0526  
                       __stringbase 043E                ES_EnQueueFIFO@pBlock 005B  
                  SPI_SM@MyPriority 002C            __end_of_ES_PostToService 0490  
            _ClearReceivedDataArray 0566                      _BitNum2SetMask 0456  
                      _ServDescList 0462             __size_of_InitSPIService 0038  
                 fp__InitSPIService 0035                 entry__RunSPIService 003B  
                    _ES_GetMSBitSet 035A                      _IsTimerPending 0581  
                    _ES_EnQueueFIFO 0306                   _ES_Sys_Timer_Init 04B8  
                __end_of__stringtab 043F                       _responseBytes 007C  
                   ??_RunSPIService 0053                  ?_ES_Sys_Timer_Init 0070  
                          __fptable 002D          __end_of_RX_getStatusBuffer 05A6  
                _ES_Timer_InitTimer 0490                            _checksum 003A  
                ES_DeQueue@saveCrit 005A              __end_of_BitNum2SetMask 045E  
                          __ptext10 024B                            __ptext11 04D6  
                          __ptext20 0526                            __ptext12 053D  
                          __ptext21 0409                            __ptext13 02AE  
                          __ptext22 011C                            __ptext14 039C  
                          __ptext23 0566                            __ptext15 04F1  
                          __ptext24 00B2                            __ptext16 0467  
                          __ptext25 059E                            __ptext17 0306  
                          __ptext26 05A4                            __ptext18 0553  
                          __ptext19 04B8                            _commOpen 0029  
               ??_ES_Sys_Timer_Init 0050                 ?_ES_Timer_InitTimer 0050  
                     __size_of_main 0035              __end_of_ES_GetMSBitSet 039C  
            __end_of_IsTimerPending 058C                fp__InitUARTRXService 0033  
            __end_of_ES_EnQueueFIFO 035A           __end_of_ES_Sys_Timer_Init 04D6  
              ??_ES_Timer_InitTimer 0052           __size_of_CheckUARTRXEvent 001B  
           InitSPIService@ThisEvent 0064                   ES_DeQueue@NumLeft 005B  
                 _ES_Timer_RTI_Resp 01E8                  ?_ES_Timer_RTI_Resp 0070  
              __end_of_CheckSSEvent 0553                 ??_ES_Timer_RTI_Resp 0065  
                          intlevel1 002D  ES_Timer_RTI_Resp@NextTimer2Process 0035  
                    _SPIIntResponse 00B2                          _ES_DeQueue 024B  
               fp__RunUARTRXService 003D                     ?_ES_GetMSBitSet 0070  
                         stringcode 0439            UARTRXIntResponse@newByte 0073  
                   ?_IsTimerPending 0070                     ?_ES_EnQueueFIFO 0054  
         __end_of_ES_Timer_RTI_Resp 024B            __end_of_RunUARTRXService 01E8  
            InitSPIService@Priority 0062              SPIIntResponse@readByte 0071  
                  ES_DeQueue@pBlock 005C                            stringdir 0439  
        InitUARTRXService@ThisEvent 0064                            stringtab 0439  
            entry__RunUARTRXService 003D              ES_DeQueue@pReturnEvent 0054  
             ES_InitQueue@BlockSize 0050              __end_of_SPIIntResponse 011C  
                    _InitSPIService 039C           InitUARTRXService@Priority 0062  
                        _USART_Init 050C  
