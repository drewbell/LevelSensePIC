

Microchip Technology PIC STD Macro Assembler V1.35 build -356382666 
                                                                                               Thu Feb 04 20:34:42 2016

Microchip Technology Omniscient Code Generator v1.35 (Standard mode) build 201507080246
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	sm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	jmp_tab__ES_Initialize,global,class=ENTRY,delta=2
    19                           	psect	jmp_tab__ES_Run,global,class=ENTRY,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	jmp_tab,global,class=ENTRY,delta=2
    23                           	psect	jmp_tab__ES_Timer_RTI_Resp,global,class=ENTRY,delta=2
    24                           	psect	jmp_tab__ES_CheckUserEvents,global,class=ENTRY,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	jmp_tab__retrySend,global,class=ENTRY,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text25,local,class=CODE,merge=1,delta=2
    33                           	psect	text26,local,class=CODE,merge=1,delta=2
    34                           	psect	text27,local,class=CODE,merge=1,delta=2
    35                           	psect	text28,local,class=CODE,merge=1,delta=2
    36                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text37,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	functab,global,reloc=256,class=CODE,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001C                     	;# 
    77  001D                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  0081                     	;# 
    81  0085                     	;# 
    82  0086                     	;# 
    83  0087                     	;# 
    84  008C                     	;# 
    85  008D                     	;# 
    86  008E                     	;# 
    87  008F                     	;# 
    88  0090                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0093                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0095                     	;# 
    95  0095                     	;# 
    96  0096                     	;# 
    97  0096                     	;# 
    98  0097                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009A                     	;# 
   102  009B                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  010C                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  0115                     	;# 
   111  0116                     	;# 
   112  0118                     	;# 
   113  0119                     	;# 
   114  011A                     	;# 
   115  011B                     	;# 
   116  011E                     	;# 
   117  011F                     	;# 
   118  018C                     	;# 
   119  018D                     	;# 
   120  019D                     	;# 
   121  019E                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000D                     	;# 
   134  000E                     	;# 
   135  000E                     	;# 
   136  000F                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001C                     	;# 
   150  001D                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  0081                     	;# 
   154  0085                     	;# 
   155  0086                     	;# 
   156  0087                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  008F                     	;# 
   161  0090                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0093                     	;# 
   165  0093                     	;# 
   166  0094                     	;# 
   167  0095                     	;# 
   168  0095                     	;# 
   169  0096                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009A                     	;# 
   175  009B                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  010C                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  010F                     	;# 
   183  0115                     	;# 
   184  0116                     	;# 
   185  0118                     	;# 
   186  0119                     	;# 
   187  011A                     	;# 
   188  011B                     	;# 
   189  011E                     	;# 
   190  011F                     	;# 
   191  018C                     	;# 
   192  018D                     	;# 
   193  019D                     	;# 
   194  019E                     	;# 
   195  0000                     	;# 
   196  0001                     	;# 
   197  0002                     	;# 
   198  0003                     	;# 
   199  0004                     	;# 
   200  0005                     	;# 
   201  0006                     	;# 
   202  0007                     	;# 
   203  000A                     	;# 
   204  000B                     	;# 
   205  000C                     	;# 
   206  000D                     	;# 
   207  000E                     	;# 
   208  000E                     	;# 
   209  000F                     	;# 
   210  0010                     	;# 
   211  0011                     	;# 
   212  0012                     	;# 
   213  0013                     	;# 
   214  0014                     	;# 
   215  0015                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0017                     	;# 
   219  0018                     	;# 
   220  0019                     	;# 
   221  001A                     	;# 
   222  001C                     	;# 
   223  001D                     	;# 
   224  001E                     	;# 
   225  001F                     	;# 
   226  0081                     	;# 
   227  0085                     	;# 
   228  0086                     	;# 
   229  0087                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  008F                     	;# 
   234  0090                     	;# 
   235  0092                     	;# 
   236  0093                     	;# 
   237  0093                     	;# 
   238  0093                     	;# 
   239  0094                     	;# 
   240  0095                     	;# 
   241  0095                     	;# 
   242  0096                     	;# 
   243  0096                     	;# 
   244  0097                     	;# 
   245  0098                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009E                     	;# 
   250  009F                     	;# 
   251  010C                     	;# 
   252  010C                     	;# 
   253  010D                     	;# 
   254  010E                     	;# 
   255  010F                     	;# 
   256  0115                     	;# 
   257  0116                     	;# 
   258  0118                     	;# 
   259  0119                     	;# 
   260  011A                     	;# 
   261  011B                     	;# 
   262  011E                     	;# 
   263  011F                     	;# 
   264  018C                     	;# 
   265  018D                     	;# 
   266  019D                     	;# 
   267  019E                     	;# 
   268  0000                     	;# 
   269  0001                     	;# 
   270  0002                     	;# 
   271  0003                     	;# 
   272  0004                     	;# 
   273  0005                     	;# 
   274  0006                     	;# 
   275  0007                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  000E                     	;# 
   282  000F                     	;# 
   283  0010                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0013                     	;# 
   287  0014                     	;# 
   288  0015                     	;# 
   289  0015                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001C                     	;# 
   296  001D                     	;# 
   297  001E                     	;# 
   298  001F                     	;# 
   299  0081                     	;# 
   300  0085                     	;# 
   301  0086                     	;# 
   302  0087                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  008F                     	;# 
   307  0090                     	;# 
   308  0092                     	;# 
   309  0093                     	;# 
   310  0093                     	;# 
   311  0093                     	;# 
   312  0094                     	;# 
   313  0095                     	;# 
   314  0095                     	;# 
   315  0096                     	;# 
   316  0096                     	;# 
   317  0097                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009A                     	;# 
   321  009B                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010C                     	;# 
   326  010D                     	;# 
   327  010E                     	;# 
   328  010F                     	;# 
   329  0115                     	;# 
   330  0116                     	;# 
   331  0118                     	;# 
   332  0119                     	;# 
   333  011A                     	;# 
   334  011B                     	;# 
   335  011E                     	;# 
   336  011F                     	;# 
   337  018C                     	;# 
   338  018D                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  0000                     	;# 
   342  0001                     	;# 
   343  0002                     	;# 
   344  0003                     	;# 
   345  0004                     	;# 
   346  0005                     	;# 
   347  0006                     	;# 
   348  0007                     	;# 
   349  000A                     	;# 
   350  000B                     	;# 
   351  000C                     	;# 
   352  000D                     	;# 
   353  000E                     	;# 
   354  000E                     	;# 
   355  000F                     	;# 
   356  0010                     	;# 
   357  0011                     	;# 
   358  0012                     	;# 
   359  0013                     	;# 
   360  0014                     	;# 
   361  0015                     	;# 
   362  0015                     	;# 
   363  0016                     	;# 
   364  0017                     	;# 
   365  0018                     	;# 
   366  0019                     	;# 
   367  001A                     	;# 
   368  001C                     	;# 
   369  001D                     	;# 
   370  001E                     	;# 
   371  001F                     	;# 
   372  0081                     	;# 
   373  0085                     	;# 
   374  0086                     	;# 
   375  0087                     	;# 
   376  008C                     	;# 
   377  008D                     	;# 
   378  008E                     	;# 
   379  008F                     	;# 
   380  0090                     	;# 
   381  0092                     	;# 
   382  0093                     	;# 
   383  0093                     	;# 
   384  0093                     	;# 
   385  0094                     	;# 
   386  0095                     	;# 
   387  0095                     	;# 
   388  0096                     	;# 
   389  0096                     	;# 
   390  0097                     	;# 
   391  0098                     	;# 
   392  0099                     	;# 
   393  009A                     	;# 
   394  009B                     	;# 
   395  009E                     	;# 
   396  009F                     	;# 
   397  010C                     	;# 
   398  010C                     	;# 
   399  010D                     	;# 
   400  010E                     	;# 
   401  010F                     	;# 
   402  0115                     	;# 
   403  0116                     	;# 
   404  0118                     	;# 
   405  0119                     	;# 
   406  011A                     	;# 
   407  011B                     	;# 
   408  011E                     	;# 
   409  011F                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412  019D                     	;# 
   413  019E                     	;# 
   414  0000                     	;# 
   415  0001                     	;# 
   416  0002                     	;# 
   417  0003                     	;# 
   418  0004                     	;# 
   419  0005                     	;# 
   420  0006                     	;# 
   421  0007                     	;# 
   422  000A                     	;# 
   423  000B                     	;# 
   424  000C                     	;# 
   425  000D                     	;# 
   426  000E                     	;# 
   427  000E                     	;# 
   428  000F                     	;# 
   429  0010                     	;# 
   430  0011                     	;# 
   431  0012                     	;# 
   432  0013                     	;# 
   433  0014                     	;# 
   434  0015                     	;# 
   435  0015                     	;# 
   436  0016                     	;# 
   437  0017                     	;# 
   438  0018                     	;# 
   439  0019                     	;# 
   440  001A                     	;# 
   441  001C                     	;# 
   442  001D                     	;# 
   443  001E                     	;# 
   444  001F                     	;# 
   445  0081                     	;# 
   446  0085                     	;# 
   447  0086                     	;# 
   448  0087                     	;# 
   449  008C                     	;# 
   450  008D                     	;# 
   451  008E                     	;# 
   452  008F                     	;# 
   453  0090                     	;# 
   454  0092                     	;# 
   455  0093                     	;# 
   456  0093                     	;# 
   457  0093                     	;# 
   458  0094                     	;# 
   459  0095                     	;# 
   460  0095                     	;# 
   461  0096                     	;# 
   462  0096                     	;# 
   463  0097                     	;# 
   464  0098                     	;# 
   465  0099                     	;# 
   466  009A                     	;# 
   467  009B                     	;# 
   468  009E                     	;# 
   469  009F                     	;# 
   470  010C                     	;# 
   471  010C                     	;# 
   472  010D                     	;# 
   473  010E                     	;# 
   474  010F                     	;# 
   475  0115                     	;# 
   476  0116                     	;# 
   477  0118                     	;# 
   478  0119                     	;# 
   479  011A                     	;# 
   480  011B                     	;# 
   481  011E                     	;# 
   482  011F                     	;# 
   483  018C                     	;# 
   484  018D                     	;# 
   485  019D                     	;# 
   486  019E                     	;# 
   487  0000                     	;# 
   488  0001                     	;# 
   489  0002                     	;# 
   490  0003                     	;# 
   491  0004                     	;# 
   492  0005                     	;# 
   493  0006                     	;# 
   494  0007                     	;# 
   495  000A                     	;# 
   496  000B                     	;# 
   497  000C                     	;# 
   498  000D                     	;# 
   499  000E                     	;# 
   500  000E                     	;# 
   501  000F                     	;# 
   502  0010                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0013                     	;# 
   506  0014                     	;# 
   507  0015                     	;# 
   508  0015                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001C                     	;# 
   515  001D                     	;# 
   516  001E                     	;# 
   517  001F                     	;# 
   518  0081                     	;# 
   519  0085                     	;# 
   520  0086                     	;# 
   521  0087                     	;# 
   522  008C                     	;# 
   523  008D                     	;# 
   524  008E                     	;# 
   525  008F                     	;# 
   526  0090                     	;# 
   527  0092                     	;# 
   528  0093                     	;# 
   529  0093                     	;# 
   530  0093                     	;# 
   531  0094                     	;# 
   532  0095                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0098                     	;# 
   538  0099                     	;# 
   539  009A                     	;# 
   540  009B                     	;# 
   541  009E                     	;# 
   542  009F                     	;# 
   543  010C                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  010F                     	;# 
   548  0115                     	;# 
   549  0116                     	;# 
   550  0118                     	;# 
   551  0119                     	;# 
   552  011A                     	;# 
   553  011B                     	;# 
   554  011E                     	;# 
   555  011F                     	;# 
   556  018C                     	;# 
   557  018D                     	;# 
   558  019D                     	;# 
   559  019E                     	;# 
   560  0000                     	;# 
   561  0001                     	;# 
   562  0002                     	;# 
   563  0003                     	;# 
   564  0004                     	;# 
   565  0005                     	;# 
   566  0006                     	;# 
   567  0007                     	;# 
   568  000A                     	;# 
   569  000B                     	;# 
   570  000C                     	;# 
   571  000D                     	;# 
   572  000E                     	;# 
   573  000E                     	;# 
   574  000F                     	;# 
   575  0010                     	;# 
   576  0011                     	;# 
   577  0012                     	;# 
   578  0013                     	;# 
   579  0014                     	;# 
   580  0015                     	;# 
   581  0015                     	;# 
   582  0016                     	;# 
   583  0017                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  001C                     	;# 
   588  001D                     	;# 
   589  001E                     	;# 
   590  001F                     	;# 
   591  0081                     	;# 
   592  0085                     	;# 
   593  0086                     	;# 
   594  0087                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  008F                     	;# 
   599  0090                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0093                     	;# 
   603  0093                     	;# 
   604  0094                     	;# 
   605  0095                     	;# 
   606  0095                     	;# 
   607  0096                     	;# 
   608  0096                     	;# 
   609  0097                     	;# 
   610  0098                     	;# 
   611  0099                     	;# 
   612  009A                     	;# 
   613  009B                     	;# 
   614  009E                     	;# 
   615  009F                     	;# 
   616  010C                     	;# 
   617  010C                     	;# 
   618  010D                     	;# 
   619  010E                     	;# 
   620  010F                     	;# 
   621  0115                     	;# 
   622  0116                     	;# 
   623  0118                     	;# 
   624  0119                     	;# 
   625  011A                     	;# 
   626  011B                     	;# 
   627  011E                     	;# 
   628  011F                     	;# 
   629  018C                     	;# 
   630  018D                     	;# 
   631  019D                     	;# 
   632  019E                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  000A                     	;# 
   642  000B                     	;# 
   643  000C                     	;# 
   644  000D                     	;# 
   645  000E                     	;# 
   646  000E                     	;# 
   647  000F                     	;# 
   648  0010                     	;# 
   649  0011                     	;# 
   650  0012                     	;# 
   651  0013                     	;# 
   652  0014                     	;# 
   653  0015                     	;# 
   654  0015                     	;# 
   655  0016                     	;# 
   656  0017                     	;# 
   657  0018                     	;# 
   658  0019                     	;# 
   659  001A                     	;# 
   660  001C                     	;# 
   661  001D                     	;# 
   662  001E                     	;# 
   663  001F                     	;# 
   664  0081                     	;# 
   665  0085                     	;# 
   666  0086                     	;# 
   667  0087                     	;# 
   668  008C                     	;# 
   669  008D                     	;# 
   670  008E                     	;# 
   671  008F                     	;# 
   672  0090                     	;# 
   673  0092                     	;# 
   674  0093                     	;# 
   675  0093                     	;# 
   676  0093                     	;# 
   677  0094                     	;# 
   678  0095                     	;# 
   679  0095                     	;# 
   680  0096                     	;# 
   681  0096                     	;# 
   682  0097                     	;# 
   683  0098                     	;# 
   684  0099                     	;# 
   685  009A                     	;# 
   686  009B                     	;# 
   687  009E                     	;# 
   688  009F                     	;# 
   689  010C                     	;# 
   690  010C                     	;# 
   691  010D                     	;# 
   692  010E                     	;# 
   693  010F                     	;# 
   694  0115                     	;# 
   695  0116                     	;# 
   696  0118                     	;# 
   697  0119                     	;# 
   698  011A                     	;# 
   699  011B                     	;# 
   700  011E                     	;# 
   701  011F                     	;# 
   702  018C                     	;# 
   703  018D                     	;# 
   704  019D                     	;# 
   705  019E                     	;# 
   706  0000                     	;# 
   707  0001                     	;# 
   708  0002                     	;# 
   709  0003                     	;# 
   710  0004                     	;# 
   711  0005                     	;# 
   712  0006                     	;# 
   713  0007                     	;# 
   714  000A                     	;# 
   715  000B                     	;# 
   716  000C                     	;# 
   717  000D                     	;# 
   718  000E                     	;# 
   719  000E                     	;# 
   720  000F                     	;# 
   721  0010                     	;# 
   722  0011                     	;# 
   723  0012                     	;# 
   724  0013                     	;# 
   725  0014                     	;# 
   726  0015                     	;# 
   727  0015                     	;# 
   728  0016                     	;# 
   729  0017                     	;# 
   730  0018                     	;# 
   731  0019                     	;# 
   732  001A                     	;# 
   733  001C                     	;# 
   734  001D                     	;# 
   735  001E                     	;# 
   736  001F                     	;# 
   737  0081                     	;# 
   738  0085                     	;# 
   739  0086                     	;# 
   740  0087                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  008F                     	;# 
   745  0090                     	;# 
   746  0092                     	;# 
   747  0093                     	;# 
   748  0093                     	;# 
   749  0093                     	;# 
   750  0094                     	;# 
   751  0095                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0096                     	;# 
   755  0097                     	;# 
   756  0098                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009E                     	;# 
   761  009F                     	;# 
   762  010C                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  010F                     	;# 
   767  0115                     	;# 
   768  0116                     	;# 
   769  0118                     	;# 
   770  0119                     	;# 
   771  011A                     	;# 
   772  011B                     	;# 
   773  011E                     	;# 
   774  011F                     	;# 
   775  018C                     	;# 
   776  018D                     	;# 
   777  019D                     	;# 
   778  019E                     	;# 
   779  0000                     	;# 
   780  0001                     	;# 
   781  0002                     	;# 
   782  0003                     	;# 
   783  0004                     	;# 
   784  0005                     	;# 
   785  0006                     	;# 
   786  0007                     	;# 
   787  000A                     	;# 
   788  000B                     	;# 
   789  000C                     	;# 
   790  000D                     	;# 
   791  000E                     	;# 
   792  000E                     	;# 
   793  000F                     	;# 
   794  0010                     	;# 
   795  0011                     	;# 
   796  0012                     	;# 
   797  0013                     	;# 
   798  0014                     	;# 
   799  0015                     	;# 
   800  0015                     	;# 
   801  0016                     	;# 
   802  0017                     	;# 
   803  0018                     	;# 
   804  0019                     	;# 
   805  001A                     	;# 
   806  001C                     	;# 
   807  001D                     	;# 
   808  001E                     	;# 
   809  001F                     	;# 
   810  0081                     	;# 
   811  0085                     	;# 
   812  0086                     	;# 
   813  0087                     	;# 
   814  008C                     	;# 
   815  008D                     	;# 
   816  008E                     	;# 
   817  008F                     	;# 
   818  0090                     	;# 
   819  0092                     	;# 
   820  0093                     	;# 
   821  0093                     	;# 
   822  0093                     	;# 
   823  0094                     	;# 
   824  0095                     	;# 
   825  0095                     	;# 
   826  0096                     	;# 
   827  0096                     	;# 
   828  0097                     	;# 
   829  0098                     	;# 
   830  0099                     	;# 
   831  009A                     	;# 
   832  009B                     	;# 
   833  009E                     	;# 
   834  009F                     	;# 
   835  010C                     	;# 
   836  010C                     	;# 
   837  010D                     	;# 
   838  010E                     	;# 
   839  010F                     	;# 
   840  0115                     	;# 
   841  0116                     	;# 
   842  0118                     	;# 
   843  0119                     	;# 
   844  011A                     	;# 
   845  011B                     	;# 
   846  011E                     	;# 
   847  011F                     	;# 
   848  018C                     	;# 
   849  018D                     	;# 
   850  019D                     	;# 
   851  019E                     	;# 
   852  0000                     	;# 
   853  0001                     	;# 
   854  0002                     	;# 
   855  0003                     	;# 
   856  0004                     	;# 
   857  0005                     	;# 
   858  0006                     	;# 
   859  0007                     	;# 
   860  000A                     	;# 
   861  000B                     	;# 
   862  000C                     	;# 
   863  000D                     	;# 
   864  000E                     	;# 
   865  000E                     	;# 
   866  000F                     	;# 
   867  0010                     	;# 
   868  0011                     	;# 
   869  0012                     	;# 
   870  0013                     	;# 
   871  0014                     	;# 
   872  0015                     	;# 
   873  0015                     	;# 
   874  0016                     	;# 
   875  0017                     	;# 
   876  0018                     	;# 
   877  0019                     	;# 
   878  001A                     	;# 
   879  001C                     	;# 
   880  001D                     	;# 
   881  001E                     	;# 
   882  001F                     	;# 
   883  0081                     	;# 
   884  0085                     	;# 
   885  0086                     	;# 
   886  0087                     	;# 
   887  008C                     	;# 
   888  008D                     	;# 
   889  008E                     	;# 
   890  008F                     	;# 
   891  0090                     	;# 
   892  0092                     	;# 
   893  0093                     	;# 
   894  0093                     	;# 
   895  0093                     	;# 
   896  0094                     	;# 
   897  0095                     	;# 
   898  0095                     	;# 
   899  0096                     	;# 
   900  0096                     	;# 
   901  0097                     	;# 
   902  0098                     	;# 
   903  0099                     	;# 
   904  009A                     	;# 
   905  009B                     	;# 
   906  009E                     	;# 
   907  009F                     	;# 
   908  010C                     	;# 
   909  010C                     	;# 
   910  010D                     	;# 
   911  010E                     	;# 
   912  010F                     	;# 
   913  0115                     	;# 
   914  0116                     	;# 
   915  0118                     	;# 
   916  0119                     	;# 
   917  011A                     	;# 
   918  011B                     	;# 
   919  011E                     	;# 
   920  011F                     	;# 
   921  018C                     	;# 
   922  018D                     	;# 
   923  019D                     	;# 
   924  019E                     	;# 
   925  0000                     	;# 
   926  0001                     	;# 
   927  0002                     	;# 
   928  0003                     	;# 
   929  0004                     	;# 
   930  0005                     	;# 
   931  0006                     	;# 
   932  0007                     	;# 
   933  000A                     	;# 
   934  000B                     	;# 
   935  000C                     	;# 
   936  000D                     	;# 
   937  000E                     	;# 
   938  000E                     	;# 
   939  000F                     	;# 
   940  0010                     	;# 
   941  0011                     	;# 
   942  0012                     	;# 
   943  0013                     	;# 
   944  0014                     	;# 
   945  0015                     	;# 
   946  0015                     	;# 
   947  0016                     	;# 
   948  0017                     	;# 
   949  0018                     	;# 
   950  0019                     	;# 
   951  001A                     	;# 
   952  001C                     	;# 
   953  001D                     	;# 
   954  001E                     	;# 
   955  001F                     	;# 
   956  0081                     	;# 
   957  0085                     	;# 
   958  0086                     	;# 
   959  0087                     	;# 
   960  008C                     	;# 
   961  008D                     	;# 
   962  008E                     	;# 
   963  008F                     	;# 
   964  0090                     	;# 
   965  0092                     	;# 
   966  0093                     	;# 
   967  0093                     	;# 
   968  0093                     	;# 
   969  0094                     	;# 
   970  0095                     	;# 
   971  0095                     	;# 
   972  0096                     	;# 
   973  0096                     	;# 
   974  0097                     	;# 
   975  0098                     	;# 
   976  0099                     	;# 
   977  009A                     	;# 
   978  009B                     	;# 
   979  009E                     	;# 
   980  009F                     	;# 
   981  010C                     	;# 
   982  010C                     	;# 
   983  010D                     	;# 
   984  010E                     	;# 
   985  010F                     	;# 
   986  0115                     	;# 
   987  0116                     	;# 
   988  0118                     	;# 
   989  0119                     	;# 
   990  011A                     	;# 
   991  011B                     	;# 
   992  011E                     	;# 
   993  011F                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  019D                     	;# 
   997  019E                     	;# 
   998                           
   999 ;; Function _ES_PostAll is unused but had its address taken
  1000  0000                     
  1001                           	psect	idataBANK1
  1002  0D91                     __pidataBANK1:	
  1003                           
  1004                           ;initializer for _statusBuffer
  1005  0D91  34FF               	retlw	255
  1006  0D92  34FF               	retlw	255
  1007  0D93  34FF               	retlw	255
  1008  0D94  34FF               	retlw	255
  1009  0D95  34FF               	retlw	255
  1010  0D96  34FF               	retlw	255
  1011                           
  1012                           ;initializer for _responseBytes
  1013  0D97  34FF               	retlw	255
  1014  0D98  34FF               	retlw	255
  1015  0D99  34FF               	retlw	255
  1016                           
  1017                           	psect	strings
  1018  0800                     __pstrings:	
  1019  0800                     stringtab:	
  1020  0800                     __stringtab:	
  1021  0800                     stringcode:	
  1022                           ;	String table - string pointers are 1 byte each
  1023                           
  1024  0800                     stringdir:	
  1025  0800  3008               	movlw	high stringdir
  1026  0801  008A               	movwf	10
  1027  0802  0804               	movf	4,w
  1028  0803  0A84               	incf	4,f
  1029  0804  0782               	addwf	2,f
  1030  0805                     __stringbase:	
  1031  0805  3400               	retlw	0
  1032  0806                     __end_of__stringtab:	
  1033  0806                     _Nybble2MSBitNum:	
  1034  0806  3400               	retlw	0
  1035  0807  3401               	retlw	1
  1036  0808  3401               	retlw	1
  1037  0809  3402               	retlw	2
  1038  080A  3402               	retlw	2
  1039  080B  3402               	retlw	2
  1040  080C  3402               	retlw	2
  1041  080D  3403               	retlw	3
  1042  080E  3403               	retlw	3
  1043  080F  3403               	retlw	3
  1044  0810  3403               	retlw	3
  1045  0811  3403               	retlw	3
  1046  0812  3403               	retlw	3
  1047  0813  3403               	retlw	3
  1048  0814  3403               	retlw	3
  1049  0815                     __end_of_Nybble2MSBitNum:	
  1050  0815                     _EventQueues:	
  1051  0815  34CD               	retlw	low (_Queue0| 0)
  1052  0816  3400               	retlw	high (_Queue0| 0)
  1053  0817  3404               	retlw	4
  1054  0818  3434               	retlw	low (_Queue1| (0+256))
  1055  0819  3401               	retlw	high (_Queue1| (0+256))
  1056  081A  3404               	retlw	4
  1057  081B  3440               	retlw	low (_Queue2| (0+256))
  1058  081C  3401               	retlw	high (_Queue2| (0+256))
  1059  081D  3404               	retlw	4
  1060  081E  344C               	retlw	low (_Queue3| (0+256))
  1061  081F  3401               	retlw	high (_Queue3| (0+256))
  1062  0820  3404               	retlw	4
  1063  0821                     __end_of_EventQueues:	
  1064  0821                     _BitNum2SetMask:	
  1065  0821  3401               	retlw	1
  1066  0822  3402               	retlw	2
  1067  0823  3404               	retlw	4
  1068  0824  3408               	retlw	8
  1069  0825  3410               	retlw	16
  1070  0826  3420               	retlw	32
  1071  0827  3440               	retlw	64
  1072  0828  3480               	retlw	128
  1073  0829                     __end_of_BitNum2SetMask:	
  1074  0829                     _ServDescList:	
  1075  0829  3403               	retlw	low (fp__InitUARTRXService-fpbase)
  1076  082A  3417               	retlw	low (fp__RunUARTRXService-fpbase)
  1077  082B  3401               	retlw	low (fp__InitUARTTXService-fpbase)
  1078  082C  3415               	retlw	low (fp__RunUARTTXService-fpbase)
  1079  082D  3405               	retlw	low (fp__InitSPIService-fpbase)
  1080  082E  3419               	retlw	low (fp__RunSPIService-fpbase)
  1081  082F  3407               	retlw	low (fp__InitPACSystemService-fpbase)
  1082  0830  341B               	retlw	low (fp__RunPACSystemService-fpbase)
  1083  0831                     __end_of_ServDescList:	
  1084  0831                     _TMR_MaskArray:	
  1085  0831  3401               	retlw	1
  1086  0832  3402               	retlw	2
  1087  0833  3404               	retlw	4
  1088  0834  3408               	retlw	8
  1089  0835  3410               	retlw	16
  1090  0836  3420               	retlw	32
  1091  0837  3440               	retlw	64
  1092  0838  3480               	retlw	128
  1093  0839                     __end_of_TMR_MaskArray:	
  1094  0839                     _Timer2PostFunc:	
  1095  0839  3411               	retlw	low (fp__PostUARTRXService-fpbase)
  1096  083A  3413               	retlw	low (fp__PostUARTTXService-fpbase)
  1097  083B  340F               	retlw	low (fp__PostPACSystemService-fpbase)
  1098  083C  3400               	retlw	0
  1099  083D  3400               	retlw	0
  1100  083E  3400               	retlw	0
  1101  083F  3400               	retlw	0
  1102  0840  3400               	retlw	0
  1103  0841                     __end_of_Timer2PostFunc:	
  1104  0841                     _ES_EventList:	
  1105  0841  340B               	retlw	low (fp__CheckUARTRXEvent-fpbase)
  1106  0842  340D               	retlw	low (fp__CheckUARTTXEvent-fpbase)
  1107  0843  3409               	retlw	low (fp__CheckSPIEvent-fpbase)
  1108  0844                     __end_of_ES_EventList:	
  1109  0844                     _pPostKeyFunc:	
  1110  0844  3400               	retlw	0
  1111  0845                     __end_of_pPostKeyFunc:	
  1112  000B                     _INTCON	set	11
  1113  0007                     _PORTC	set	7
  1114  001A                     _RCREG	set	26
  1115  0013                     _SSPBUF	set	19
  1116  0014                     _SSPCON	set	20
  1117  0001                     _TMR0	set	1
  1118  0019                     _TXREG	set	25
  1119  00C4                     _CREN	set	196
  1120  005F                     _GIE	set	95
  1121  005E                     _PEIE	set	94
  1122  0038                     _RC0	set	56
  1123  003B                     _RC3	set	59
  1124  003F                     _RC7	set	63
  1125  0065                     _RCIF	set	101
  1126  00C7                     _SPEN	set	199
  1127  0063                     _SSPIF	set	99
  1128  005D                     _T0IE	set	93
  1129  005A                     _T0IF	set	90
  1130  0064                     _TXIF	set	100
  1131  008F                     _OSCCON	set	143
  1132  0099                     _SPBRG	set	153
  1133  009A                     _SPBRGH	set	154
  1134  0094                     _SSPSTAT	set	148
  1135  04A0                     _BF	set	1184
  1136  04DB                     _BRG16	set	1243
  1137  04C2                     _BRGH	set	1218
  1138  0408                     _PS0	set	1032
  1139  0409                     _PS1	set	1033
  1140  040A                     _PS2	set	1034
  1141  040B                     _PSA	set	1035
  1142  0465                     _RCIE	set	1125
  1143  0463                     _SSPIE	set	1123
  1144  04C4                     _SYNC	set	1220
  1145  040D                     _T0CS	set	1037
  1146  0434                     _TRISB4	set	1076
  1147  0436                     _TRISB6	set	1078
  1148  0438                     _TRISC0	set	1080
  1149  043B                     _TRISC3	set	1083
  1150  043E                     _TRISC6	set	1086
  1151  043F                     _TRISC7	set	1087
  1152  04C5                     _TXEN	set	1221
  1153  0464                     _TXIE	set	1124
  1154  08FB                     _ANS11	set	2299
  1155  08F4                     _ANS4	set	2292
  1156  08F7                     _ANS7	set	2295
  1157  08F9                     _ANS9	set	2297
  1158                           
  1159                           ; #config settings
  1160  0000                     
  1161                           	psect	cinit
  1162  0013                     start_initialization:	
  1163  0013                     __initialization:	
  1164                           
  1165                           ; Clear objects allocated to COMMON
  1166  0013  01FD               	clrf	__pbssCOMMON& (0+127)
  1167                           
  1168                           ; Clear objects allocated to BANK0
  1169  0014  1383               	bcf	3,7	;select IRP bank0
  1170  0015  3059               	movlw	low __pbssBANK0
  1171  0016  0084               	movwf	4
  1172  0017  3070               	movlw	low (__pbssBANK0+23)
  1173  0018  158A  2589  118A   	fcall	clear_ram0
  1174                           
  1175                           ; Clear objects allocated to BANK1
  1176  001B  30A0               	movlw	low __pbssBANK1
  1177  001C  0084               	movwf	4
  1178  001D  30E2               	movlw	low (__pbssBANK1+66)
  1179  001E  158A  2589  118A   	fcall	clear_ram0
  1180                           
  1181                           ; Clear objects allocated to BANK2
  1182  0021  1783               	bsf	3,7	;select IRP bank2
  1183  0022  3020               	movlw	low __pbssBANK2
  1184  0023  0084               	movwf	4
  1185  0024  3058               	movlw	low (__pbssBANK2+56)
  1186  0025  158A  2589  118A   	fcall	clear_ram0
  1187                           
  1188                           ; Initialize objects allocated to BANK1
  1189  0028  1383               	bcf	3,7	;select IRP bank0
  1190  0029  30EB               	movlw	low (__pdataBANK1+9)
  1191  002A  00FD               	movwf	btemp+-1
  1192  002B  300D               	movlw	high __pidataBANK1
  1193  002C  00FE               	movwf	btemp
  1194  002D  3091               	movlw	low __pidataBANK1
  1195  002E  00FF               	movwf	btemp+1
  1196  002F  30E2               	movlw	low __pdataBANK1
  1197  0030  0084               	movwf	4
  1198  0031  158A  25AB         	fcall	init_ram0
  1199  0033                     end_of_initialization:	
  1200                           ;End of C runtime variable initialization code
  1201                           
  1202  0033                     __end_of__initialization:	
  1203  0033  0183               	clrf	3
  1204  0034  158A  2E14         	ljmp	_main	;jump to C main() function
  1205                           
  1206                           	psect	bssCOMMON
  1207  007D                     __pbssCOMMON:	
  1208  007D                     UARTRXIntResponse@currentByteIndex:	
  1209  007D                     	ds	1
  1210                           
  1211                           	psect	bssBANK0
  1212  0059                     __pbssBANK0:	
  1213  0059                     ES_Timer_RTI_Resp@NeedsProcessing:	
  1214  0059                     	ds	1
  1215  005A                     ES_Timer_RTI_Resp@NextTimer2Process:	
  1216  005A                     	ds	1
  1217  005B                     PACSystemService@MyPriority:	
  1218  005B                     	ds	1
  1219  005C                     SPI_SM@MyPriority:	
  1220  005C                     	ds	1
  1221  005D                     UARTRXIntResponse@bodyByteCount:	
  1222  005D                     	ds	1
  1223  005E                     UART_TX_SM@MyPriority:	
  1224  005E                     	ds	1
  1225  005F                     UART_TX_SM@currentState:	
  1226  005F                     	ds	1
  1227  0060                     _MyPriority:	
  1228  0060                     	ds	1
  1229  0061                     _RXFlag:	
  1230  0061                     	ds	1
  1231  0062                     _Ready:	
  1232  0062                     	ds	1
  1233  0063                     _SPIBuffer:	
  1234  0063                     	ds	1
  1235  0064                     _TMR_ActiveFlags:	
  1236  0064                     	ds	1
  1237  0065                     _TickCount:	
  1238  0065                     	ds	1
  1239  0066                     _currentState:	
  1240  0066                     	ds	1
  1241  0067                     _index:	
  1242  0067                     	ds	1
  1243  0068                     _length:	
  1244  0068                     	ds	1
  1245  0069                     _newResponseAvailable:	
  1246  0069                     	ds	1
  1247  006A                     _readRXIndex:	
  1248  006A                     	ds	1
  1249  006B                     _readRespIndex:	
  1250  006B                     	ds	1
  1251  006C                     _readStatIndex:	
  1252  006C                     	ds	1
  1253  006D                     _writeRXIndex:	
  1254  006D                     	ds	1
  1255  006E                     _writeRespIndex:	
  1256  006E                     	ds	1
  1257  006F                     _writeStatIndex:	
  1258  006F                     	ds	1
  1259                           
  1260                           	psect	bssBANK1
  1261  00A0                     __pbssBANK1:	
  1262  00A0                     _TMR_TimerArray:	
  1263  00A0                     	ds	16
  1264  00B0                     _XBeePacket:	
  1265  00B0                     	ds	10
  1266  00BA                     ES_Timer_RTI_Resp@NewEvent:	
  1267  00BA                     	ds	3
  1268  00BD                     UART_TX_SM@superPACAddr:	
  1269  00BD                     	ds	2
  1270  00BF                     _superPACAddr:	
  1271  00BF                     	ds	2
  1272  00C1                     _time:	
  1273  00C1                     	ds	2
  1274  00C3                     SPI_SM@currentState:	
  1275  00C3                     	ds	1
  1276  00C4                     UARTRXIntResponse@checksum:	
  1277  00C4                     	ds	1
  1278  00C5                     _ByteCount:	
  1279  00C5                     	ds	1
  1280  00C6                     _TXError:	
  1281  00C6                     	ds	1
  1282  00C7                     _colorRequestData:	
  1283  00C7                     	ds	1
  1284  00C8                     _commOpen:	
  1285  00C8                     	ds	1
  1286  00C9                     _hasHeartbeat:	
  1287  00C9                     	ds	1
  1288  00CA                     _newRequest:	
  1289  00CA                     	ds	1
  1290  00CB                     _radioPing:	
  1291  00CB                     	ds	1
  1292  00CC                     _sendCompleteFlag:	
  1293  00CC                     	ds	1
  1294  00CD                     _Queue0:	
  1295  00CD                     	ds	12
  1296  00D9                     _responseBuffer:	
  1297  00D9                     	ds	6
  1298  00DF                     ES_Run@ThisEvent:	
  1299  00DF                     	ds	3
  1300                           
  1301                           	psect	dataBANK1
  1302  00E2                     __pdataBANK1:	
  1303  00E2                     _statusBuffer:	
  1304  00E2                     	ds	6
  1305  00E8                     _responseBytes:	
  1306  00E8                     	ds	3
  1307                           
  1308                           	psect	bssBANK2
  1309  0120                     __pbssBANK2:	
  1310  0120                     _RXBuffer:	
  1311  0120                     	ds	20
  1312  0134                     _Queue1:	
  1313  0134                     	ds	12
  1314  0140                     _Queue2:	
  1315  0140                     	ds	12
  1316  014C                     _Queue3:	
  1317  014C                     	ds	12
  1318                           
  1319                           	psect	clrtext
  1320  0D89                     clear_ram0:	
  1321                           ;	Called with FSR containing the base address, and
  1322                           ;	W with the last address+1
  1323                           
  1324  0D89  0064               	clrwdt	;clear the watchdog before getting into this loop
  1325  0D8A                     clrloop0:	
  1326  0D8A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1327  0D8B  0A84               	incf	4,f	;increment pointer
  1328  0D8C  0604               	xorwf	4,w	;XOR with final address
  1329  0D8D  1903               	btfsc	3,2	;have we reached the end yet?
  1330  0D8E  3400               	retlw	0	;all done for this memory range, return
  1331  0D8F  0604               	xorwf	4,w	;XOR again to restore value
  1332  0D90  2D8A               	goto	clrloop0	;do the next byte
  1333                           
  1334                           	psect	inittext
  1335  0DA7                     init_fetch0:	
  1336                           ;	Called with low address in FSR and high address in W
  1337                           
  1338  0DA7  087E               	movf	126,w
  1339  0DA8  008A               	movwf	10
  1340  0DA9  087F               	movf	127,w
  1341  0DAA  0082               	movwf	2
  1342  0DAB                     init_ram0:	
  1343                           ;Called with:
  1344                           ;	high address of idata address in btemp 
  1345                           ;	low address of idata address in btemp+1 
  1346                           ;	low address of data in FSR
  1347                           ;	high address + 1 of data in btemp-1
  1348                           
  1349  0DAB  25A7  158A         	fcall	init_fetch0
  1350  0DAD  0080               	movwf	0
  1351  0DAE  0A84               	incf	4,f
  1352  0DAF  0804               	movf	4,w
  1353  0DB0  067D               	xorwf	125,w
  1354  0DB1  1903               	btfsc	3,2
  1355  0DB2  3400               	retlw	0
  1356  0DB3  0AFF               	incf	127,f
  1357  0DB4  1903               	btfsc	3,2
  1358  0DB5  0AFE               	incf	126,f
  1359  0DB6  2DAB               	goto	init_ram0
  1360                           
  1361                           	psect	cstackBANK2
  1362  0158                     __pcstackBANK2:	
  1363  0158                     RunUARTRXService@ReturnEvent:	
  1364                           
  1365                           ; 3 bytes @ 0x0
  1366  0158                     	ds	3
  1367  015B                     RunUARTRXService@msgAddr:	
  1368                           
  1369                           ; 2 bytes @ 0x3
  1370  015B                     	ds	2
  1371  015D                     RunUARTRXService@addrEvent:	
  1372                           
  1373                           ; 3 bytes @ 0x5
  1374  015D                     	ds	3
  1375  0160                     RunUARTRXService@TXEvent:	
  1376                           
  1377                           ; 3 bytes @ 0x8
  1378  0160                     	ds	3
  1379  0163                     RunUARTRXService@i:	
  1380                           
  1381                           ; 1 bytes @ 0xB
  1382  0163                     	ds	1
  1383  0164                     RunUARTRXService@i_567:	
  1384                           
  1385                           ; 1 bytes @ 0xC
  1386  0164                     	ds	1
  1387                           
  1388                           	psect	cstackCOMMON
  1389  0070                     __pcstackCOMMON:	
  1390  0070                     ?_ES_Sys_Timer_Init:	
  1391  0070                     ?_SPIIntResponse:	
  1392                           ; 0 bytes @ 0x0
  1393                           
  1394  0070                     ?_UARTRXIntResponse:	
  1395                           ; 0 bytes @ 0x0
  1396                           
  1397  0070                     ?_UARTTXIntResponse:	
  1398                           ; 0 bytes @ 0x0
  1399                           
  1400  0070                     ??_UARTTXIntResponse:	
  1401                           ; 0 bytes @ 0x0
  1402                           
  1403  0070                     ?_toggleRXBuffer:	
  1404                           ; 0 bytes @ 0x0
  1405                           
  1406  0070                     ?_toggleStatBuffer:	
  1407                           ; 0 bytes @ 0x0
  1408                           
  1409  0070                     ?_toggleRespBuffer:	
  1410                           ; 0 bytes @ 0x0
  1411                           
  1412  0070                     ?_ISR:	
  1413                           ; 0 bytes @ 0x0
  1414                           
  1415  0070                     ?_USART_Init:	
  1416                           ; 0 bytes @ 0x0
  1417                           
  1418  0070                     ?_main:	
  1419                           ; 0 bytes @ 0x0
  1420                           
  1421  0070                     ??_RX_newResponseReady:	
  1422                           ; 0 bytes @ 0x0
  1423                           
  1424  0070                     ?_RX_clearResponseReady:	
  1425                           ; 0 bytes @ 0x0
  1426                           
  1427  0070                     ??_RX_clearResponseReady:	
  1428                           ; 0 bytes @ 0x0
  1429                           
  1430  0070                     ?i1_toggleRXBuffer:	
  1431                           ; 0 bytes @ 0x0
  1432                           
  1433  0070                     ??i1_toggleRXBuffer:	
  1434                           ; 0 bytes @ 0x0
  1435                           
  1436  0070                     ?_CheckUARTTXEvent:	
  1437                           ; 0 bytes @ 0x0
  1438                           
  1439  0070                     ?_ES_GetMSBitSet:	
  1440                           ; 1 bytes @ 0x0
  1441                           
  1442  0070                     ?_IsTimerPending:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445  0070                     ?_superPACAddrSet:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448  0070                     ?_TX_clearXBeePacket:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451  0070                     ?_TX_appendXBeePacket:	
  1452                           ; 1 bytes @ 0x0
  1453                           
  1454  0070                     ?_TX_getChecksum:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457  0070                     ?_RX_newResponseReady:	
  1458                           ; 1 bytes @ 0x0
  1459                           
  1460  0070                     ?_RX_getStatusBuffer:	
  1461                           ; 1 bytes @ 0x0
  1462                           
  1463  0070                     ?_RX_getResponseBuffer:	
  1464                           ; 1 bytes @ 0x0
  1465                           
  1466  0070                     ?i1___bmul:	
  1467                           ; 1 bytes @ 0x0
  1468                           
  1469  0070                     i1___bmul@multiplicand:	
  1470                           ; 1 bytes @ 0x0
  1471                           
  1472                           
  1473                           ; 1 bytes @ 0x0
  1474  0070                     	ds	1
  1475  0071                     ??i1___bmul:	
  1476                           
  1477                           ; 0 bytes @ 0x1
  1478  0071                     	ds	1
  1479  0072                     i1___bmul@multiplier:	
  1480                           
  1481                           ; 1 bytes @ 0x2
  1482  0072                     	ds	1
  1483  0073                     i1___bmul@product:	
  1484                           
  1485                           ; 1 bytes @ 0x3
  1486  0073                     	ds	1
  1487  0074                     ??_UARTRXIntResponse:	
  1488  0074                     ??_RX_getStatusBuffer:	
  1489                           ; 0 bytes @ 0x4
  1490                           
  1491  0074                     ??_RX_getResponseBuffer:	
  1492                           ; 0 bytes @ 0x4
  1493                           
  1494                           
  1495                           ; 0 bytes @ 0x4
  1496  0074                     	ds	1
  1497  0075                     ??_SPIIntResponse:	
  1498                           
  1499                           ; 0 bytes @ 0x5
  1500  0075                     	ds	1
  1501  0076                     SPIIntResponse@readByte:	
  1502                           
  1503                           ; 1 bytes @ 0x6
  1504  0076                     	ds	1
  1505  0077                     UARTRXIntResponse@newByte:	
  1506                           
  1507                           ; 1 bytes @ 0x7
  1508  0077                     	ds	1
  1509  0078                     ??_ISR:	
  1510                           
  1511                           ; 0 bytes @ 0x8
  1512  0078                     	ds	5
  1513                           
  1514                           	psect	cstackBANK0
  1515  0020                     __pcstackBANK0:	
  1516  0020                     ??_ES_Sys_Timer_Init:	
  1517  0020                     ??_ES_GetMSBitSet:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0020                     ??_IsTimerPending:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0020                     ??_toggleRXBuffer:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0020                     ??_toggleStatBuffer:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0020                     ??_toggleRespBuffer:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0020                     ??_superPACAddrSet:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0020                     ??_TX_clearXBeePacket:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0020                     ??_TX_appendXBeePacket:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0020                     ??_TX_getChecksum:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0020                     ??_USART_Init:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0020                     ?_ES_Timer_InitTimer:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0020                     ?___bmul:	
  1551                           ; 1 bytes @ 0x0
  1552                           
  1553  0020                     ___bmul@multiplicand:	
  1554                           ; 1 bytes @ 0x0
  1555                           
  1556  0020                     ES_Timer_InitTimer@NewTime:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559                           
  1560                           ; 2 bytes @ 0x0
  1561  0020                     	ds	1
  1562  0021                     ??___bmul:	
  1563  0021                     TX_appendXBeePacket@newByte:	
  1564                           ; 0 bytes @ 0x1
  1565                           
  1566  0021                     TX_getChecksum@chk:	
  1567                           ; 1 bytes @ 0x1
  1568                           
  1569                           
  1570                           ; 1 bytes @ 0x1
  1571  0021                     	ds	1
  1572  0022                     ??_ES_Timer_InitTimer:	
  1573  0022                     TX_getChecksum@i:	
  1574                           ; 0 bytes @ 0x2
  1575                           
  1576  0022                     ___bmul@product:	
  1577                           ; 1 bytes @ 0x2
  1578                           
  1579                           
  1580                           ; 1 bytes @ 0x2
  1581  0022                     	ds	1
  1582  0023                     ES_GetMSBitSet@Val2Check:	
  1583  0023                     ES_Timer_InitTimer@Num:	
  1584                           ; 1 bytes @ 0x3
  1585                           
  1586  0023                     ___bmul@multiplier:	
  1587                           ; 1 bytes @ 0x3
  1588                           
  1589                           
  1590                           ; 1 bytes @ 0x3
  1591  0023                     	ds	1
  1592  0024                     ?_ES_InitQueue:	
  1593  0024                     ?_ES_DeQueue:	
  1594                           ; 1 bytes @ 0x4
  1595                           
  1596  0024                     ?_ES_EnQueueFIFO:	
  1597                           ; 1 bytes @ 0x4
  1598                           
  1599  0024                     ES_GetMSBitSet@ReturnVal:	
  1600                           ; 1 bytes @ 0x4
  1601                           
  1602  0024                     ES_InitQueue@pBlock:	
  1603                           ; 1 bytes @ 0x4
  1604                           
  1605  0024                     ES_EnQueueFIFO@pBlock:	
  1606                           ; 2 bytes @ 0x4
  1607                           
  1608  0024                     ES_DeQueue@pBlock:	
  1609                           ; 2 bytes @ 0x4
  1610                           
  1611  0024                     _superPACAddrSet$696:	
  1612                           ; 2 bytes @ 0x4
  1613                           
  1614                           
  1615                           ; 2 bytes @ 0x4
  1616  0024                     	ds	1
  1617  0025                     ES_GetMSBitSet@Nybble2Test:	
  1618                           
  1619                           ; 1 bytes @ 0x5
  1620  0025                     	ds	1
  1621  0026                     ES_GetMSBitSet@LoopCntr:	
  1622  0026                     ES_InitQueue@BlockSize:	
  1623                           ; 1 bytes @ 0x6
  1624                           
  1625  0026                     ES_DeQueue@pReturnEvent:	
  1626                           ; 1 bytes @ 0x6
  1627                           
  1628  0026                     ES_EnQueueFIFO@Event2Add:	
  1629                           ; 1 bytes @ 0x6
  1630                           
  1631                           
  1632                           ; 3 bytes @ 0x6
  1633  0026                     	ds	1
  1634  0027                     ??_ES_InitQueue:	
  1635  0027                     ??_ES_DeQueue:	
  1636                           ; 0 bytes @ 0x7
  1637                           
  1638                           
  1639                           ; 0 bytes @ 0x7
  1640  0027                     	ds	2
  1641  0029                     ??_ES_EnQueueFIFO:	
  1642  0029                     ES_InitQueue@pThisQueue:	
  1643                           ; 0 bytes @ 0x9
  1644                           
  1645                           
  1646                           ; 2 bytes @ 0x9
  1647  0029                     	ds	6
  1648  002F                     ES_EnQueueFIFO@saveCrit:	
  1649                           
  1650                           ; 1 bytes @ 0xF
  1651  002F                     	ds	1
  1652  0030                     ES_EnQueueFIFO@InsertionPoint:	
  1653                           
  1654                           ; 1 bytes @ 0x10
  1655  0030                     	ds	1
  1656  0031                     ES_DeQueue@saveCrit:	
  1657  0031                     ES_EnQueueFIFO@pThisQueue:	
  1658                           ; 1 bytes @ 0x11
  1659                           
  1660                           
  1661                           ; 2 bytes @ 0x11
  1662  0031                     	ds	1
  1663  0032                     ES_DeQueue@NumLeft:	
  1664                           
  1665                           ; 1 bytes @ 0x12
  1666  0032                     	ds	1
  1667  0033                     ?_ES_PostToService:	
  1668  0033                     ES_DeQueue@pThisQueue:	
  1669                           ; 1 bytes @ 0x13
  1670                           
  1671  0033                     ES_PostToService@TheEvent:	
  1672                           ; 2 bytes @ 0x13
  1673                           
  1674                           
  1675                           ; 3 bytes @ 0x13
  1676  0033                     	ds	3
  1677  0036                     ??_ES_PostToService:	
  1678                           
  1679                           ; 0 bytes @ 0x16
  1680  0036                     	ds	3
  1681  0039                     _ES_PostToService$1340:	
  1682                           
  1683                           ; 2 bytes @ 0x19
  1684  0039                     	ds	2
  1685  003B                     ES_PostToService@WhichService:	
  1686                           
  1687                           ; 1 bytes @ 0x1B
  1688  003B                     	ds	1
  1689  003C                     ??_CheckUARTTXEvent:	
  1690  003C                     ?_InitUARTRXService:	
  1691                           ; 0 bytes @ 0x1C
  1692                           
  1693  003C                     ?_InitUARTTXService:	
  1694                           ; 1 bytes @ 0x1C
  1695                           
  1696  003C                     ?_InitSPIService:	
  1697                           ; 1 bytes @ 0x1C
  1698                           
  1699  003C                     ?_InitPACSystemService:	
  1700                           ; 1 bytes @ 0x1C
  1701                           
  1702  003C                     ?_PostUARTRXService:	
  1703                           ; 1 bytes @ 0x1C
  1704                           
  1705  003C                     ?_PostUARTTXService:	
  1706                           ; 1 bytes @ 0x1C
  1707                           
  1708  003C                     ?_PostPACSystemService:	
  1709                           ; 1 bytes @ 0x1C
  1710                           
  1711  003C                     InitUARTRXService@Priority:	
  1712                           ; 1 bytes @ 0x1C
  1713                           
  1714  003C                     InitUARTTXService@Priority:	
  1715                           ; 1 bytes @ 0x1C
  1716                           
  1717  003C                     InitPACSystemService@Priority:	
  1718                           ; 1 bytes @ 0x1C
  1719                           
  1720  003C                     InitSPIService@Priority:	
  1721                           ; 1 bytes @ 0x1C
  1722                           
  1723  003C                     PostUARTRXService@ThisEvent:	
  1724                           ; 1 bytes @ 0x1C
  1725                           
  1726  003C                     PostUARTTXService@ThisEvent:	
  1727                           ; 3 bytes @ 0x1C
  1728                           
  1729  003C                     PostPACSystemService@ThisEvent:	
  1730                           ; 3 bytes @ 0x1C
  1731                           
  1732                           
  1733                           ; 3 bytes @ 0x1C
  1734  003C                     	ds	1
  1735  003D                     ??_InitUARTRXService:	
  1736  003D                     ??_InitUARTTXService:	
  1737                           ; 0 bytes @ 0x1D
  1738                           
  1739  003D                     ??_InitSPIService:	
  1740                           ; 0 bytes @ 0x1D
  1741                           
  1742  003D                     ??_InitPACSystemService:	
  1743                           ; 0 bytes @ 0x1D
  1744                           
  1745  003D                     CheckUARTTXEvent@TXEvent:	
  1746                           ; 0 bytes @ 0x1D
  1747                           
  1748                           
  1749                           ; 3 bytes @ 0x1D
  1750  003D                     	ds	1
  1751  003E                     InitUARTRXService@ThisEvent:	
  1752  003E                     InitUARTTXService@ThisEvent:	
  1753                           ; 3 bytes @ 0x1E
  1754                           
  1755  003E                     InitPACSystemService@ThisEvent:	
  1756                           ; 3 bytes @ 0x1E
  1757                           
  1758  003E                     InitSPIService@ThisEvent:	
  1759                           ; 3 bytes @ 0x1E
  1760                           
  1761                           
  1762                           ; 3 bytes @ 0x1E
  1763  003E                     	ds	1
  1764  003F                     ?_ES_Timer_RTI_Resp:	
  1765  003F                     ??_PostUARTRXService:	
  1766                           ; 0 bytes @ 0x1F
  1767                           
  1768  003F                     ??_PostUARTTXService:	
  1769                           ; 0 bytes @ 0x1F
  1770                           
  1771  003F                     ??_PostPACSystemService:	
  1772                           ; 0 bytes @ 0x1F
  1773                           
  1774  003F                     ?_retrySend:	
  1775                           ; 0 bytes @ 0x1F
  1776                           
  1777  003F                     ?_CheckUARTRXEvent:	
  1778                           ; 0 bytes @ 0x1F
  1779                           
  1780  003F                     ?_CheckSPIEvent:	
  1781                           ; 1 bytes @ 0x1F
  1782                           
  1783                           
  1784                           ; 1 bytes @ 0x1F
  1785  003F                     	ds	1
  1786  0040                     ??_ES_Timer_RTI_Resp:	
  1787  0040                     ??_retrySend:	
  1788                           ; 0 bytes @ 0x20
  1789                           
  1790                           
  1791                           ; 0 bytes @ 0x20
  1792  0040                     	ds	1
  1793  0041                     ??_CheckUARTRXEvent:	
  1794  0041                     ??_CheckSPIEvent:	
  1795                           ; 0 bytes @ 0x21
  1796                           
  1797  0041                     ?_ES_Initialize:	
  1798                           ; 0 bytes @ 0x21
  1799                           
  1800  0041                     ES_Initialize@NewRate:	
  1801                           ; 1 bytes @ 0x21
  1802                           
  1803  0041                     retrySend@LEDEvent:	
  1804                           ; 1 bytes @ 0x21
  1805                           
  1806                           
  1807                           ; 3 bytes @ 0x21
  1808  0041                     	ds	1
  1809  0042                     CheckUARTRXEvent@CommEvent:	
  1810                           
  1811                           ; 3 bytes @ 0x22
  1812  0042                     	ds	1
  1813  0043                     ??_ES_Initialize:	
  1814  0043                     CheckSPIEvent@SPIEvent:	
  1815                           ; 0 bytes @ 0x23
  1816                           
  1817                           
  1818                           ; 3 bytes @ 0x23
  1819  0043                     	ds	1
  1820  0044                     ?_RunUARTRXService:	
  1821  0044                     ?_RunUARTTXService:	
  1822                           ; 3 bytes @ 0x24
  1823                           
  1824  0044                     ?_RunSPIService:	
  1825                           ; 3 bytes @ 0x24
  1826                           
  1827  0044                     ?_RunPACSystemService:	
  1828                           ; 3 bytes @ 0x24
  1829                           
  1830  0044                     RunUARTRXService@ThisEvent:	
  1831                           ; 3 bytes @ 0x24
  1832                           
  1833  0044                     RunUARTTXService@ThisEvent:	
  1834                           ; 3 bytes @ 0x24
  1835                           
  1836  0044                     RunPACSystemService@ThisEvent:	
  1837                           ; 3 bytes @ 0x24
  1838                           
  1839  0044                     RunSPIService@ThisEvent:	
  1840                           ; 3 bytes @ 0x24
  1841                           
  1842                           
  1843                           ; 3 bytes @ 0x24
  1844  0044                     	ds	2
  1845  0046                     ?_ES_CheckUserEvents:	
  1846                           
  1847                           ; 1 bytes @ 0x26
  1848  0046                     	ds	1
  1849  0047                     ??_ES_CheckUserEvents:	
  1850                           
  1851                           ; 0 bytes @ 0x27
  1852  0047                     	ds	1
  1853  0048                     ??_RunUARTRXService:	
  1854  0048                     ??_RunUARTTXService:	
  1855                           ; 0 bytes @ 0x28
  1856                           
  1857  0048                     ??_RunSPIService:	
  1858                           ; 0 bytes @ 0x28
  1859                           
  1860  0048                     ??_RunPACSystemService:	
  1861                           ; 0 bytes @ 0x28
  1862                           
  1863  0048                     ES_Initialize@i:	
  1864                           ; 0 bytes @ 0x28
  1865                           
  1866  0048                     RunSPIService@ReturnEvent:	
  1867                           ; 1 bytes @ 0x28
  1868                           
  1869                           
  1870                           ; 3 bytes @ 0x28
  1871  0048                     	ds	1
  1872  0049                     RunUARTTXService@ReturnEvent:	
  1873  0049                     RunPACSystemService@ReturnEvent:	
  1874                           ; 3 bytes @ 0x29
  1875                           
  1876                           
  1877                           ; 3 bytes @ 0x29
  1878  0049                     	ds	6
  1879  004F                     ?_ES_Run:	
  1880                           
  1881                           ; 1 bytes @ 0x2F
  1882  004F                     	ds	2
  1883  0051                     ??_ES_Run:	
  1884                           
  1885                           ; 0 bytes @ 0x31
  1886  0051                     	ds	3
  1887  0054                     _ES_Run$1334:	
  1888                           
  1889                           ; 2 bytes @ 0x34
  1890  0054                     	ds	2
  1891  0056                     ES_Run@HighestPrior:	
  1892                           
  1893                           ; 1 bytes @ 0x36
  1894  0056                     	ds	1
  1895  0057                     ??_main:	
  1896                           
  1897                           ; 0 bytes @ 0x37
  1898  0057                     	ds	1
  1899  0058                     main@ErrorType:	
  1900                           
  1901                           ; 1 bytes @ 0x38
  1902  0058                     	ds	1
  1903                           
  1904                           	psect	maintext
  1905  0E14                     __pmaintext:	
  1906 ;;
  1907 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1908 ;;
  1909 ;; *************** function _main *****************
  1910 ;; Defined at:
  1911 ;;		line 21 in file "main.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;		None
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;  ErrorType       1   56[BANK0 ] enum E1641
  1916 ;; Return value:  Size  Location     Type
  1917 ;;		None               void
  1918 ;; Registers used:
  1919 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1920 ;; Tracked objects:
  1921 ;;		On entry : B00/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1925 ;;      Params:         0       0       0       0
  1926 ;;      Locals:         0       1       0       0
  1927 ;;      Temps:          0       1       0       0
  1928 ;;      Totals:         0       2       0       0
  1929 ;;Total ram usage:        2 bytes
  1930 ;; Hardware stack levels required when called:    8
  1931 ;; This function calls:
  1932 ;;		_ES_Initialize
  1933 ;;		_ES_Run
  1934 ;;		_USART_Init
  1935 ;; This function is called by:
  1936 ;;		Startup code after reset
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           
  1941                           ;psect for function _main
  1942  0E14                     _main:	
  1943                           
  1944                           ;main.c: 22: ES_Return_t ErrorType;
  1945                           ;main.c: 28: OSCCON = 0b01110000;
  1946                           
  1947                           ;incstack = 0
  1948                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1949  0E14  3070               	movlw	112
  1950  0E15  1683               	bsf	3,5	;RP0=1, select bank1
  1951  0E16  1303               	bcf	3,6	;RP1=0, select bank1
  1952  0E17  008F               	movwf	15	;volatile
  1953                           
  1954                           ;main.c: 30: USART_Init();
  1955  0E18  158A  25CE         	fcall	_USART_Init
  1956                           
  1957                           ;main.c: 33: TRISC3 = 0;
  1958  0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  1959  0E1B  1303               	bcf	3,6	;RP1=0, select bank1
  1960  0E1C  1187               	bcf	7,3	;volatile
  1961                           
  1962                           ;main.c: 34: ANS7 = 0;
  1963  0E1D  1283               	bcf	3,5	;RP0=0, select bank2
  1964  0E1E  1703               	bsf	3,6	;RP1=1, select bank2
  1965  0E1F  139E               	bcf	30,7	;volatile
  1966                           
  1967                           ;main.c: 35: RC3 = 0;
  1968  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  1969  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  1970  0E22  1187               	bcf	7,3	;volatile
  1971  0E23  3002               	movlw	low u3027jt
  1972                           
  1973                           ;main.c: 38: ErrorType = ES_Initialize(ES_Timer_RATE_1MS);
  1974  0E24  01C1               	clrf	ES_Initialize@NewRate
  1975  0E25  0AC1               	incf	ES_Initialize@NewRate,f
  1976  0E26  118A  299B         	ljmp	_ES_Initialize
  1977  0E28                     u3027jf:	
  1978  0E28  1283               	bcf	3,5	;RP0=0, select bank0
  1979  0E29  1303               	bcf	3,6	;RP1=0, select bank0
  1980  0E2A  0841               	movf	?_ES_Initialize,w
  1981  0E2B  00D7               	movwf	??_main
  1982  0E2C  00D8               	movwf	main@ErrorType
  1983                           
  1984                           ;main.c: 41: if (ErrorType == Success) {
  1985  0E2D  0858               	movf	main@ErrorType,w
  1986  0E2E  1D03               	btfss	3,2
  1987  0E2F  2E38               	goto	l3935
  1988  0E30  304B               	movlw	low u3047jt
  1989  0E31  118A  2922         	ljmp	_ES_Run
  1990  0E33                     u3047jf:	
  1991  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  1992  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  1993  0E35  084F               	movf	?_ES_Run,w
  1994  0E36  00D7               	movwf	??_main
  1995  0E37  00D8               	movwf	main@ErrorType
  1996  0E38                     l3935:	
  1997                           ;main.c: 57: }
  1998                           
  1999                           ;main.c: 56: break;
  2000                           
  2001                           ;main.c: 54: default:
  2002                           
  2003                           ;main.c: 53: break;
  2004                           
  2005                           ;main.c: 51: case FailedInit:
  2006                           
  2007                           ;main.c: 50: break;
  2008                           
  2009                           ;main.c: 48: case FailedPointer:
  2010                           
  2011                           ;main.c: 45: }
  2012                           ;main.c: 47: switch (ErrorType) {
  2013                           
  2014  0E38  0858               	movf	main@ErrorType,w
  2015                           
  2016                           ; Switch size 1, requested type "space"
  2017                           ; Number of cases is 2, Range of values is 3 to 5
  2018                           ; switch strategies available:
  2019                           ; Name         Instructions Cycles
  2020                           ; simple_byte            7     4 (average)
  2021                           ; direct_byte           16    10 (fixed)
  2022                           ; jumptable            263     9 (fixed)
  2023                           ;	Chosen strategy is simple_byte
  2024  0E39  3A03               	xorlw	3	; case 3
  2025  0E3A  1903               	skipnz
  2026  0E3B  2E40               	goto	l347
  2027  0E3C  3A06               	xorlw	6	; case 5
  2028  0E3D  1903               	skipnz
  2029  0E3E  2E40               	goto	l347
  2030  0E3F  2E40               	goto	l347
  2031  0E40                     l347:	
  2032                           ;main.c: 58: for (;;)
  2033                           
  2034                           
  2035                           ;main.c: 59: ;
  2036  0E40  2E40               	goto	l347
  2037  0E41                     __end_of_main:	
  2038                           
  2039                           	psect	jmp_tab__ES_Initialize
  2040  0002                     __pjmp_tab__ES_Initialize:	
  2041  0002                     u3027jt:	
  2042  0002  158A  2E28         	ljmp	u3027jf
  2043                           
  2044                           	psect	jmp_tab__ES_Run
  2045  084B                     __pjmp_tab__ES_Run:	
  2046                           ;main.c: 43: ErrorType = ES_Run();
  2047                           
  2048  084B                     u3047jt:	
  2049  084B  158A  2E33         	ljmp	u3047jf
  2050                           
  2051                           	psect	text1
  2052  0DCE                     __ptext1:	
  2053 ;; *************** function _USART_Init *****************
  2054 ;; Defined at:
  2055 ;;		line 11 in file "sci.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;		None               void
  2062 ;; Registers used:
  2063 ;;		wreg, status,2
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2069 ;;      Params:         0       0       0       0
  2070 ;;      Locals:         0       0       0       0
  2071 ;;      Temps:          0       0       0       0
  2072 ;;      Totals:         0       0       0       0
  2073 ;;Total ram usage:        0 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    4
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_main
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           
  2084                           ;psect for function _USART_Init
  2085  0DCE                     _USART_Init:	
  2086                           
  2087                           ;sci.c: 13: GIE = 0;
  2088                           
  2089                           ;incstack = 0
  2090                           ; Regs used in _USART_Init: [wreg+status,2]
  2091  0DCE  138B               	bcf	11,7	;volatile
  2092                           
  2093                           ;sci.c: 16: SPBRG = 129;
  2094  0DCF  3081               	movlw	129
  2095  0DD0  1683               	bsf	3,5	;RP0=1, select bank1
  2096  0DD1  1303               	bcf	3,6	;RP1=0, select bank1
  2097  0DD2  0099               	movwf	25	;volatile
  2098                           
  2099                           ;sci.c: 17: SPBRGH = 0;
  2100  0DD3  019A               	clrf	26	;volatile
  2101                           
  2102                           ;sci.c: 18: BRGH = 1;
  2103  0DD4  1518               	bsf	24,2	;volatile
  2104                           
  2105                           ;sci.c: 19: BRG16 = 0;
  2106  0DD5  119B               	bcf	27,3	;volatile
  2107                           
  2108                           ;sci.c: 22: SYNC = 0;
  2109  0DD6  1218               	bcf	24,4	;volatile
  2110                           
  2111                           ;sci.c: 23: SPEN = 1;
  2112  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
  2113  0DD8  1303               	bcf	3,6	;RP1=0, select bank0
  2114  0DD9  1798               	bsf	24,7	;volatile
  2115                           
  2116                           ;sci.c: 26: TXIE = 0;
  2117  0DDA  1683               	bsf	3,5	;RP0=1, select bank1
  2118  0DDB  1303               	bcf	3,6	;RP1=0, select bank1
  2119  0DDC  120C               	bcf	12,4	;volatile
  2120                           
  2121                           ;sci.c: 27: RCIE = 0;
  2122  0DDD  128C               	bcf	12,5	;volatile
  2123                           
  2124                           ;sci.c: 28: PEIE = 0;
  2125  0DDE  130B               	bcf	11,6	;volatile
  2126                           
  2127                           ;sci.c: 31: TXEN = 1;
  2128  0DDF  1698               	bsf	24,5	;volatile
  2129                           
  2130                           ;sci.c: 34: CREN = 1;
  2131  0DE0  1283               	bcf	3,5	;RP0=0, select bank0
  2132  0DE1  1303               	bcf	3,6	;RP1=0, select bank0
  2133  0DE2  1618               	bsf	24,4	;volatile
  2134                           
  2135                           ;sci.c: 35: ANS11 = 0;
  2136  0DE3  1283               	bcf	3,5	;RP0=0, select bank2
  2137  0DE4  1703               	bsf	3,6	;RP1=1, select bank2
  2138  0DE5  119F               	bcf	31,3	;volatile
  2139                           
  2140                           ;sci.c: 38: GIE = 1;
  2141  0DE6  178B               	bsf	11,7	;volatile
  2142  0DE7  0008               	return
  2143  0DE8                     __end_of_USART_Init:	
  2144                           
  2145                           	psect	text2
  2146  0122                     __ptext2:	
  2147 ;; *************** function _ES_Run *****************
  2148 ;; Defined at:
  2149 ;;		line 224 in file "ES_Framework.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;		None
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  HighestPrior    1   54[BANK0 ] unsigned char 
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  1   47[BANK0 ] enum E1594
  2156 ;; Registers used:
  2157 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2163 ;;      Params:         0       2       0       0
  2164 ;;      Locals:         0       3       0       0
  2165 ;;      Temps:          0       3       0       0
  2166 ;;      Totals:         0       8       0       0
  2167 ;;Total ram usage:        8 bytes
  2168 ;; Hardware stack levels required when called:    8
  2169 ;; This function calls:
  2170 ;;		_ES_CheckUserEvents
  2171 ;;		_ES_DeQueue
  2172 ;;		_ES_GetMSBitSet
  2173 ;;		_ES_Timer_RTI_Resp
  2174 ;;		_IsTimerPending
  2175 ;;		_RunPACSystemService
  2176 ;;		_RunSPIService
  2177 ;;		_RunUARTRXService
  2178 ;;		_RunUARTTXService
  2179 ;;		___bmul
  2180 ;; This function is called by:
  2181 ;;		_main
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185                           
  2186                           ;psect for function _ES_Run
  2187  0122                     _ES_Run:	
  2188                           
  2189                           ;incstack = 0
  2190 ;; using string table level
  2191                           ; Regs used in _ES_Run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2192  0122  1283               	bcf	3,5	;RP0=0, select bank0
  2193  0123  1303               	bcf	3,6	;RP1=0, select bank0
  2194  0124  00D0               	movwf	(?_ES_Run+1)^0
  2195  0125                     l3747:	
  2196                           ;ES_Framework.c: 233: while (Ready != 0) {
  2197                           
  2198                           ;ES_Framework.c: 226: uint8_t HighestPrior;
  2199                           ;ES_Framework.c: 227: static ES_Event ThisEvent;
  2200                           ;ES_Framework.c: 229: while (1) {
  2201                           
  2202  0125  1283               	bcf	3,5	;RP0=0, select bank0
  2203  0126  1303               	bcf	3,6	;RP1=0, select bank0
  2204  0127  0862               	movf	_Ready,w
  2205  0128  1903               	btfsc	3,2
  2206  0129  298C               	goto	l3751
  2207                           
  2208                           ;ES_Framework.c: 234: HighestPrior = ES_GetMSBitSet(Ready);
  2209  012A  1283               	bcf	3,5	;RP0=0, select bank0
  2210  012B  1303               	bcf	3,6	;RP1=0, select bank0
  2211  012C  0862               	movf	_Ready,w
  2212  012D  118A  20AC  118A   	fcall	_ES_GetMSBitSet
  2213  0130  1283               	bcf	3,5	;RP0=0, select bank0
  2214  0131  1303               	bcf	3,6	;RP1=0, select bank0
  2215  0132  00D1               	movwf	??_ES_Run
  2216  0133  00D6               	movwf	ES_Run@HighestPrior
  2217                           
  2218                           ;ES_Framework.c: 235: if (ES_DeQueue(EventQueues[HighestPrior].pMem, &ThisEvent) == 0) {
  2219  0134  3003               	movlw	3
  2220  0135  00D1               	movwf	??_ES_Run
  2221  0136  00A0               	movwf	___bmul@multiplicand
  2222  0137  0856               	movf	ES_Run@HighestPrior,w
  2223  0138  23C0               	fcall	___bmul
  2224  0139  3E10               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  2225  013A  0084               	movwf	4
  2226  013B  158A  2000  118A   	fcall	stringdir
  2227  013E  1283               	bcf	3,5	;RP0=0, select bank0
  2228  013F  1303               	bcf	3,6	;RP1=0, select bank0
  2229  0140  00D2               	movwf	??_ES_Run+1
  2230  0141  158A  2000  118A   	fcall	stringdir
  2231  0144  00D3               	movwf	??_ES_Run+2
  2232  0145  0852               	movf	??_ES_Run+1,w
  2233  0146  00D4               	movwf	_ES_Run$1334
  2234  0147  0853               	movf	??_ES_Run+2,w
  2235  0148  00D5               	movwf	_ES_Run$1334+1
  2236                           
  2237                           ;ES_Framework.c: 235: if (ES_DeQueue(EventQueues[HighestPrior].pMem, &ThisEvent) == 0) {
  2238  0149  0854               	movf	_ES_Run$1334,w
  2239  014A  00A4               	movwf	ES_DeQueue@pBlock
  2240  014B  0855               	movf	_ES_Run$1334+1,w
  2241  014C  00A5               	movwf	ES_DeQueue@pBlock+1
  2242  014D  30DF               	movlw	(low (ES_Run@ThisEvent| 0))& (0+255)
  2243  014E  00D1               	movwf	??_ES_Run
  2244  014F  00A6               	movwf	ES_DeQueue@pReturnEvent
  2245  0150  158A  2759  118A   	fcall	_ES_DeQueue
  2246  0153  3A00               	xorlw	0
  2247  0154  1D03               	skipz
  2248  0155  2961               	goto	l3741
  2249                           
  2250                           ;ES_Framework.c: 236: Ready &= ~BitNum2SetMask[HighestPrior];
  2251  0156  1283               	bcf	3,5	;RP0=0, select bank0
  2252  0157  1303               	bcf	3,6	;RP1=0, select bank0
  2253  0158  0856               	movf	ES_Run@HighestPrior,w
  2254  0159  3E1C               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  2255  015A  0084               	movwf	4
  2256  015B  158A  2000  118A   	fcall	stringdir
  2257  015E  3AFF               	xorlw	255
  2258  015F  00D1               	movwf	??_ES_Run
  2259  0160  05E2               	andwf	_Ready,f
  2260  0161                     l3741:	
  2261                           
  2262                           ;ES_Framework.c: 237: }
  2263                           ;ES_Framework.c: 238: if (ServDescList[HighestPrior].RunFunc(ThisEvent).EventType !=
  2264                           ;ES_Framework.c: 239: ES_NO_EVENT) {
  2265  0161  1683               	bsf	3,5	;RP0=1, select bank1
  2266  0162  1303               	bcf	3,6	;RP1=0, select bank1
  2267  0163  085F               	movf	ES_Run@ThisEvent^(0+128),w
  2268  0164  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0165  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0166  00C4               	movwf	RunPACSystemService@ThisEvent
  2271  0167  1683               	bsf	3,5	;RP0=1, select bank1
  2272  0168  1303               	bcf	3,6	;RP1=0, select bank1
  2273  0169  0860               	movf	(ES_Run@ThisEvent+1)^(0+128),w
  2274  016A  1283               	bcf	3,5	;RP0=0, select bank0
  2275  016B  1303               	bcf	3,6	;RP1=0, select bank0
  2276  016C  00C5               	movwf	RunPACSystemService@ThisEvent+1
  2277  016D  1683               	bsf	3,5	;RP0=1, select bank1
  2278  016E  1303               	bcf	3,6	;RP1=0, select bank1
  2279  016F  0861               	movf	(ES_Run@ThisEvent+2)^(0+128),w
  2280  0170  1283               	bcf	3,5	;RP0=0, select bank0
  2281  0171  1303               	bcf	3,6	;RP1=0, select bank0
  2282  0172  00C6               	movwf	RunPACSystemService@ThisEvent+2
  2283  0173  1403               	setc
  2284  0174  0D56               	rlf	ES_Run@HighestPrior,w
  2285  0175  3E24               	addlw	low ((_ServDescList-__stringbase)| (0+32768))
  2286  0176  0084               	movwf	4
  2287  0177  158A  2000  118A   	fcall	stringdir
  2288  017A  00D1               	movwf	??_ES_Run
  2289  017B  3045               	movlw	low u2767jt
  2290  017C  00C7               	movwf	(?_RunPACSystemService+3)^0
  2291  017D  0851               	movf	??_ES_Run,w
  2292  017E  118A  2900         	ljmp	fptable
  2293  0180                     u2767jf:	
  2294  0180  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0181  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0182  0844               	movf	?_RunPACSystemService,w
  2297  0183  1903               	btfsc	3,2
  2298  0184  2925               	goto	l3747
  2299                           
  2300                           ;ES_Framework.c: 240: return FailedRun;
  2301  0185  3002               	movlw	2
  2302  0186  00D1               	movwf	??_ES_Run
  2303  0187  00CF               	movwf	?_ES_Run
  2304  0188  2997               	goto	l85
  2305  0189                     l3749:	
  2306                           ;ES_Framework.c: 241: }
  2307                           ;ES_Framework.c: 242: }
  2308                           ;ES_Framework.c: 245: while (IsTimerPending() > 0)
  2309                           
  2310  0189  304D               	movlw	low u2797jt
  2311  018A  118A  2836         	ljmp	_ES_Timer_RTI_Resp
  2312  018C                     u2797jf:	
  2313  018C                     l3751:	
  2314  018C  2509  118A         	fcall	_IsTimerPending
  2315  018E  3A00               	xorlw	0
  2316  018F  1D03               	skipz
  2317  0190  2989               	goto	l3749
  2318  0191  304F               	movlw	low u2817jt
  2319  0192  158A  2ED2         	ljmp	_ES_CheckUserEvents
  2320  0194                     u2817jf:	
  2321  0194  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0195  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0196  2925               	goto	l3747
  2324  0197                     l85:	
  2325                           ;ES_Framework.c: 250: }
  2326                           ;ES_Framework.c: 251: return 0;
  2327                           
  2328  0197  3008               	movlw	high __pjmp_tab__ES_Run
  2329  0198  008A               	movwf	10
  2330  0199  0850               	movf	(?_ES_Run+1)^0,w
  2331  019A  0082               	movwf	2
  2332  019B                     __end_of_ES_Run:	
  2333  019B                     __ptext24:	
  2334 ;; *************** function _ES_Initialize *****************
  2335 ;; Defined at:
  2336 ;;		line 189 in file "ES_Framework.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  NewRate         1   33[BANK0 ] enum E93
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;  i               1   40[BANK0 ] unsigned char 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1   33[BANK0 ] enum E1594
  2343 ;; Registers used:
  2344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2350 ;;      Params:         0       2       0       0
  2351 ;;      Locals:         0       1       0       0
  2352 ;;      Temps:          0       5       0       0
  2353 ;;      Totals:         0       8       0       0
  2354 ;;Total ram usage:        8 bytes
  2355 ;; Hardware stack levels required when called:    8
  2356 ;; This function calls:
  2357 ;;		_ES_InitQueue
  2358 ;;		_ES_Sys_Timer_Init
  2359 ;;		_InitPACSystemService
  2360 ;;		_InitSPIService
  2361 ;;		_InitUARTRXService
  2362 ;;		_InitUARTTXService
  2363 ;;		___bmul
  2364 ;; This function is called by:
  2365 ;;		_main
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           
  2370                           ;psect for function _ES_Initialize
  2371  019B                     _ES_Initialize:	
  2372                           
  2373                           ;incstack = 0
  2374 ;; using string table level
  2375                           ; Regs used in _ES_Initialize: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2376  019B  1283               	bcf	3,5	;RP0=0, select bank0
  2377  019C  1303               	bcf	3,6	;RP1=0, select bank0
  2378  019D  00C2               	movwf	(?_ES_Initialize+1)^0
  2379                           
  2380                           ;ES_Framework.c: 190: unsigned char i;
  2381                           ;ES_Framework.c: 191: ES_Sys_Timer_Init();
  2382  019E  2407  118A         	fcall	_ES_Sys_Timer_Init
  2383                           
  2384                           ;ES_Framework.c: 193: for (i = 0; i < (sizeof(ServDescList)/sizeof(ServDescList[0])); i+
      +                          +) {
  2385  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  2386  01A1  3004               	movlw	4
  2387  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  2388  01A3  01C8               	clrf	ES_Initialize@i
  2389  01A4  0248               	subwf	ES_Initialize@i,w
  2390  01A5  1803               	btfsc	3,0
  2391  01A6  2A05               	goto	l3729
  2392  01A7                     l3711:	
  2393                           
  2394                           ;ES_Framework.c: 194: if ((ServDescList[i].InitFunc == (pInitFunc) 0) ||
  2395                           ;ES_Framework.c: 195: (ServDescList[i].RunFunc == (pRunFunc) 0))
  2396  01A7  0848               	movf	ES_Initialize@i,w
  2397  01A8  00C3               	movwf	??_ES_Initialize
  2398  01A9  0743               	addwf	??_ES_Initialize,w
  2399  01AA  3E24               	addlw	low ((_ServDescList-__stringbase)| (0+32768))
  2400  01AB  0084               	movwf	4
  2401  01AC  158A  2000  118A   	fcall	stringdir
  2402  01AF  3A00               	xorlw	0
  2403  01B0  1903               	skipnz
  2404  01B1  29BC               	goto	l3715
  2405  01B2  1403               	setc
  2406  01B3  0D48               	rlf	ES_Initialize@i,w
  2407  01B4  3E24               	addlw	low ((_ServDescList-__stringbase)| (0+32768))
  2408  01B5  0084               	movwf	4
  2409  01B6  158A  2000  118A   	fcall	stringdir
  2410  01B9  3A00               	xorlw	0
  2411  01BA  1D03               	skipz
  2412  01BB  29BE               	goto	l3719
  2413  01BC                     l3715:	
  2414                           
  2415                           ;ES_Framework.c: 196: return FailedPointer;
  2416  01BC  3003               	movlw	3
  2417  01BD  29F9               	goto	L5
  2418  01BE                     l3719:	
  2419                           
  2420                           ;ES_Framework.c: 198: ES_InitQueue(EventQueues[i].pMem, EventQueues[i].Size);
  2421  01BE  3003               	movlw	3
  2422  01BF  00C3               	movwf	??_ES_Initialize
  2423  01C0  00A0               	movwf	___bmul@multiplicand
  2424  01C1  0848               	movf	ES_Initialize@i,w
  2425  01C2  23C0               	fcall	___bmul
  2426  01C3  3E10               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  2427  01C4  0084               	movwf	4
  2428  01C5  158A  2000  118A   	fcall	stringdir
  2429  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  2430  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  2431  01CA  00C4               	movwf	??_ES_Initialize+1
  2432  01CB  158A  2000  118A   	fcall	stringdir
  2433  01CE  00C5               	movwf	??_ES_Initialize+2
  2434  01CF  0844               	movf	??_ES_Initialize+1,w
  2435  01D0  00A4               	movwf	ES_InitQueue@pBlock
  2436  01D1  0845               	movf	??_ES_Initialize+2,w
  2437  01D2  00A5               	movwf	ES_InitQueue@pBlock+1
  2438  01D3  3003               	movlw	3
  2439  01D4  00C6               	movwf	??_ES_Initialize+3
  2440  01D5  00A0               	movwf	___bmul@multiplicand
  2441  01D6  0848               	movf	ES_Initialize@i,w
  2442  01D7  23C0               	fcall	___bmul
  2443  01D8  3E02               	addlw	2
  2444  01D9  3E10               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  2445  01DA  0084               	movwf	4
  2446  01DB  158A  2000  118A   	fcall	stringdir
  2447  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  2448  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  2449  01E0  00C7               	movwf	??_ES_Initialize+4
  2450  01E1  00A6               	movwf	ES_InitQueue@BlockSize
  2451  01E2  23DC               	fcall	_ES_InitQueue
  2452                           
  2453                           ;ES_Framework.c: 200: if (ServDescList[i].InitFunc(i) != ((boolean) !((boolean) 0)))
  2454  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  2455  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  2456  01E5  0848               	movf	ES_Initialize@i,w
  2457  01E6  00C3               	movwf	??_ES_Initialize
  2458  01E7  00BC               	movwf	InitPACSystemService@Priority
  2459  01E8  0848               	movf	ES_Initialize@i,w
  2460  01E9  00C4               	movwf	??_ES_Initialize+1
  2461  01EA  0744               	addwf	??_ES_Initialize+1,w
  2462  01EB  3E24               	addlw	low ((_ServDescList-__stringbase)| (0+32768))
  2463  01EC  0084               	movwf	4
  2464  01ED  158A  2000  118A   	fcall	stringdir
  2465  01F0  118A  2100  118A   	fcall	fptable
  2466  01F3  3A01               	xorlw	1
  2467  01F4  1903               	skipnz
  2468  01F5  29FC               	goto	l3725
  2469                           
  2470                           ;ES_Framework.c: 201: return FailedInit;
  2471  01F6  3005               	movlw	5
  2472  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  2473  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  2474  01F9                     L5:	
  2475  01F9  00C3               	movwf	??_ES_Initialize
  2476  01FA  00C1               	movwf	?_ES_Initialize
  2477  01FB  2A06               	goto	l74
  2478  01FC                     l3725:	
  2479  01FC  3001               	movlw	1
  2480  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2481  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2482  01FF  00C3               	movwf	??_ES_Initialize
  2483  0200  07C8               	addwf	ES_Initialize@i,f
  2484  0201  3004               	movlw	4
  2485  0202  0248               	subwf	ES_Initialize@i,w
  2486  0203  1C03               	skipc
  2487  0204  29A7               	goto	l3711
  2488  0205                     l3729:	
  2489                           
  2490                           ;ES_Framework.c: 202: }
  2491                           ;ES_Framework.c: 203: return Success;
  2492  0205  01C1               	clrf	?_ES_Initialize
  2493  0206                     l74:	
  2494  0206  3000               	movlw	high __pjmp_tab__ES_Initialize
  2495  0207  008A               	movwf	10
  2496  0208  0842               	movf	(?_ES_Initialize+1)^0,w
  2497  0209  0082               	movwf	2
  2498  020A                     __end_of_ES_Initialize:	
  2499  020A                     __ptext5:	
  2500 ;; *************** function _RunUARTRXService *****************
  2501 ;; Defined at:
  2502 ;;		line 173 in file "UART_RX_SM.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;  ThisEvent       3   36[BANK0 ] struct ES_Event_t
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;  i               1   12[BANK2 ] unsigned char 
  2507 ;;  i               1   11[BANK2 ] unsigned char 
  2508 ;;  msgAddr         2    3[BANK2 ] unsigned int 
  2509 ;;  addrEvent       3    5[BANK2 ] struct ES_Event_t
  2510 ;;  TXEvent         3    8[BANK2 ] struct ES_Event_t
  2511 ;;  ReturnEvent     3    0[BANK2 ] struct ES_Event_t
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  3   36[BANK0 ] struct ES_Event_t
  2514 ;; Registers used:
  2515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2521 ;;      Params:         0       4       0       0
  2522 ;;      Locals:         0       0       0      13
  2523 ;;      Temps:          0       7       0       0
  2524 ;;      Totals:         0      11       0      13
  2525 ;;Total ram usage:       24 bytes
  2526 ;; Hardware stack levels required when called:    8
  2527 ;; This function calls:
  2528 ;;		_ES_Timer_InitTimer
  2529 ;;		_PostUARTTXService
  2530 ;;		___bmul
  2531 ;;		_toggleRespBuffer
  2532 ;;		_toggleStatBuffer
  2533 ;; This function is called by:
  2534 ;;		_ES_Run
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           
  2539                           ;psect for function _RunUARTRXService
  2540  020A                     _RunUARTRXService:	
  2541                           
  2542                           ;UART_RX_SM.c: 174: ES_Event ReturnEvent;
  2543                           ;UART_RX_SM.c: 175: ReturnEvent.EventType = ES_NO_EVENT;
  2544                           
  2545                           ;incstack = 0
  2546                           ; Regs used in _RunUARTRXService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2547  020A  1283               	bcf	3,5	;RP0=0, select bank2
  2548  020B  1703               	bsf	3,6	;RP1=1, select bank2
  2549  020C  01D8               	clrf	RunUARTRXService@ReturnEvent^(0+256)
  2550                           
  2551                           ;UART_RX_SM.c: 177: switch (ThisEvent.EventType) {
  2552  020D  2BA0               	goto	l3515
  2553  020E                     l3449:	
  2554                           ;UART_RX_SM.c: 178: case ES_RX_NEW_PACKET:
  2555                           
  2556                           
  2557                           ;UART_RX_SM.c: 179: if (RXBuffer[readRXIndex][0] == 0x81) {
  2558  020E  300A               	movlw	10
  2559  020F  1303               	bcf	3,6	;RP1=0, select bank0
  2560  0210  00C8               	movwf	??_RunUARTRXService
  2561  0211  00A0               	movwf	___bmul@multiplicand
  2562  0212  086A               	movf	_readRXIndex,w
  2563  0213  23C0  118A         	fcall	___bmul
  2564  0215  3E20               	addlw	(low (_RXBuffer| (0+256)))& (0+255)
  2565  0216  0084               	movwf	4
  2566  0217  3081               	movlw	129
  2567  0218  1783               	bsf	3,7	;select IRP bank2
  2568  0219  0600               	xorwf	0,w
  2569                           
  2570                           ;UART_RX_SM.c: 180: if (RXBuffer[readRXIndex][4] & (0x00000004 | 0x00000002)) {
  2571  021A  300A               	movlw	10
  2572  021B  1D03               	btfss	3,2
  2573  021C  2B69               	goto	L1
  2574  021D  1283               	bcf	3,5	;RP0=0, select bank0
  2575  021E  1303               	bcf	3,6	;RP1=0, select bank0
  2576  021F  00C8               	movwf	??_RunUARTRXService
  2577  0220  00A0               	movwf	___bmul@multiplicand
  2578  0221  086A               	movf	_readRXIndex,w
  2579  0222  23C0  118A         	fcall	___bmul
  2580  0224  3E04               	addlw	4
  2581  0225  3E20               	addlw	(low (_RXBuffer| (0+256)))& (0+255)
  2582  0226  0084               	movwf	4
  2583  0227  1783               	bsf	3,7	;select IRP bank2
  2584  0228  0800               	movf	0,w
  2585  0229  3906               	andlw	6
  2586  022A  1903               	btfsc	3,2
  2587  022B  2ADA               	goto	l3481
  2588                           
  2589                           ;UART_RX_SM.c: 184: for (uint8_t i = 0; i < 3; i++) {
  2590  022C  1283               	bcf	3,5	;RP0=0, select bank2
  2591  022D  3003               	movlw	3
  2592  022E  1703               	bsf	3,6	;RP1=1, select bank2
  2593  022F  01E3               	clrf	RunUARTRXService@i^(0+256)
  2594  0230  0263               	subwf	RunUARTRXService@i^(0+256),w
  2595  0231  1803               	btfsc	3,0
  2596  0232  2A62               	goto	i1L__ptext29
  2597  0233                     l3459:	
  2598                           
  2599                           ;UART_RX_SM.c: 185: statusBuffer[writeStatIndex][i] = RXBuffer[readRXIndex][5 + i];
  2600  0233  3005               	movlw	5
  2601  0234  0763               	addwf	RunUARTRXService@i^(0+256),w
  2602  0235  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0236  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0237  00C8               	movwf	??_RunUARTRXService
  2605  0238  3E20               	addlw	(low (_RXBuffer| (0+256)))& (0+255)
  2606  0239  00C9               	movwf	??_RunUARTRXService+1
  2607  023A  300A               	movlw	10
  2608  023B  00CA               	movwf	??_RunUARTRXService+2
  2609  023C  00A0               	movwf	___bmul@multiplicand
  2610  023D  086A               	movf	_readRXIndex,w
  2611  023E  23C0  118A         	fcall	___bmul
  2612  0240  1283               	bcf	3,5	;RP0=0, select bank0
  2613  0241  1303               	bcf	3,6	;RP1=0, select bank0
  2614  0242  0749               	addwf	??_RunUARTRXService+1,w
  2615  0243  00CB               	movwf	??_RunUARTRXService+3
  2616  0244  0084               	movwf	4
  2617  0245  1783               	bsf	3,7	;select IRP bank2
  2618  0246  0800               	movf	0,w
  2619  0247  00CC               	movwf	??_RunUARTRXService+4
  2620  0248  3003               	movlw	3
  2621  0249  00CD               	movwf	??_RunUARTRXService+5
  2622  024A  00A0               	movwf	___bmul@multiplicand
  2623  024B  086F               	movf	_writeStatIndex,w
  2624  024C  23C0  118A         	fcall	___bmul
  2625  024E  3EE2               	addlw	(low (_statusBuffer| 0))& (0+255)
  2626  024F  1283               	bcf	3,5	;RP0=0, select bank2
  2627  0250  1703               	bsf	3,6	;RP1=1, select bank2
  2628  0251  0763               	addwf	RunUARTRXService@i^(0+256),w
  2629  0252  1283               	bcf	3,5	;RP0=0, select bank0
  2630  0253  1303               	bcf	3,6	;RP1=0, select bank0
  2631  0254  00CE               	movwf	??_RunUARTRXService+6
  2632  0255  0084               	movwf	4
  2633  0256  084C               	movf	??_RunUARTRXService+4,w
  2634  0257  1383               	bcf	3,7	;select IRP bank1
  2635  0258  0080               	movwf	0
  2636  0259  3001               	movlw	1
  2637  025A  00C8               	movwf	??_RunUARTRXService
  2638  025B  1283               	bcf	3,5	;RP0=0, select bank2
  2639  025C  1703               	bsf	3,6	;RP1=1, select bank2
  2640  025D  07E3               	addwf	RunUARTRXService@i^(0+256),f
  2641  025E  3003               	movlw	3
  2642  025F  0263               	subwf	RunUARTRXService@i^(0+256),w
  2643  0260  1C03               	skipc
  2644  0261  2A33               	goto	l3459
  2645  0262                     i1L__ptext29:	
  2646                           ;UART_RX_SM.c: 186: }
  2647                           ;UART_RX_SM.c: 187: toggleStatBuffer();
  2648                           
  2649                           
  2650                           ;psect for function _toggleStatBuffer
  2651  0262                     i1L_toggleStatBuffer:	
  2652  0262                     i1Ll3333:	
  2653                           
  2654                           ;UART_RX_SM.c: 341: if (readStatIndex == 0) {
  2655  0262  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0263  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0264  086C               	movf	_readStatIndex,w
  2658  0265  1D03               	btfss	3,2
  2659  0266  2A6D               	ljmp	i1Ll3339
  2660  0267  2A69               	ljmp	i1Ll3335
  2661  0268                     i1Lu2341:	
  2662  0268  2A6D               	ljmp	i1Ll3339
  2663  0269                     i1Lu2340:	
  2664  0269                     i1Ll3335:	
  2665                           
  2666                           ;UART_RX_SM.c: 342: readStatIndex = 1;
  2667  0269  01EC               	clrf	_readStatIndex
  2668  026A  0AEC               	incf	_readStatIndex,f
  2669  026B                     i1Ll3337:	
  2670                           
  2671                           ;UART_RX_SM.c: 343: writeStatIndex = 0;
  2672  026B  01EF               	clrf	_writeStatIndex
  2673  026C  2A71               	ljmp	iL2
  2674  026D                     i1Ll472:	
  2675  026D                     i1Ll3339:	
  2676                           
  2677                           ;UART_RX_SM.c: 345: readStatIndex = 0;
  2678  026D  01EC               	clrf	_readStatIndex
  2679  026E                     i1Ll3341:	
  2680                           
  2681                           ;UART_RX_SM.c: 346: writeStatIndex = 1;
  2682  026E  01EF               	clrf	_writeStatIndex
  2683  026F  0AEF               	incf	_writeStatIndex,f
  2684  0270  2A71               	ljmp	iL2
  2685  0271                     i1Ll473:	
  2686  0271                     i1Ll474:	
  2687  0271                     iL2:	
  2688                           
  2689                           ;UART_RX_SM.c: 189: ES_Timer_InitTimer(0, 76);
  2690  0271  304C               	movlw	76
  2691  0272  1283               	bcf	3,5	;RP0=0, select bank0
  2692  0273  1303               	bcf	3,6	;RP1=0, select bank0
  2693  0274  00A0               	movwf	ES_Timer_InitTimer@NewTime
  2694  0275  3000               	movlw	0
  2695  0276  01A1               	clrf	ES_Timer_InitTimer@NewTime+1
  2696  0277  2428  118A         	fcall	_ES_Timer_InitTimer
  2697                           
  2698                           ;UART_RX_SM.c: 190: hasHeartbeat = ((boolean) !((boolean) 0));
  2699  0279  1683               	bsf	3,5	;RP0=1, select bank1
  2700  027A  3003               	movlw	3
  2701  027B  1303               	bcf	3,6	;RP1=0, select bank1
  2702  027C  01C9               	clrf	_hasHeartbeat^(0+128)
  2703  027D  0AC9               	incf	_hasHeartbeat^(0+128),f
  2704                           
  2705                           ;UART_RX_SM.c: 193: ES_Event addrEvent;
  2706                           ;UART_RX_SM.c: 194: superPACAddr |= (statusBuffer[readStatIndex][1] << 8);
  2707  027E  1283               	bcf	3,5	;RP0=0, select bank0
  2708  027F  1303               	bcf	3,6	;RP1=0, select bank0
  2709  0280  00C8               	movwf	??_RunUARTRXService
  2710  0281  00A0               	movwf	___bmul@multiplicand
  2711  0282  086C               	movf	_readStatIndex,w
  2712  0283  23C0  118A         	fcall	___bmul
  2713  0285  3E01               	addlw	1
  2714  0286  3EE2               	addlw	(low (_statusBuffer| 0))& (0+255)
  2715  0287  0084               	movwf	4
  2716  0288  1383               	bcf	3,7	;select IRP bank1
  2717  0289  0800               	movf	0,w
  2718  028A  1283               	bcf	3,5	;RP0=0, select bank0
  2719  028B  1303               	bcf	3,6	;RP1=0, select bank0
  2720  028C  00C9               	movwf	??_RunUARTRXService+1
  2721  028D  01CA               	clrf	??_RunUARTRXService+2
  2722  028E  00CA               	movwf	??_RunUARTRXService+2
  2723  028F  01C9               	clrf	??_RunUARTRXService+1
  2724  0290  0849               	movf	??_RunUARTRXService+1,w
  2725  0291  1683               	bsf	3,5	;RP0=1, select bank1
  2726  0292  1303               	bcf	3,6	;RP1=0, select bank1
  2727  0293  04BF               	iorwf	_superPACAddr^(0+128),f
  2728  0294  1283               	bcf	3,5	;RP0=0, select bank0
  2729  0295  1303               	bcf	3,6	;RP1=0, select bank0
  2730  0296  084A               	movf	??_RunUARTRXService+2,w
  2731  0297  1683               	bsf	3,5	;RP0=1, select bank1
  2732  0298  1303               	bcf	3,6	;RP1=0, select bank1
  2733  0299  04C0               	iorwf	(_superPACAddr+1)^(0+128),f
  2734                           
  2735                           ;UART_RX_SM.c: 195: superPACAddr |= (statusBuffer[readStatIndex][2]);
  2736  029A  3003               	movlw	3
  2737  029B  1283               	bcf	3,5	;RP0=0, select bank0
  2738  029C  1303               	bcf	3,6	;RP1=0, select bank0
  2739  029D  00C8               	movwf	??_RunUARTRXService
  2740  029E  00A0               	movwf	___bmul@multiplicand
  2741  029F  086C               	movf	_readStatIndex,w
  2742  02A0  23C0  118A         	fcall	___bmul
  2743  02A2  3E02               	addlw	2
  2744  02A3  3EE2               	addlw	(low (_statusBuffer| 0))& (0+255)
  2745  02A4  0084               	movwf	4
  2746  02A5  1383               	bcf	3,7	;select IRP bank1
  2747  02A6  0800               	movf	0,w
  2748  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2749  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2750  02A9  00C9               	movwf	??_RunUARTRXService+1
  2751  02AA  01CA               	clrf	??_RunUARTRXService+2
  2752  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  2753  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  2754  02AD  04BF               	iorwf	_superPACAddr^(0+128),f
  2755  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  2756  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  2757  02B0  084A               	movf	??_RunUARTRXService+2,w
  2758  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  2759  02B2  1303               	bcf	3,6	;RP1=0, select bank1
  2760  02B3  04C0               	iorwf	(_superPACAddr+1)^(0+128),f
  2761                           
  2762                           ;UART_RX_SM.c: 196: addrEvent.EventType = ES_TX_NEW_ADDR;
  2763  02B4  300B               	movlw	11
  2764  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  2765  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  2766  02B7  00C8               	movwf	??_RunUARTRXService
  2767  02B8  1283               	bcf	3,5	;RP0=0, select bank2
  2768  02B9  1703               	bsf	3,6	;RP1=1, select bank2
  2769  02BA  00DD               	movwf	RunUARTRXService@addrEvent^(0+256)
  2770                           
  2771                           ;UART_RX_SM.c: 197: addrEvent.EventParam = superPACAddr;
  2772  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  2773  02BC  1303               	bcf	3,6	;RP1=0, select bank1
  2774  02BD  0840               	movf	(_superPACAddr+1)^(0+128),w
  2775  02BE  1283               	bcf	3,5	;RP0=0, select bank2
  2776  02BF  1703               	bsf	3,6	;RP1=1, select bank2
  2777  02C0  00DF               	movwf	((RunUARTRXService@addrEvent+1)^(0+256)+1)
  2778  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  2779  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  2780  02C3  083F               	movf	_superPACAddr^(0+128),w
  2781  02C4  1283               	bcf	3,5	;RP0=0, select bank2
  2782  02C5  1703               	bsf	3,6	;RP1=1, select bank2
  2783  02C6  00DE               	movwf	(RunUARTRXService@addrEvent^(0+256)+1)
  2784                           
  2785                           ;UART_RX_SM.c: 198: PostUARTTXService(addrEvent);
  2786  02C7  085D               	movf	RunUARTRXService@addrEvent^(0+256),w
  2787  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  2788  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  2789  02CA  00BC               	movwf	PostUARTTXService@ThisEvent
  2790  02CB  1283               	bcf	3,5	;RP0=0, select bank2
  2791  02CC  1703               	bsf	3,6	;RP1=1, select bank2
  2792  02CD  085E               	movf	(RunUARTRXService@addrEvent+1)^(0+256),w
  2793  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  2794  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  2795  02D0  00BD               	movwf	PostUARTTXService@ThisEvent+1
  2796  02D1  1283               	bcf	3,5	;RP0=0, select bank2
  2797  02D2  1703               	bsf	3,6	;RP1=1, select bank2
  2798  02D3  085F               	movf	(RunUARTRXService@addrEvent+2)^(0+256),w
  2799  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2800  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  2801  02D6  00BE               	movwf	PostUARTTXService@ThisEvent+2
  2802  02D7  23D2  118A         	fcall	_PostUARTTXService
  2803                           
  2804                           ;UART_RX_SM.c: 199: } else {
  2805  02D9  2BAA               	goto	l3517
  2806  02DA                     l3481:	
  2807                           
  2808                           ;UART_RX_SM.c: 201: uint16_t msgAddr = RXBuffer[readRXIndex][1] << 8;
  2809  02DA  300A               	movlw	10
  2810  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2811  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  2812  02DD  00C8               	movwf	??_RunUARTRXService
  2813  02DE  00A0               	movwf	___bmul@multiplicand
  2814  02DF  086A               	movf	_readRXIndex,w
  2815  02E0  23C0  118A         	fcall	___bmul
  2816  02E2  3E01               	addlw	1
  2817  02E3  3E20               	addlw	(low (_RXBuffer| (0+256)))& (0+255)
  2818  02E4  0084               	movwf	4
  2819  02E5  1783               	bsf	3,7	;select IRP bank2
  2820  02E6  0800               	movf	0,w
  2821  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  2822  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  2823  02E9  00C9               	movwf	??_RunUARTRXService+1
  2824  02EA  01CA               	clrf	??_RunUARTRXService+2
  2825  02EB  00CA               	movwf	??_RunUARTRXService+2
  2826  02EC  01C9               	clrf	??_RunUARTRXService+1
  2827  02ED  0849               	movf	??_RunUARTRXService+1,w
  2828  02EE  1283               	bcf	3,5	;RP0=0, select bank2
  2829  02EF  1703               	bsf	3,6	;RP1=1, select bank2
  2830  02F0  00DB               	movwf	RunUARTRXService@msgAddr^(0+256)
  2831  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  2832  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  2833  02F3  084A               	movf	??_RunUARTRXService+2,w
  2834  02F4  1283               	bcf	3,5	;RP0=0, select bank2
  2835  02F5  1703               	bsf	3,6	;RP1=1, select bank2
  2836  02F6  00DC               	movwf	(RunUARTRXService@msgAddr+1)^(0+256)
  2837                           
  2838                           ;UART_RX_SM.c: 202: msgAddr |= RXBuffer[readRXIndex][2];
  2839  02F7  300A               	movlw	10
  2840  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  2841  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  2842  02FA  00C8               	movwf	??_RunUARTRXService
  2843  02FB  00A0               	movwf	___bmul@multiplicand
  2844  02FC  086A               	movf	_readRXIndex,w
  2845  02FD  23C0  118A         	fcall	___bmul
  2846  02FF  3E02               	addlw	2
  2847  0300  3E20               	addlw	(low (_RXBuffer| (0+256)))& (0+255)
  2848  0301  0084               	movwf	4
  2849  0302  1783               	bsf	3,7	;select IRP bank2
  2850  0303  0800               	movf	0,w
  2851  0304  1283               	bcf	3,5	;RP0=0, select bank0
  2852  0305  1303               	bcf	3,6	;RP1=0, select bank0
  2853  0306  00C9               	movwf	??_RunUARTRXService+1
  2854  0307  01CA               	clrf	??_RunUARTRXService+2
  2855  0308  1283               	bcf	3,5	;RP0=0, select bank2
  2856  0309  1703               	bsf	3,6	;RP1=1, select bank2
  2857  030A  04DB               	iorwf	RunUARTRXService@msgAddr^(0+256),f
  2858  030B  1283               	bcf	3,5	;RP0=0, select bank0
  2859  030C  1303               	bcf	3,6	;RP1=0, select bank0
  2860  030D  084A               	movf	??_RunUARTRXService+2,w
  2861  030E  1283               	bcf	3,5	;RP0=0, select bank2
  2862  030F  1703               	bsf	3,6	;RP1=1, select bank2
  2863  0310  04DC               	iorwf	(RunUARTRXService@msgAddr+1)^(0+256),f
  2864                           
  2865                           ;UART_RX_SM.c: 204: if (superPACAddr == msgAddr) {
  2866  0311  085C               	movf	(RunUARTRXService@msgAddr+1)^(0+256),w
  2867  0312  1683               	bsf	3,5	;RP0=1, select bank1
  2868  0313  1303               	bcf	3,6	;RP1=0, select bank1
  2869  0314  0640               	xorwf	(_superPACAddr+1)^(0+128),w
  2870  0315  1D03               	skipz
  2871  0316  2B1D               	goto	u2505
  2872  0317  1283               	bcf	3,5	;RP0=0, select bank2
  2873  0318  1703               	bsf	3,6	;RP1=1, select bank2
  2874  0319  085B               	movf	RunUARTRXService@msgAddr^(0+256),w
  2875  031A  1683               	bsf	3,5	;RP0=1, select bank1
  2876  031B  1303               	bcf	3,6	;RP1=0, select bank1
  2877  031C  063F               	xorwf	_superPACAddr^(0+128),w
  2878  031D                     u2505:	
  2879  031D  1D03               	skipz
  2880  031E  2BAA               	goto	l3517
  2881                           
  2882                           ;UART_RX_SM.c: 208: for (uint8_t i = 0; i < 3; i++) {
  2883  031F  1283               	bcf	3,5	;RP0=0, select bank2
  2884  0320  3003               	movlw	3
  2885  0321  1703               	bsf	3,6	;RP1=1, select bank2
  2886  0322  01E4               	clrf	RunUARTRXService@i_567^(0+256)
  2887  0323  0264               	subwf	RunUARTRXService@i_567^(0+256),w
  2888  0324  1803               	btfsc	3,0
  2889  0325  2B55               	goto	i2L__ptext30
  2890  0326                     l3493:	
  2891                           
  2892                           ;UART_RX_SM.c: 209: responseBuffer[writeRespIndex][i] = RXBuffer[readRXIndex][5 + i];
  2893  0326  3005               	movlw	5
  2894  0327  0764               	addwf	RunUARTRXService@i_567^(0+256),w
  2895  0328  1283               	bcf	3,5	;RP0=0, select bank0
  2896  0329  1303               	bcf	3,6	;RP1=0, select bank0
  2897  032A  00C8               	movwf	??_RunUARTRXService
  2898  032B  3E20               	addlw	(low (_RXBuffer| (0+256)))& (0+255)
  2899  032C  00C9               	movwf	??_RunUARTRXService+1
  2900  032D  300A               	movlw	10
  2901  032E  00CA               	movwf	??_RunUARTRXService+2
  2902  032F  00A0               	movwf	___bmul@multiplicand
  2903  0330  086A               	movf	_readRXIndex,w
  2904  0331  23C0  118A         	fcall	___bmul
  2905  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2906  0334  1303               	bcf	3,6	;RP1=0, select bank0
  2907  0335  0749               	addwf	??_RunUARTRXService+1,w
  2908  0336  00CB               	movwf	??_RunUARTRXService+3
  2909  0337  0084               	movwf	4
  2910  0338  1783               	bsf	3,7	;select IRP bank2
  2911  0339  0800               	movf	0,w
  2912  033A  00CC               	movwf	??_RunUARTRXService+4
  2913  033B  3003               	movlw	3
  2914  033C  00CD               	movwf	??_RunUARTRXService+5
  2915  033D  00A0               	movwf	___bmul@multiplicand
  2916  033E  086E               	movf	_writeRespIndex,w
  2917  033F  23C0  118A         	fcall	___bmul
  2918  0341  3ED9               	addlw	(low (_responseBuffer| 0))& (0+255)
  2919  0342  1283               	bcf	3,5	;RP0=0, select bank2
  2920  0343  1703               	bsf	3,6	;RP1=1, select bank2
  2921  0344  0764               	addwf	RunUARTRXService@i_567^(0+256),w
  2922  0345  1283               	bcf	3,5	;RP0=0, select bank0
  2923  0346  1303               	bcf	3,6	;RP1=0, select bank0
  2924  0347  00CE               	movwf	??_RunUARTRXService+6
  2925  0348  0084               	movwf	4
  2926  0349  084C               	movf	??_RunUARTRXService+4,w
  2927  034A  1383               	bcf	3,7	;select IRP bank1
  2928  034B  0080               	movwf	0
  2929  034C  3001               	movlw	1
  2930  034D  00C8               	movwf	??_RunUARTRXService
  2931  034E  1283               	bcf	3,5	;RP0=0, select bank2
  2932  034F  1703               	bsf	3,6	;RP1=1, select bank2
  2933  0350  07E4               	addwf	RunUARTRXService@i_567^(0+256),f
  2934  0351  3003               	movlw	3
  2935  0352  0264               	subwf	RunUARTRXService@i_567^(0+256),w
  2936  0353  1C03               	skipc
  2937  0354  2B26               	goto	l3493
  2938  0355                     i2L__ptext30:	
  2939                           ;UART_RX_SM.c: 210: }
  2940                           ;UART_RX_SM.c: 211: toggleRespBuffer();
  2941                           
  2942                           
  2943                           ;psect for function _toggleRespBuffer
  2944  0355                     i2L_toggleRespBuffer:	
  2945  0355                     i2Ll3343:	
  2946                           
  2947                           ;UART_RX_SM.c: 351: if (readRespIndex == 0) {
  2948  0355  1283               	bcf	3,5	;RP0=0, select bank0
  2949  0356  1303               	bcf	3,6	;RP1=0, select bank0
  2950  0357  086B               	movf	_readRespIndex,w
  2951  0358  1D03               	btfss	3,2
  2952  0359  2B60               	ljmp	i2Ll477
  2953  035A  2B5C               	ljmp	i2Ll3345
  2954  035B                     i2Lu2351:	
  2955  035B  2B60               	ljmp	i2Ll477
  2956  035C                     i2Lu2350:	
  2957  035C                     i2Ll3345:	
  2958                           
  2959                           ;UART_RX_SM.c: 352: readRespIndex = 1;
  2960  035C  01EB               	clrf	_readRespIndex
  2961  035D  0AEB               	incf	_readRespIndex,f
  2962  035E                     i2Ll3347:	
  2963                           
  2964                           ;UART_RX_SM.c: 353: writeRespIndex = 0;
  2965  035E  01EE               	clrf	_writeRespIndex
  2966  035F  2B64               	ljmp	iL16
  2967  0360                     i2Ll477:	
  2968                           
  2969                           ;UART_RX_SM.c: 355: readRespIndex = 1;
  2970  0360  01EB               	clrf	_readRespIndex
  2971  0361  0AEB               	incf	_readRespIndex,f
  2972  0362                     i2Ll3349:	
  2973                           
  2974                           ;UART_RX_SM.c: 356: writeRespIndex = 0;
  2975  0362  01EE               	clrf	_writeRespIndex
  2976  0363  2B64               	ljmp	iL16
  2977  0364                     i2Ll478:	
  2978  0364                     i2Ll479:	
  2979  0364                     iL16:	
  2980                           
  2981                           ;UART_RX_SM.c: 213: newResponseAvailable = ((boolean) !((boolean) 0));
  2982  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2983  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2984  0366  01E9               	clrf	_newResponseAvailable
  2985  0367  0AE9               	incf	_newResponseAvailable,f
  2986                           
  2987                           ;UART_RX_SM.c: 214: }
  2988                           ;UART_RX_SM.c: 215: }
  2989                           ;UART_RX_SM.c: 216: } else if (RXBuffer[readRXIndex][0] == 0x89) {
  2990  0368  2BAA               	goto	l3517
  2991  0369                     L1:	
  2992  0369  1283               	bcf	3,5	;RP0=0, select bank0
  2993  036A  1303               	bcf	3,6	;RP1=0, select bank0
  2994  036B  00C8               	movwf	??_RunUARTRXService
  2995  036C  00A0               	movwf	___bmul@multiplicand
  2996  036D  086A               	movf	_readRXIndex,w
  2997  036E  23C0  118A         	fcall	___bmul
  2998  0370  3E20               	addlw	(low (_RXBuffer| (0+256)))& (0+255)
  2999  0371  0084               	movwf	4
  3000  0372  3089               	movlw	137
  3001  0373  1783               	bsf	3,7	;select IRP bank2
  3002  0374  0600               	xorwf	0,w
  3003  0375  1D03               	btfss	3,2
  3004  0376  2BAA               	goto	l3517
  3005                           
  3006                           ;UART_RX_SM.c: 218: ES_Event TXEvent;
  3007                           ;UART_RX_SM.c: 219: TXEvent.EventType = ES_TX_STATUS;
  3008  0377  300E               	movlw	14
  3009  0378  1283               	bcf	3,5	;RP0=0, select bank0
  3010  0379  1303               	bcf	3,6	;RP1=0, select bank0
  3011  037A  00C8               	movwf	??_RunUARTRXService
  3012  037B  1283               	bcf	3,5	;RP0=0, select bank2
  3013  037C  1703               	bsf	3,6	;RP1=1, select bank2
  3014  037D  00E0               	movwf	RunUARTRXService@TXEvent^(0+256)
  3015                           
  3016                           ;UART_RX_SM.c: 220: TXEvent.EventParam = 2;
  3017  037E  3002               	movlw	2
  3018  037F  00E1               	movwf	(RunUARTRXService@TXEvent^(0+256)+1)
  3019  0380  01E2               	clrf	(RunUARTRXService@TXEvent^(0+256)+2)
  3020                           
  3021                           ;UART_RX_SM.c: 221: PostUARTTXService(TXEvent);
  3022  0381  0860               	movf	RunUARTRXService@TXEvent^(0+256),w
  3023  0382  1283               	bcf	3,5	;RP0=0, select bank0
  3024  0383  1303               	bcf	3,6	;RP1=0, select bank0
  3025  0384  00BC               	movwf	PostUARTTXService@ThisEvent
  3026  0385  1283               	bcf	3,5	;RP0=0, select bank2
  3027  0386  1703               	bsf	3,6	;RP1=1, select bank2
  3028  0387  0861               	movf	(RunUARTRXService@TXEvent+1)^(0+256),w
  3029  0388  1283               	bcf	3,5	;RP0=0, select bank0
  3030  0389  1303               	bcf	3,6	;RP1=0, select bank0
  3031  038A  00BD               	movwf	PostUARTTXService@ThisEvent+1
  3032  038B  1283               	bcf	3,5	;RP0=0, select bank2
  3033  038C  1703               	bsf	3,6	;RP1=1, select bank2
  3034  038D  0862               	movf	(RunUARTRXService@TXEvent+2)^(0+256),w
  3035  038E  1283               	bcf	3,5	;RP0=0, select bank0
  3036  038F  1303               	bcf	3,6	;RP1=0, select bank0
  3037  0390  00BE               	movwf	PostUARTTXService@ThisEvent+2
  3038  0391  23D2  118A         	fcall	_PostUARTTXService
  3039                           
  3040                           ;UART_RX_SM.c: 222: }
  3041                           ;UART_RX_SM.c: 223: break;
  3042  0393  2BAA               	goto	l3517
  3043  0394                     l3509:	
  3044                           ;UART_RX_SM.c: 224: case ES_TIMEOUT:
  3045                           
  3046                           
  3047                           ;UART_RX_SM.c: 225: if (ThisEvent.EventParam == 0) {
  3048  0394  1283               	bcf	3,5	;RP0=0, select bank0
  3049  0395  1303               	bcf	3,6	;RP1=0, select bank0
  3050  0396  0845               	movf	RunUARTRXService@ThisEvent+1,w
  3051  0397  0446               	iorwf	RunUARTRXService@ThisEvent+2,w
  3052  0398  1D03               	btfss	3,2
  3053  0399  2BAA               	goto	l3517
  3054                           
  3055                           ;UART_RX_SM.c: 226: superPACAddr = 0;
  3056  039A  1683               	bsf	3,5	;RP0=1, select bank1
  3057  039B  1303               	bcf	3,6	;RP1=0, select bank1
  3058  039C  01BF               	clrf	_superPACAddr^(0+128)
  3059  039D  01C0               	clrf	(_superPACAddr+1)^(0+128)
  3060                           
  3061                           ;UART_RX_SM.c: 227: hasHeartbeat = ((boolean) 0);
  3062  039E  01C9               	clrf	_hasHeartbeat^(0+128)
  3063                           
  3064                           ;UART_RX_SM.c: 232: }
  3065                           
  3066                           ;UART_RX_SM.c: 231: break;
  3067                           
  3068                           ;UART_RX_SM.c: 230: default:
  3069                           
  3070                           ;UART_RX_SM.c: 228: }
  3071                           ;UART_RX_SM.c: 229: break;
  3072  039F  2BAA               	goto	l3517
  3073  03A0                     l3515:	
  3074  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  3075  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  3076  03A2  0844               	movf	RunUARTRXService@ThisEvent,w
  3077                           
  3078                           ; Switch size 1, requested type "space"
  3079                           ; Number of cases is 2, Range of values is 4 to 7
  3080                           ; switch strategies available:
  3081                           ; Name         Instructions Cycles
  3082                           ; simple_byte            7     4 (average)
  3083                           ; direct_byte           18    10 (fixed)
  3084                           ; jumptable            263     9 (fixed)
  3085                           ;	Chosen strategy is simple_byte
  3086  03A3  3A04               	xorlw	4	; case 4
  3087  03A4  1903               	skipnz
  3088  03A5  2B94               	goto	l3509
  3089  03A6  3A03               	xorlw	3	; case 7
  3090  03A7  1903               	skipnz
  3091  03A8  2A0E               	goto	l3449
  3092  03A9  2BAA               	goto	l3517
  3093  03AA                     l3517:	
  3094                           
  3095                           ;UART_RX_SM.c: 234: return ReturnEvent;
  3096  03AA  1283               	bcf	3,5	;RP0=0, select bank2
  3097  03AB  1703               	bsf	3,6	;RP1=1, select bank2
  3098  03AC  0858               	movf	RunUARTRXService@ReturnEvent^(0+256),w
  3099  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  3100  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  3101  03AF  00C4               	movwf	?_RunUARTRXService
  3102  03B0  1283               	bcf	3,5	;RP0=0, select bank2
  3103  03B1  1703               	bsf	3,6	;RP1=1, select bank2
  3104  03B2  0859               	movf	(RunUARTRXService@ReturnEvent+1)^(0+256),w
  3105  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  3106  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  3107  03B5  00C5               	movwf	?_RunUARTRXService+1
  3108  03B6  1283               	bcf	3,5	;RP0=0, select bank2
  3109  03B7  1703               	bsf	3,6	;RP1=1, select bank2
  3110  03B8  085A               	movf	(RunUARTRXService@ReturnEvent+2)^(0+256),w
  3111  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  3112  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  3113  03BB  00C6               	movwf	?_RunUARTRXService+2
  3114  03BC  3008               	movlw	high __pjmp_tab
  3115  03BD  008A               	movwf	10
  3116  03BE  0847               	movf	(?_RunUARTRXService+3)^0,w
  3117  03BF  0082               	movwf	2
  3118  03C0                     __end_of_RunUARTRXService:	
  3119  03C0                     __ptext34:	
  3120 ;; *************** function ___bmul *****************
  3121 ;; Defined at:
  3122 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul8.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  multiplier      1    wreg     unsigned char 
  3125 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3128 ;;  product         1    2[BANK0 ] unsigned char 
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      unsigned char 
  3131 ;; Registers used:
  3132 ;;		wreg, status,2, status,0
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3138 ;;      Params:         0       1       0       0
  3139 ;;      Locals:         0       2       0       0
  3140 ;;      Temps:          0       1       0       0
  3141 ;;      Totals:         0       4       0       0
  3142 ;;Total ram usage:        4 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    4
  3145 ;; This function calls:
  3146 ;;		Nothing
  3147 ;; This function is called by:
  3148 ;;		_ES_Initialize
  3149 ;;		_ES_Run
  3150 ;;		_ES_PostToService
  3151 ;;		_ES_EnQueueFIFO
  3152 ;;		_ES_DeQueue
  3153 ;;		_RunUARTRXService
  3154 ;;		_RX_getStatusBuffer
  3155 ;;		_RX_getResponseBuffer
  3156 ;;		_UARTRXIntResponse
  3157 ;;		_ES_PostAll
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           
  3162                           ;psect for function ___bmul
  3163  03C0                     ___bmul:	
  3164                           
  3165                           ;incstack = 0
  3166                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3167                           ;___bmul@multiplier stored from wreg
  3168  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  3169  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  3170  03C2  00A3               	movwf	___bmul@multiplier
  3171  03C3  01A2               	clrf	___bmul@product
  3172  03C4                     l3197:	
  3173  03C4  1C23               	btfss	___bmul@multiplier,0
  3174  03C5  2BC9               	goto	l3201
  3175  03C6  0820               	movf	___bmul@multiplicand,w
  3176  03C7  00A1               	movwf	??___bmul
  3177  03C8  07A2               	addwf	___bmul@product,f
  3178  03C9                     l3201:	
  3179  03C9  1003               	clrc
  3180  03CA  0DA0               	rlf	___bmul@multiplicand,f
  3181  03CB  1003               	clrc
  3182  03CC  0CA3               	rrf	___bmul@multiplier,f
  3183  03CD  0823               	movf	___bmul@multiplier,w
  3184  03CE  1D03               	btfss	3,2
  3185  03CF  2BC4               	goto	l3197
  3186  03D0  0822               	movf	___bmul@product,w
  3187  03D1  0008               	return
  3188  03D2                     __end_of___bmul:	
  3189  03D2                     __ptext15:	
  3190 ;; *************** function _PostUARTTXService *****************
  3191 ;; Defined at:
  3192 ;;		line 123 in file "UART_TX_SM.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  ThisEvent       3   28[BANK0 ] struct ES_Event_t
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;		None
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  1    wreg      unsigned char 
  3199 ;; Registers used:
  3200 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3206 ;;      Params:         0       3       0       0
  3207 ;;      Locals:         0       0       0       0
  3208 ;;      Temps:          0       0       0       0
  3209 ;;      Totals:         0       3       0       0
  3210 ;;Total ram usage:        3 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    7
  3213 ;; This function calls:
  3214 ;;		_ES_PostToService
  3215 ;; This function is called by:
  3216 ;;		_RunUARTRXService
  3217 ;;		_CheckSPIEvent
  3218 ;;		_ES_Timer_RTI_Resp
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           
  3223                           ;psect for function _PostUARTTXService
  3224  03D2                     _PostUARTTXService:	
  3225                           
  3226                           ;UART_TX_SM.c: 124: return ES_PostToService(MyPriority, ThisEvent);
  3227                           ;	Return value of _PostUARTTXService is never used
  3228                           
  3229                           ;incstack = 0
  3230                           ; Regs used in _PostUARTTXService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3231  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  3232  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  3233  03D4  083C               	movf	PostUARTTXService@ThisEvent,w
  3234  03D5  00B3               	movwf	ES_PostToService@TheEvent
  3235  03D6  083D               	movf	PostUARTTXService@ThisEvent+1,w
  3236  03D7  00B4               	movwf	ES_PostToService@TheEvent+1
  3237  03D8  083E               	movf	PostUARTTXService@ThisEvent+2,w
  3238  03D9  00B5               	movwf	ES_PostToService@TheEvent+2
  3239  03DA  085E               	movf	UART_TX_SM@MyPriority,w
  3240  03DB  2C4F               	ljmp	_ES_PostToService
  3241  03DC                     __end_of_PostUARTTXService:	
  3242  03DC                     __ptext36:	
  3243 ;; *************** function _ES_InitQueue *****************
  3244 ;; Defined at:
  3245 ;;		line 56 in file "ES_Queue.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  pBlock          2    4[BANK0 ] PTR struct ES_Event_t
  3248 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  3249 ;;  BlockSize       1    6[BANK0 ] unsigned char 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  pThisQueue      2    9[BANK0 ] PTR struct .
  3252 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      unsigned char 
  3255 ;; Registers used:
  3256 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3262 ;;      Params:         0       3       0       0
  3263 ;;      Locals:         0       2       0       0
  3264 ;;      Temps:          0       2       0       0
  3265 ;;      Totals:         0       7       0       0
  3266 ;;Total ram usage:        7 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    4
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_ES_Initialize
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           
  3277                           ;psect for function _ES_InitQueue
  3278  03DC                     _ES_InitQueue:	
  3279                           
  3280                           ;ES_Queue.c: 58: pQueue_t pThisQueue;
  3281                           ;ES_Queue.c: 60: pThisQueue = (pQueue_t)pBlock;
  3282                           
  3283                           ;incstack = 0
  3284                           ; Regs used in _ES_InitQueue: [wreg-fsr0h+status,2+status,0]
  3285  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  3286  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  3287  03DE  0824               	movf	ES_InitQueue@pBlock,w
  3288  03DF  00A9               	movwf	ES_InitQueue@pThisQueue
  3289  03E0  0825               	movf	ES_InitQueue@pBlock+1,w
  3290  03E1  00AA               	movwf	ES_InitQueue@pThisQueue+1
  3291                           
  3292                           ;ES_Queue.c: 62: pThisQueue->QueueSize = BlockSize - 1;
  3293  03E2  0826               	movf	ES_InitQueue@BlockSize,w
  3294  03E3  3EFF               	addlw	255
  3295  03E4  00A7               	movwf	??_ES_InitQueue
  3296  03E5  0829               	movf	ES_InitQueue@pThisQueue,w
  3297  03E6  0084               	movwf	4
  3298  03E7  1383               	bcf	3,7
  3299  03E8  182A               	btfsc	ES_InitQueue@pThisQueue+1,0
  3300  03E9  1783               	bsf	3,7
  3301  03EA  0827               	movf	??_ES_InitQueue,w
  3302  03EB  0080               	movwf	0
  3303                           
  3304                           ;ES_Queue.c: 63: pThisQueue->CurrentIndex = 0;
  3305  03EC  3001               	movlw	1
  3306  03ED  0729               	addwf	ES_InitQueue@pThisQueue,w
  3307  03EE  00A7               	movwf	??_ES_InitQueue
  3308  03EF  082A               	movf	ES_InitQueue@pThisQueue+1,w
  3309  03F0  1803               	skipnc
  3310  03F1  3E01               	addlw	1
  3311  03F2  00A8               	movwf	??_ES_InitQueue+1
  3312  03F3  0827               	movf	??_ES_InitQueue,w
  3313  03F4  0084               	movwf	4
  3314  03F5  1783               	bsf	3,7
  3315  03F6  1C28               	btfss	??_ES_InitQueue+1,0
  3316  03F7  1383               	bcf	3,7
  3317  03F8  3002               	movlw	2
  3318  03F9  0180               	clrf	0
  3319                           
  3320                           ;ES_Queue.c: 64: pThisQueue->NumEntries = 0;
  3321  03FA  0729               	addwf	ES_InitQueue@pThisQueue,w
  3322  03FB  00A7               	movwf	??_ES_InitQueue
  3323  03FC  082A               	movf	ES_InitQueue@pThisQueue+1,w
  3324  03FD  1803               	skipnc
  3325  03FE  3E01               	addlw	1
  3326  03FF  00A8               	movwf	??_ES_InitQueue+1
  3327  0400  0827               	movf	??_ES_InitQueue,w
  3328  0401  0084               	movwf	4
  3329  0402  1783               	bsf	3,7
  3330  0403  1C28               	btfss	??_ES_InitQueue+1,0
  3331  0404  1383               	bcf	3,7
  3332  0405  0180               	clrf	0
  3333  0406  0008               	return
  3334  0407                     __end_of_ES_InitQueue:	
  3335                           ;ES_Queue.c: 65: return(pThisQueue->QueueSize);
  3336                           ;	Return value of _ES_InitQueue is never used
  3337                           
  3338  0407                     __ptext35:	
  3339 ;; *************** function _ES_Sys_Timer_Init *****************
  3340 ;; Defined at:
  3341 ;;		line 25 in file "ES_Port.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;		None
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;		None
  3346 ;; Return value:  Size  Location     Type
  3347 ;;		None               void
  3348 ;; Registers used:
  3349 ;;		status,2
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3355 ;;      Params:         0       0       0       0
  3356 ;;      Locals:         0       0       0       0
  3357 ;;      Temps:          0       0       0       0
  3358 ;;      Totals:         0       0       0       0
  3359 ;;Total ram usage:        0 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    4
  3362 ;; This function calls:
  3363 ;;		Nothing
  3364 ;; This function is called by:
  3365 ;;		_ES_Initialize
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           
  3370                           ;psect for function _ES_Sys_Timer_Init
  3371  0407                     _ES_Sys_Timer_Init:	
  3372                           
  3373                           ;ES_Port.c: 29: TRISC0 = 0;
  3374                           
  3375                           ;incstack = 0
  3376                           ; Regs used in _ES_Sys_Timer_Init: [status,2]
  3377  0407  1683               	bsf	3,5	;RP0=1, select bank1
  3378  0408  1303               	bcf	3,6	;RP1=0, select bank1
  3379  0409  1007               	bcf	7,0	;volatile
  3380                           
  3381                           ;ES_Port.c: 30: ANS4 = 0;
  3382  040A  1283               	bcf	3,5	;RP0=0, select bank2
  3383  040B  1703               	bsf	3,6	;RP1=1, select bank2
  3384  040C  121E               	bcf	30,4	;volatile
  3385                           
  3386                           ;ES_Port.c: 31: RC0 = 0;
  3387  040D  1283               	bcf	3,5	;RP0=0, select bank0
  3388  040E  1303               	bcf	3,6	;RP1=0, select bank0
  3389  040F  1007               	bcf	7,0	;volatile
  3390                           
  3391                           ;ES_Port.c: 34: TRISC7 = 0;
  3392  0410  1683               	bsf	3,5	;RP0=1, select bank1
  3393  0411  1303               	bcf	3,6	;RP1=0, select bank1
  3394  0412  1387               	bcf	7,7	;volatile
  3395                           
  3396                           ;ES_Port.c: 35: ANS9 = 0;
  3397  0413  1283               	bcf	3,5	;RP0=0, select bank2
  3398  0414  1703               	bsf	3,6	;RP1=1, select bank2
  3399  0415  109F               	bcf	31,1	;volatile
  3400                           
  3401                           ;ES_Port.c: 36: RC7 = 0;
  3402  0416  1283               	bcf	3,5	;RP0=0, select bank0
  3403  0417  1303               	bcf	3,6	;RP1=0, select bank0
  3404  0418  1387               	bcf	7,7	;volatile
  3405                           
  3406                           ;ES_Port.c: 39: {GIE = 0;};
  3407  0419  138B               	bcf	11,7	;volatile
  3408                           
  3409                           ;ES_Port.c: 41: T0CS = 0;
  3410  041A  1683               	bsf	3,5	;RP0=1, select bank1
  3411  041B  1303               	bcf	3,6	;RP1=0, select bank1
  3412  041C  1281               	bcf	1,5	;volatile
  3413                           
  3414                           ;ES_Port.c: 42: PSA = 0;
  3415  041D  1181               	bcf	1,3	;volatile
  3416                           
  3417                           ;ES_Port.c: 43: PS0 = 0;
  3418  041E  1001               	bcf	1,0	;volatile
  3419                           
  3420                           ;ES_Port.c: 44: PS1 = 0;
  3421  041F  1081               	bcf	1,1	;volatile
  3422                           
  3423                           ;ES_Port.c: 45: PS2 = 1;
  3424  0420  1501               	bsf	1,2	;volatile
  3425                           
  3426                           ;ES_Port.c: 47: TMR0 = 0;
  3427  0421  1283               	bcf	3,5	;RP0=0, select bank0
  3428  0422  1303               	bcf	3,6	;RP1=0, select bank0
  3429  0423  0181               	clrf	1	;volatile
  3430                           
  3431                           ;ES_Port.c: 48: T0IF = 0;
  3432  0424  110B               	bcf	11,2	;volatile
  3433                           
  3434                           ;ES_Port.c: 49: T0IE = 1;
  3435  0425  168B               	bsf	11,5	;volatile
  3436                           
  3437                           ;ES_Port.c: 51: {GIE = 1;};
  3438  0426  178B               	bsf	11,7	;volatile
  3439  0427  0008               	return
  3440  0428                     __end_of_ES_Sys_Timer_Init:	
  3441  0428                     __ptext12:	
  3442 ;; *************** function _ES_Timer_InitTimer *****************
  3443 ;; Defined at:
  3444 ;;		line 202 in file "ES_Timers.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  Num             1    wreg     unsigned char 
  3447 ;;  NewTime         2    0[BANK0 ] unsigned int 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  Num             1    3[BANK0 ] unsigned char 
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      enum E1481
  3452 ;; Registers used:
  3453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3459 ;;      Params:         0       2       0       0
  3460 ;;      Locals:         0       1       0       0
  3461 ;;      Temps:          0       1       0       0
  3462 ;;      Totals:         0       4       0       0
  3463 ;;Total ram usage:        4 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    4
  3466 ;; This function calls:
  3467 ;;		Nothing
  3468 ;; This function is called by:
  3469 ;;		_RunUARTRXService
  3470 ;;		_RunUARTTXService
  3471 ;;		_RunPACSystemService
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           
  3476                           ;psect for function _ES_Timer_InitTimer
  3477  0428                     _ES_Timer_InitTimer:	
  3478                           
  3479                           ;incstack = 0
  3480                           ; Regs used in _ES_Timer_InitTimer: [wreg-fsr0h+status,2+status,0+pclath]
  3481                           ;ES_Timer_InitTimer@Num stored from wreg
  3482  0428  1283               	bcf	3,5	;RP0=0, select bank0
  3483  0429  1303               	bcf	3,6	;RP1=0, select bank0
  3484  042A  00A3               	movwf	ES_Timer_InitTimer@Num
  3485                           
  3486                           ;ES_Timers.c: 205: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  3487                           ;ES_Timers.c: 207: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  3488                           ;ES_Timers.c: 209: (NewTime == 0) )
  3489  042B  3008               	movlw	8
  3490  042C  0223               	subwf	ES_Timer_InitTimer@Num,w
  3491  042D  1803               	skipnc
  3492  042E  0008               	return
  3493  042F  0823               	movf	ES_Timer_InitTimer@Num,w
  3494  0430  3E34               	addlw	low ((_Timer2PostFunc-__stringbase)| (0+32768))
  3495  0431  0084               	movwf	4
  3496  0432  158A  2000  118A   	fcall	stringdir
  3497  0435  3A00               	xorlw	0
  3498  0436  1903               	skipnz
  3499  0437  0008               	return
  3500  0438  0820               	movf	ES_Timer_InitTimer@NewTime,w
  3501  0439  0421               	iorwf	ES_Timer_InitTimer@NewTime+1,w
  3502  043A  1903               	btfsc	3,2
  3503  043B  0008               	return
  3504                           
  3505                           ;ES_Timers.c: 211: TMR_TimerArray[Num] = NewTime;
  3506                           
  3507                           ;ES_Timers.c: 210: return ES_Timer_ERR;
  3508                           ;	Return value of _ES_Timer_InitTimer is never used
  3509  043C  0823               	movf	ES_Timer_InitTimer@Num,w
  3510  043D  00A2               	movwf	??_ES_Timer_InitTimer
  3511  043E  0722               	addwf	??_ES_Timer_InitTimer,w
  3512  043F  3EA0               	addlw	(low (_TMR_TimerArray| 0))& (0+255)
  3513  0440  0084               	movwf	4
  3514  0441  0820               	movf	ES_Timer_InitTimer@NewTime,w
  3515  0442  1383               	bcf	3,7	;select IRP bank1
  3516  0443  0080               	movwf	0
  3517  0444  0A84               	incf	4,f
  3518  0445  0821               	movf	ES_Timer_InitTimer@NewTime+1,w
  3519  0446  0080               	movwf	0
  3520                           
  3521                           ;ES_Timers.c: 212: TMR_ActiveFlags |= BitNum2SetMask[Num];
  3522  0447  0823               	movf	ES_Timer_InitTimer@Num,w
  3523  0448  3E1C               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  3524  0449  0084               	movwf	4
  3525  044A  158A  2000         	fcall	stringdir
  3526  044C  00A2               	movwf	??_ES_Timer_InitTimer
  3527  044D  04E4               	iorwf	_TMR_ActiveFlags,f
  3528  044E  0008               	return
  3529  044F                     __end_of_ES_Timer_InitTimer:	
  3530                           ;ES_Timers.c: 213: return ES_Timer_OK;
  3531                           ;	Return value of _ES_Timer_InitTimer is never used
  3532                           
  3533  044F                     __ptext32:	
  3534 ;; *************** function _ES_PostToService *****************
  3535 ;; Defined at:
  3536 ;;		line 301 in file "ES_Framework.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;  WhichService    1    wreg     unsigned char 
  3539 ;;  TheEvent        3   19[BANK0 ] struct ES_Event_t
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  WhichService    1   27[BANK0 ] unsigned char 
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  1    wreg      unsigned char 
  3544 ;; Registers used:
  3545 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3551 ;;      Params:         0       3       0       0
  3552 ;;      Locals:         0       3       0       0
  3553 ;;      Temps:          0       3       0       0
  3554 ;;      Totals:         0       9       0       0
  3555 ;;Total ram usage:        9 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    6
  3558 ;; This function calls:
  3559 ;;		_ES_EnQueueFIFO
  3560 ;;		___bmul
  3561 ;; This function is called by:
  3562 ;;		_InitUARTRXService
  3563 ;;		_PostUARTRXService
  3564 ;;		_InitUARTTXService
  3565 ;;		_PostUARTTXService
  3566 ;;		_CheckUARTTXEvent
  3567 ;;		_InitPACSystemService
  3568 ;;		_PostPACSystemService
  3569 ;;		_InitSPIService
  3570 ;;		_PostSPIService
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           
  3575                           ;psect for function _ES_PostToService
  3576  044F                     _ES_PostToService:	
  3577                           
  3578                           ;incstack = 0
  3579 ;; using string table level
  3580                           ; Regs used in _ES_PostToService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3581                           ;ES_PostToService@WhichService stored from wreg
  3582  044F  1283               	bcf	3,5	;RP0=0, select bank0
  3583  0450  1303               	bcf	3,6	;RP1=0, select bank0
  3584  0451  00BB               	movwf	ES_PostToService@WhichService
  3585                           
  3586                           ;ES_Framework.c: 302: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  3587                           ;ES_Framework.c: 303: (ES_EnQueueFIFO(EventQueues[WhichService].pMem, TheEvent) ==
  3588                           ;ES_Framework.c: 304: ((boolean) !((boolean) 0)))) {
  3589  0452  3004               	movlw	4
  3590  0453  023B               	subwf	ES_PostToService@WhichService,w
  3591  0454  1803               	skipnc
  3592  0455  3400               	retlw	0
  3593  0456  3003               	movlw	3
  3594  0457  00B6               	movwf	??_ES_PostToService
  3595  0458  00A0               	movwf	___bmul@multiplicand
  3596  0459  083B               	movf	ES_PostToService@WhichService,w
  3597  045A  23C0               	fcall	___bmul
  3598  045B  3E10               	addlw	low ((_EventQueues-__stringbase)| (0+32768))
  3599  045C  0084               	movwf	4
  3600  045D  158A  2000  118A   	fcall	stringdir
  3601  0460  1283               	bcf	3,5	;RP0=0, select bank0
  3602  0461  1303               	bcf	3,6	;RP1=0, select bank0
  3603  0462  00B7               	movwf	??_ES_PostToService+1
  3604  0463  158A  2000  118A   	fcall	stringdir
  3605  0466  00B8               	movwf	??_ES_PostToService+2
  3606  0467  0837               	movf	??_ES_PostToService+1,w
  3607  0468  00B9               	movwf	_ES_PostToService$1340
  3608  0469  0838               	movf	??_ES_PostToService+2,w
  3609  046A  00BA               	movwf	_ES_PostToService$1340+1
  3610  046B  0839               	movf	_ES_PostToService$1340,w
  3611  046C  00A4               	movwf	ES_EnQueueFIFO@pBlock
  3612  046D  083A               	movf	_ES_PostToService$1340+1,w
  3613  046E  00A5               	movwf	ES_EnQueueFIFO@pBlock+1
  3614  046F  0833               	movf	ES_PostToService@TheEvent,w
  3615  0470  00A6               	movwf	ES_EnQueueFIFO@Event2Add
  3616  0471  0834               	movf	ES_PostToService@TheEvent+1,w
  3617  0472  00A7               	movwf	ES_EnQueueFIFO@Event2Add+1
  3618  0473  0835               	movf	ES_PostToService@TheEvent+2,w
  3619  0474  00A8               	movwf	ES_EnQueueFIFO@Event2Add+2
  3620  0475  2484  118A         	fcall	_ES_EnQueueFIFO
  3621  0477  3A01               	xorlw	1
  3622  0478  1D03               	skipz
  3623  0479  3400               	retlw	0
  3624                           
  3625                           ;ES_Framework.c: 305: Ready |= BitNum2SetMask[WhichService];
  3626  047A  1283               	bcf	3,5	;RP0=0, select bank0
  3627  047B  1303               	bcf	3,6	;RP1=0, select bank0
  3628  047C  083B               	movf	ES_PostToService@WhichService,w
  3629  047D  3E1C               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  3630  047E  0084               	movwf	4
  3631  047F  158A  2000         	fcall	stringdir
  3632  0481  00B6               	movwf	??_ES_PostToService
  3633  0482  04E2               	iorwf	_Ready,f
  3634                           
  3635                           ;ES_Framework.c: 306: return ((boolean) !((boolean) 0));
  3636  0483  3401               	retlw	1
  3637  0484                     __end_of_ES_PostToService:	
  3638                           ;ES_Framework.c: 308: return ((boolean) 0);
  3639                           
  3640                           ;ES_Framework.c: 307: } else
  3641                           
  3642  0484                     __ptext33:	
  3643 ;; *************** function _ES_EnQueueFIFO *****************
  3644 ;; Defined at:
  3645 ;;		line 83 in file "ES_Queue.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;  pBlock          2    4[BANK0 ] PTR struct ES_Event_t
  3648 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  3649 ;;  Event2Add       3    6[BANK0 ] struct ES_Event_t
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  pThisQueue      2   17[BANK0 ] PTR struct .
  3652 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  3653 ;;  InsertionPoi    1   16[BANK0 ] unsigned char 
  3654 ;;  saveCrit        1   15[BANK0 ] unsigned char 
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  1    wreg      unsigned char 
  3657 ;; Registers used:
  3658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3664 ;;      Params:         0       5       0       0
  3665 ;;      Locals:         0       4       0       0
  3666 ;;      Temps:          0       6       0       0
  3667 ;;      Totals:         0      15       0       0
  3668 ;;Total ram usage:       15 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    5
  3671 ;; This function calls:
  3672 ;;		___bmul
  3673 ;; This function is called by:
  3674 ;;		_ES_PostToService
  3675 ;;		_ES_PostAll
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           
  3680                           ;psect for function _ES_EnQueueFIFO
  3681  0484                     _ES_EnQueueFIFO:	
  3682                           
  3683                           ;ES_Queue.c: 85: unsigned char saveCrit;
  3684                           ;ES_Queue.c: 86: unsigned char InsertionPoint;
  3685                           ;ES_Queue.c: 87: pQueue_t pThisQueue;
  3686                           ;ES_Queue.c: 88: pThisQueue = (pQueue_t)pBlock;
  3687                           
  3688                           ;incstack = 0
  3689                           ; Regs used in _ES_EnQueueFIFO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3690  0484  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0485  1303               	bcf	3,6	;RP1=0, select bank0
  3692  0486  0824               	movf	ES_EnQueueFIFO@pBlock,w
  3693  0487  00B1               	movwf	ES_EnQueueFIFO@pThisQueue
  3694  0488  0825               	movf	ES_EnQueueFIFO@pBlock+1,w
  3695  0489  00B2               	movwf	ES_EnQueueFIFO@pThisQueue+1
  3696                           
  3697                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3698  048A  0831               	movf	ES_EnQueueFIFO@pThisQueue,w
  3699  048B  0084               	movwf	4
  3700  048C  1783               	bsf	3,7
  3701  048D  1C32               	btfss	ES_EnQueueFIFO@pThisQueue+1,0
  3702  048E  1383               	bcf	3,7
  3703  048F  0800               	movf	0,w
  3704  0490  00A9               	movwf	??_ES_EnQueueFIFO
  3705  0491  3002               	movlw	2
  3706  0492  0731               	addwf	ES_EnQueueFIFO@pThisQueue,w
  3707  0493  00AA               	movwf	??_ES_EnQueueFIFO+1
  3708  0494  0832               	movf	ES_EnQueueFIFO@pThisQueue+1,w
  3709  0495  1803               	skipnc
  3710  0496  3E01               	addlw	1
  3711  0497  00AB               	movwf	??_ES_EnQueueFIFO+2
  3712  0498  082A               	movf	??_ES_EnQueueFIFO+1,w
  3713  0499  0084               	movwf	4
  3714  049A  1783               	bsf	3,7
  3715  049B  1C2B               	btfss	??_ES_EnQueueFIFO+2,0
  3716  049C  1383               	bcf	3,7
  3717  049D  0800               	movf	0,w
  3718  049E  00AC               	movwf	??_ES_EnQueueFIFO+3
  3719  049F  0829               	movf	??_ES_EnQueueFIFO,w
  3720  04A0  022C               	subwf	??_ES_EnQueueFIFO+3,w
  3721  04A1  1803               	skipnc
  3722  04A2  3400               	retlw	0
  3723                           
  3724                           ;ES_Queue.c: 92: {
  3725                           ;ES_Queue.c: 93: InsertionPoint = (pThisQueue->CurrentIndex + pThisQueue->NumEntries);
  3726  04A3  3002               	movlw	2
  3727  04A4  0731               	addwf	ES_EnQueueFIFO@pThisQueue,w
  3728  04A5  00A9               	movwf	??_ES_EnQueueFIFO
  3729  04A6  0832               	movf	ES_EnQueueFIFO@pThisQueue+1,w
  3730  04A7  1803               	skipnc
  3731  04A8  3E01               	addlw	1
  3732  04A9  00AA               	movwf	??_ES_EnQueueFIFO+1
  3733  04AA  0829               	movf	??_ES_EnQueueFIFO,w
  3734  04AB  0084               	movwf	4
  3735  04AC  1783               	bsf	3,7
  3736  04AD  1C2A               	btfss	??_ES_EnQueueFIFO+1,0
  3737  04AE  1383               	bcf	3,7
  3738  04AF  0800               	movf	0,w
  3739  04B0  00AB               	movwf	??_ES_EnQueueFIFO+2
  3740  04B1  3001               	movlw	1
  3741  04B2  0731               	addwf	ES_EnQueueFIFO@pThisQueue,w
  3742  04B3  00AC               	movwf	??_ES_EnQueueFIFO+3
  3743  04B4  0832               	movf	ES_EnQueueFIFO@pThisQueue+1,w
  3744  04B5  1803               	skipnc
  3745  04B6  3E01               	addlw	1
  3746  04B7  00AD               	movwf	??_ES_EnQueueFIFO+4
  3747  04B8  082C               	movf	??_ES_EnQueueFIFO+3,w
  3748  04B9  0084               	movwf	4
  3749  04BA  1783               	bsf	3,7
  3750  04BB  1C2D               	btfss	??_ES_EnQueueFIFO+4,0
  3751  04BC  1383               	bcf	3,7
  3752  04BD  0800               	movf	0,w
  3753  04BE  072B               	addwf	??_ES_EnQueueFIFO+2,w
  3754  04BF  00AE               	movwf	??_ES_EnQueueFIFO+5
  3755  04C0  00B0               	movwf	ES_EnQueueFIFO@InsertionPoint
  3756                           
  3757                           ;ES_Queue.c: 94: if (InsertionPoint >= pThisQueue->QueueSize)
  3758  04C1  0831               	movf	ES_EnQueueFIFO@pThisQueue,w
  3759  04C2  0084               	movwf	4
  3760  04C3  1783               	bsf	3,7
  3761  04C4  1C32               	btfss	ES_EnQueueFIFO@pThisQueue+1,0
  3762  04C5  1383               	bcf	3,7
  3763  04C6  0800               	movf	0,w
  3764  04C7  0230               	subwf	ES_EnQueueFIFO@InsertionPoint,w
  3765  04C8  1C03               	skipc
  3766  04C9  2CD1               	goto	l3219
  3767                           
  3768                           ;ES_Queue.c: 95: InsertionPoint -= pThisQueue->QueueSize;
  3769  04CA  0831               	movf	ES_EnQueueFIFO@pThisQueue,w
  3770  04CB  0084               	movwf	4
  3771  04CC  1783               	bsf	3,7
  3772  04CD  1C32               	btfss	ES_EnQueueFIFO@pThisQueue+1,0
  3773  04CE  1383               	bcf	3,7
  3774  04CF  0800               	movf	0,w
  3775  04D0  02B0               	subwf	ES_EnQueueFIFO@InsertionPoint,f
  3776  04D1                     l3219:	
  3777                           ;ES_Queue.c: 98: do{ saveCrit = INTCON; GIE = 0;}while(0);
  3778                           
  3779  04D1  080B               	movf	11,w	;volatile
  3780  04D2  00A9               	movwf	??_ES_EnQueueFIFO
  3781  04D3  00AF               	movwf	ES_EnQueueFIFO@saveCrit
  3782  04D4  138B               	bcf	11,7	;volatile
  3783                           
  3784                           ;ES_Queue.c: 99: pBlock[ 1 + InsertionPoint] = Event2Add;
  3785  04D5  3003               	movlw	3
  3786  04D6  00A9               	movwf	??_ES_EnQueueFIFO
  3787  04D7  00A0               	movwf	___bmul@multiplicand
  3788  04D8  0830               	movf	ES_EnQueueFIFO@InsertionPoint,w
  3789  04D9  3E01               	addlw	1
  3790  04DA  23C0  118A         	fcall	___bmul
  3791  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3792  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3793  04DE  00AA               	movwf	??_ES_EnQueueFIFO+1
  3794  04DF  0724               	addwf	ES_EnQueueFIFO@pBlock,w
  3795  04E0  00AC               	movwf	??_ES_EnQueueFIFO+3
  3796  04E1  0825               	movf	ES_EnQueueFIFO@pBlock+1,w
  3797  04E2  00AB               	movwf	??_ES_EnQueueFIFO+2
  3798  04E3  1803               	skipnc
  3799  04E4  0AAB               	incf	??_ES_EnQueueFIFO+2,f
  3800  04E5  1BAA               	btfsc	??_ES_EnQueueFIFO+1,7
  3801  04E6  03AB               	decf	??_ES_EnQueueFIFO+2,f
  3802  04E7  082B               	movf	??_ES_EnQueueFIFO+2,w
  3803  04E8  00AD               	movwf	??_ES_EnQueueFIFO+4
  3804  04E9  082C               	movf	??_ES_EnQueueFIFO+3,w
  3805  04EA  0084               	movwf	4
  3806  04EB  1783               	bsf	3,7
  3807  04EC  1C2D               	btfss	??_ES_EnQueueFIFO+4,0
  3808  04ED  1383               	bcf	3,7
  3809  04EE  0826               	movf	ES_EnQueueFIFO@Event2Add,w
  3810  04EF  0080               	movwf	0
  3811  04F0  0A84               	incf	4,f
  3812  04F1  0827               	movf	ES_EnQueueFIFO@Event2Add+1,w
  3813  04F2  0080               	movwf	0
  3814  04F3  0A84               	incf	4,f
  3815  04F4  0828               	movf	ES_EnQueueFIFO@Event2Add+2,w
  3816  04F5  0080               	movwf	0
  3817                           
  3818                           ;ES_Queue.c: 100: pThisQueue->NumEntries++;
  3819  04F6  3001               	movlw	1
  3820  04F7  00A9               	movwf	??_ES_EnQueueFIFO
  3821  04F8  3002               	movlw	2
  3822  04F9  0731               	addwf	ES_EnQueueFIFO@pThisQueue,w
  3823  04FA  00AA               	movwf	??_ES_EnQueueFIFO+1
  3824  04FB  0832               	movf	ES_EnQueueFIFO@pThisQueue+1,w
  3825  04FC  1803               	skipnc
  3826  04FD  3E01               	addlw	1
  3827  04FE  00AB               	movwf	??_ES_EnQueueFIFO+2
  3828  04FF  082A               	movf	??_ES_EnQueueFIFO+1,w
  3829  0500  0084               	movwf	4
  3830  0501  1783               	bsf	3,7
  3831  0502  1C2B               	btfss	??_ES_EnQueueFIFO+2,0
  3832  0503  1383               	bcf	3,7
  3833  0504  0829               	movf	??_ES_EnQueueFIFO,w
  3834  0505  0780               	addwf	0,f
  3835                           
  3836                           ;ES_Queue.c: 101: {INTCON = saveCrit;};
  3837  0506  082F               	movf	ES_EnQueueFIFO@saveCrit,w
  3838  0507  008B               	movwf	11	;volatile
  3839                           
  3840                           ;ES_Queue.c: 103: return(((boolean) !((boolean) 0)));
  3841  0508  3401               	retlw	1
  3842  0509                     __end_of_ES_EnQueueFIFO:	
  3843                           ;ES_Queue.c: 105: return(((boolean) 0));
  3844                           
  3845                           ;ES_Queue.c: 104: }else
  3846                           
  3847  0509                     __ptext13:	
  3848 ;; *************** function _IsTimerPending *****************
  3849 ;; Defined at:
  3850 ;;		line 78 in file "ES_Port.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;		None
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;		None
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      unsigned char 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3864 ;;      Params:         0       0       0       0
  3865 ;;      Locals:         0       0       0       0
  3866 ;;      Temps:          0       0       0       0
  3867 ;;      Totals:         0       0       0       0
  3868 ;;Total ram usage:        0 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; Hardware stack levels required when called:    4
  3871 ;; This function calls:
  3872 ;;		Nothing
  3873 ;; This function is called by:
  3874 ;;		_ES_Run
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           
  3879                           ;psect for function _IsTimerPending
  3880  0509                     _IsTimerPending:	
  3881                           
  3882                           ;ES_Port.c: 79: if (TickCount > 0) {
  3883                           
  3884                           ;incstack = 0
  3885                           ; Regs used in _IsTimerPending: [wreg+status,2+status,0]
  3886  0509  1283               	bcf	3,5	;RP0=0, select bank0
  3887  050A  1303               	bcf	3,6	;RP1=0, select bank0
  3888  050B  0865               	movf	_TickCount,w
  3889  050C  1903               	btfsc	3,2
  3890  050D  3400               	retlw	0
  3891                           
  3892                           ;ES_Port.c: 80: TickCount--;
  3893  050E  3001               	movlw	1
  3894  050F  02E5               	subwf	_TickCount,f
  3895                           
  3896                           ;ES_Port.c: 81: return (1);
  3897  0510  3401               	retlw	1
  3898  0511                     __end_of_IsTimerPending:	
  3899                           ;ES_Port.c: 83: return (0);
  3900                           
  3901                           ;ES_Port.c: 82: } else
  3902                           
  3903                           
  3904                           	psect	jmp_tab
  3905  0845                     __pjmp_tab:	
  3906  0845                     u2767jt:	
  3907  0845  118A  2980         	ljmp	u2767jf
  3908  0847                     u2367jt:	
  3909                           ;ES_CheckEvents.c: 50: if (CheckSPIEvent()) return ((boolean) !((boolean) 0));
  3910                           
  3911  0847  158A  2ED8         	ljmp	u2367jf
  3912  0849                     u2387jt:	
  3913                           ;ES_CheckEvents.c: 51: if (CheckUARTRXEvent()) return ((boolean) !((boolean) 0));
  3914                           
  3915  0849  158A  2EE1         	ljmp	u2387jf
  3916                           
  3917                           	psect	jmp_tab__ES_Timer_RTI_Resp
  3918  084D                     __pjmp_tab__ES_Timer_RTI_Resp:	
  3919                           ;ES_Framework.c: 246: ES_Timer_RTI_Resp();
  3920                           
  3921  084D                     u2797jt:	
  3922  084D  118A  298C         	ljmp	u2797jf
  3923                           
  3924                           	psect	jmp_tab__ES_CheckUserEvents
  3925  084F                     __pjmp_tab__ES_CheckUserEvents:	
  3926                           ;ES_Framework.c: 249: ES_CheckUserEvents();
  3927                           
  3928  084F                     u2817jt:	
  3929  084F  118A  2994         	ljmp	u2817jf
  3930                           
  3931                           	psect	text3
  3932  0E41                     __ptext3:	
  3933 ;; *************** function _RunPACSystemService *****************
  3934 ;; Defined at:
  3935 ;;		line 113 in file "PACSystemService.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  ThisEvent       3   36[BANK0 ] struct ES_Event_t
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;  ReturnEvent     3   41[BANK0 ] struct ES_Event_t
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  3   36[BANK0 ] struct ES_Event_t
  3942 ;; Registers used:
  3943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3949 ;;      Params:         0       4       0       0
  3950 ;;      Locals:         0       3       0       0
  3951 ;;      Temps:          0       1       0       0
  3952 ;;      Totals:         0       8       0       0
  3953 ;;Total ram usage:        8 bytes
  3954 ;; Hardware stack levels required when called:    5
  3955 ;; This function calls:
  3956 ;;		_ES_Timer_InitTimer
  3957 ;; This function is called by:
  3958 ;;		_ES_Run
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           
  3963                           ;psect for function _RunPACSystemService
  3964  0E41                     _RunPACSystemService:	
  3965                           
  3966                           ;PACSystemService.c: 114: ES_Event ReturnEvent;
  3967                           ;PACSystemService.c: 115: ReturnEvent.EventType = ES_NO_EVENT;
  3968                           
  3969                           ;incstack = 0
  3970                           ; Regs used in _RunPACSystemService: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3971  0E41  1283               	bcf	3,5	;RP0=0, select bank0
  3972  0E42  1303               	bcf	3,6	;RP1=0, select bank0
  3973  0E43  01C9               	clrf	RunPACSystemService@ReturnEvent
  3974                           
  3975                           ;PACSystemService.c: 117: switch (ThisEvent.EventType) {
  3976  0E44  2E6C               	goto	l3659
  3977  0E45                     l3645:	
  3978                           ;PACSystemService.c: 118: case ES_INIT:
  3979                           
  3980                           
  3981                           ;PACSystemService.c: 119: ES_Timer_InitTimer(2, (76/2));
  3982  0E45  3026               	movlw	38
  3983  0E46  00A0               	movwf	ES_Timer_InitTimer@NewTime
  3984  0E47  3002               	movlw	2
  3985  0E48  01A1               	clrf	ES_Timer_InitTimer@NewTime+1
  3986  0E49  118A  2428  158A   	fcall	_ES_Timer_InitTimer
  3987                           
  3988                           ;PACSystemService.c: 120: break;
  3989  0E4C  2E79               	goto	l3661
  3990  0E4D                     l3647:	
  3991                           ;PACSystemService.c: 121: case ES_TIMEOUT:
  3992                           
  3993                           
  3994                           ;PACSystemService.c: 122: if (ThisEvent.EventParam == 2) {
  3995  0E4D  3002               	movlw	2
  3996  0E4E  1283               	bcf	3,5	;RP0=0, select bank0
  3997  0E4F  1303               	bcf	3,6	;RP1=0, select bank0
  3998  0E50  0645               	xorwf	RunPACSystemService@ThisEvent+1,w
  3999  0E51  0446               	iorwf	RunPACSystemService@ThisEvent+2,w
  4000  0E52  1D03               	btfss	3,2
  4001  0E53  2E79               	goto	l3661
  4002                           
  4003                           ;PACSystemService.c: 123: PORTC ^= 0x00000008;
  4004  0E54  3008               	movlw	8
  4005  0E55  00C8               	movwf	??_RunPACSystemService
  4006  0E56  0687               	xorwf	7,f	;volatile
  4007                           
  4008                           ;PACSystemService.c: 124: ES_Timer_InitTimer(2, (76/2));
  4009  0E57  3026               	movlw	38
  4010  0E58  00A0               	movwf	ES_Timer_InitTimer@NewTime
  4011  0E59  3002               	movlw	2
  4012  0E5A  01A1               	clrf	ES_Timer_InitTimer@NewTime+1
  4013  0E5B  118A  2428  158A   	fcall	_ES_Timer_InitTimer
  4014                           
  4015                           ;PACSystemService.c: 125: }
  4016                           ;PACSystemService.c: 126: break;
  4017  0E5E  2E79               	goto	l3661
  4018  0E5F                     l3653:	
  4019                           ;PACSystemService.c: 127: case ES_TOGGLE_LED:
  4020                           
  4021                           
  4022                           ;PACSystemService.c: 128: PORTC ^= 0x00000008;
  4023  0E5F  3008               	movlw	8
  4024  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  4025  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  4026  0E62  00C8               	movwf	??_RunPACSystemService
  4027  0E63  0687               	xorwf	7,f	;volatile
  4028                           
  4029                           ;PACSystemService.c: 129: ES_Timer_InitTimer(2, (76/2));
  4030  0E64  3026               	movlw	38
  4031  0E65  00A0               	movwf	ES_Timer_InitTimer@NewTime
  4032  0E66  3002               	movlw	2
  4033  0E67  01A1               	clrf	ES_Timer_InitTimer@NewTime+1
  4034  0E68  118A  2428  158A   	fcall	_ES_Timer_InitTimer
  4035                           
  4036                           ;PACSystemService.c: 133: }
  4037                           
  4038                           ;PACSystemService.c: 132: break;
  4039                           
  4040                           ;PACSystemService.c: 131: default:
  4041                           
  4042                           ;PACSystemService.c: 130: break;
  4043  0E6B  2E79               	goto	l3661
  4044  0E6C                     l3659:	
  4045  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  4046  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  4047  0E6E  0844               	movf	RunPACSystemService@ThisEvent,w
  4048                           
  4049                           ; Switch size 1, requested type "space"
  4050                           ; Number of cases is 3, Range of values is 2 to 15
  4051                           ; switch strategies available:
  4052                           ; Name         Instructions Cycles
  4053                           ; simple_byte           10     6 (average)
  4054                           ; direct_byte           38    10 (fixed)
  4055                           ; jumptable            263     9 (fixed)
  4056                           ;	Chosen strategy is simple_byte
  4057  0E6F  3A02               	xorlw	2	; case 2
  4058  0E70  1903               	skipnz
  4059  0E71  2E45               	goto	l3645
  4060  0E72  3A06               	xorlw	6	; case 4
  4061  0E73  1903               	skipnz
  4062  0E74  2E4D               	goto	l3647
  4063  0E75  3A0B               	xorlw	11	; case 15
  4064  0E76  1903               	skipnz
  4065  0E77  2E5F               	goto	l3653
  4066  0E78  2E79               	goto	l3661
  4067  0E79                     l3661:	
  4068                           
  4069                           ;PACSystemService.c: 135: return ReturnEvent;
  4070  0E79  1283               	bcf	3,5	;RP0=0, select bank0
  4071  0E7A  1303               	bcf	3,6	;RP1=0, select bank0
  4072  0E7B  0849               	movf	RunPACSystemService@ReturnEvent,w
  4073  0E7C  00C4               	movwf	?_RunPACSystemService
  4074  0E7D  084A               	movf	RunPACSystemService@ReturnEvent+1,w
  4075  0E7E  00C5               	movwf	?_RunPACSystemService+1
  4076  0E7F  084B               	movf	RunPACSystemService@ReturnEvent+2,w
  4077  0E80  00C6               	movwf	?_RunPACSystemService+2
  4078  0E81  3008               	movlw	high __pjmp_tab
  4079  0E82  008A               	movwf	10
  4080  0E83  0847               	movf	(?_RunPACSystemService+3)^0,w
  4081  0E84  0082               	movwf	2
  4082  0E85                     __end_of_RunPACSystemService:	
  4083                           
  4084                           	psect	text4
  4085  0D9A                     __ptext4:	
  4086 ;; *************** function _RunSPIService *****************
  4087 ;; Defined at:
  4088 ;;		line 170 in file "SPI_SM.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;  ThisEvent       3   36[BANK0 ] struct ES_Event_t
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  ReturnEvent     3   40[BANK0 ] struct ES_Event_t
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  3   36[BANK0 ] struct ES_Event_t
  4095 ;; Registers used:
  4096 ;;		wreg, status,2
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4102 ;;      Params:         0       4       0       0
  4103 ;;      Locals:         0       3       0       0
  4104 ;;      Temps:          0       0       0       0
  4105 ;;      Totals:         0       7       0       0
  4106 ;;Total ram usage:        7 bytes
  4107 ;; Hardware stack levels required when called:    4
  4108 ;; This function calls:
  4109 ;;		Nothing
  4110 ;; This function is called by:
  4111 ;;		_ES_Run
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           
  4116                           ;psect for function _RunSPIService
  4117  0D9A                     _RunSPIService:	
  4118                           
  4119                           ;SPI_SM.c: 171: ES_Event ReturnEvent;
  4120                           ;SPI_SM.c: 172: ReturnEvent.EventType = ES_NO_EVENT;
  4121                           
  4122                           ;incstack = 0
  4123                           ; Regs used in _RunSPIService: [wreg+status,2]
  4124  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  4125  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  4126  0D9C  01C8               	clrf	RunSPIService@ReturnEvent
  4127                           
  4128                           ;SPI_SM.c: 176: return ReturnEvent;
  4129  0D9D  0848               	movf	RunSPIService@ReturnEvent,w
  4130  0D9E  00C4               	movwf	?_RunSPIService
  4131  0D9F  0849               	movf	RunSPIService@ReturnEvent+1,w
  4132  0DA0  00C5               	movwf	?_RunSPIService+1
  4133  0DA1  084A               	movf	RunSPIService@ReturnEvent+2,w
  4134  0DA2  00C6               	movwf	?_RunSPIService+2
  4135  0DA3  3008               	movlw	high __pjmp_tab
  4136  0DA4  008A               	movwf	10
  4137  0DA5  0847               	movf	(?_RunSPIService+3)^0,w
  4138  0DA6  0082               	movwf	2
  4139  0DA7                     __end_of_RunSPIService:	
  4140                           
  4141                           	psect	text6
  4142  06CC                     __ptext6:	
  4143 ;; *************** function _RunUARTTXService *****************
  4144 ;; Defined at:
  4145 ;;		line 144 in file "UART_TX_SM.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;  ThisEvent       3   36[BANK0 ] struct ES_Event_t
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;  ReturnEvent     3   41[BANK0 ] struct ES_Event_t
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  3   36[BANK0 ] struct ES_Event_t
  4152 ;; Registers used:
  4153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4159 ;;      Params:         0       4       0       0
  4160 ;;      Locals:         0       3       0       0
  4161 ;;      Temps:          0       1       0       0
  4162 ;;      Totals:         0       8       0       0
  4163 ;;Total ram usage:        8 bytes
  4164 ;; Hardware stack levels required when called:    8
  4165 ;; This function calls:
  4166 ;;		_ES_Timer_InitTimer
  4167 ;;		_TX_appendXBeePacket
  4168 ;;		_TX_clearXBeePacket
  4169 ;;		_TX_getChecksum
  4170 ;;		_retrySend
  4171 ;;		_superPACAddrSet
  4172 ;; This function is called by:
  4173 ;;		_ES_Run
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           
  4178                           ;psect for function _RunUARTTXService
  4179  06CC                     _RunUARTTXService:	
  4180                           
  4181                           ;UART_TX_SM.c: 145: ES_Event ReturnEvent;
  4182                           ;UART_TX_SM.c: 146: ReturnEvent.EventType = ES_NO_EVENT;
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in _RunUARTTXService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4186  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  4187  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  4188  06CE  01C9               	clrf	RunUARTTXService@ReturnEvent
  4189                           
  4190                           ;UART_TX_SM.c: 148: switch (currentState) {
  4191  06CF  2F65               	goto	l3615
  4192  06D0                     l3549:	
  4193                           ;UART_TX_SM.c: 149: case InitPTXState:
  4194                           
  4195                           
  4196                           ;UART_TX_SM.c: 150: if (ThisEvent.EventType == ES_INIT)
  4197  06D0  3002               	movlw	2
  4198  06D1  0644               	xorwf	RunUARTTXService@ThisEvent,w
  4199  06D2  1D03               	btfss	3,2
  4200  06D3  2F73               	goto	l3617
  4201  06D4  2F49               	goto	l546
  4202  06D5                     l3553:	
  4203                           ;UART_TX_SM.c: 155: case TX_Idle:
  4204                           
  4205                           ;UART_TX_SM.c: 153: }
  4206                           ;UART_TX_SM.c: 154: break;
  4207                           
  4208                           ;UART_TX_SM.c: 151: {
  4209                           ;UART_TX_SM.c: 152: currentState = TX_Idle;
  4210                           
  4211                           
  4212                           ;UART_TX_SM.c: 156: if (ThisEvent.EventType == ES_TX_REQUEST_SEND) {
  4213  06D5  300D               	movlw	13
  4214  06D6  0644               	xorwf	RunUARTTXService@ThisEvent,w
  4215  06D7  1D03               	btfss	3,2
  4216  06D8  2F13               	goto	l3583
  4217                           
  4218                           ;UART_TX_SM.c: 158: if (superPACAddrSet()) {
  4219  06D9  27DD  118A         	fcall	_superPACAddrSet
  4220  06DB  3A00               	xorlw	0
  4221  06DC  1903               	skipnz
  4222  06DD  2F0E               	goto	l534
  4223                           
  4224                           ;UART_TX_SM.c: 160: TXError = ((boolean) 0);
  4225  06DE  1683               	bsf	3,5	;RP0=1, select bank1
  4226  06DF  1303               	bcf	3,6	;RP1=0, select bank1
  4227  06E0  01C6               	clrf	_TXError^(0+128)
  4228                           
  4229                           ;UART_TX_SM.c: 162: TX_clearXBeePacket();
  4230  06E1  2796  118A         	fcall	_TX_clearXBeePacket
  4231                           
  4232                           ;UART_TX_SM.c: 163: TX_appendXBeePacket(0x7E);
  4233  06E3  307E               	movlw	126
  4234  06E4  2782  118A         	fcall	_TX_appendXBeePacket
  4235                           
  4236                           ;UART_TX_SM.c: 164: TX_appendXBeePacket(0x00);
  4237  06E6  3000               	movlw	0
  4238  06E7  2782  118A         	fcall	_TX_appendXBeePacket
  4239                           
  4240                           ;UART_TX_SM.c: 165: TX_appendXBeePacket(0x05);
  4241  06E9  3005               	movlw	5
  4242  06EA  2782  118A         	fcall	_TX_appendXBeePacket
  4243                           
  4244                           ;UART_TX_SM.c: 166: TX_appendXBeePacket(0x01);
  4245  06EC  3001               	movlw	1
  4246  06ED  2782  118A         	fcall	_TX_appendXBeePacket
  4247                           
  4248                           ;UART_TX_SM.c: 167: TX_appendXBeePacket(0x01);
  4249  06EF  3001               	movlw	1
  4250  06F0  2782  118A         	fcall	_TX_appendXBeePacket
  4251                           
  4252                           ;UART_TX_SM.c: 168: TX_appendXBeePacket(superPACAddr[0]);
  4253  06F2  1683               	bsf	3,5	;RP0=1, select bank1
  4254  06F3  1303               	bcf	3,6	;RP1=0, select bank1
  4255  06F4  083D               	movf	UART_TX_SM@superPACAddr^(0+128),w
  4256  06F5  2782  118A         	fcall	_TX_appendXBeePacket
  4257                           
  4258                           ;UART_TX_SM.c: 169: TX_appendXBeePacket(superPACAddr[1]);
  4259  06F7  1683               	bsf	3,5	;RP0=1, select bank1
  4260  06F8  1303               	bcf	3,6	;RP1=0, select bank1
  4261  06F9  083E               	movf	(UART_TX_SM@superPACAddr^(0+128)+1),w
  4262  06FA  2782  118A         	fcall	_TX_appendXBeePacket
  4263                           
  4264                           ;UART_TX_SM.c: 170: TX_appendXBeePacket((uint8_t) ThisEvent.EventParam);
  4265  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  4266  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  4267  06FE  0845               	movf	RunUARTTXService@ThisEvent+1,w
  4268  06FF  2782  118A         	fcall	_TX_appendXBeePacket
  4269                           
  4270                           ;UART_TX_SM.c: 171: TX_appendXBeePacket(TX_getChecksum());
  4271  0701  279C  118A         	fcall	_TX_getChecksum
  4272  0703  2782  118A         	fcall	_TX_appendXBeePacket
  4273                           
  4274                           ;UART_TX_SM.c: 174: currentState = TX_SendMSG;
  4275  0705  3002               	movlw	2
  4276  0706  1283               	bcf	3,5	;RP0=0, select bank0
  4277  0707  1303               	bcf	3,6	;RP1=0, select bank0
  4278  0708  00C8               	movwf	??_RunUARTTXService
  4279  0709  00DF               	movwf	UART_TX_SM@currentState
  4280                           
  4281                           ;UART_TX_SM.c: 175: TXIE = 1;
  4282  070A  1683               	bsf	3,5	;RP0=1, select bank1
  4283  070B  1303               	bcf	3,6	;RP1=0, select bank1
  4284  070C  160C               	bsf	12,4	;volatile
  4285                           
  4286                           ;UART_TX_SM.c: 176: } else {
  4287  070D  2F73               	goto	l3617
  4288  070E                     l534:	
  4289                           
  4290                           ;UART_TX_SM.c: 177: TXError = ((boolean) !((boolean) 0));
  4291  070E  1683               	bsf	3,5	;RP0=1, select bank1
  4292  070F  1303               	bcf	3,6	;RP1=0, select bank1
  4293  0710  01C6               	clrf	_TXError^(0+128)
  4294  0711  0AC6               	incf	_TXError^(0+128),f
  4295                           
  4296                           ;UART_TX_SM.c: 178: }
  4297                           ;UART_TX_SM.c: 179: } else if (ThisEvent.EventType == ES_TX_NEW_ADDR) {
  4298  0712  2F73               	goto	l3617
  4299  0713                     l3583:	
  4300  0713  300B               	movlw	11
  4301  0714  1283               	bcf	3,5	;RP0=0, select bank0
  4302  0715  0644               	xorwf	RunUARTTXService@ThisEvent,w
  4303  0716  1D03               	btfss	3,2
  4304  0717  2F73               	goto	l3617
  4305                           
  4306                           ;UART_TX_SM.c: 180: superPACAddr[0] = (ThisEvent.EventParam >> 8) & 0xFF;
  4307  0718  0846               	movf	RunUARTTXService@ThisEvent+2,w
  4308  0719  00C8               	movwf	??_RunUARTTXService
  4309  071A  1683               	bsf	3,5	;RP0=1, select bank1
  4310  071B  1303               	bcf	3,6	;RP1=0, select bank1
  4311  071C  00BD               	movwf	UART_TX_SM@superPACAddr^(0+128)
  4312                           
  4313                           ;UART_TX_SM.c: 181: superPACAddr[1] = ThisEvent.EventParam & 0xFF;
  4314  071D  1283               	bcf	3,5	;RP0=0, select bank0
  4315  071E  1303               	bcf	3,6	;RP1=0, select bank0
  4316  071F  0845               	movf	RunUARTTXService@ThisEvent+1,w
  4317  0720  00C8               	movwf	??_RunUARTTXService
  4318  0721  1683               	bsf	3,5	;RP0=1, select bank1
  4319  0722  1303               	bcf	3,6	;RP1=0, select bank1
  4320  0723  00BE               	movwf	(UART_TX_SM@superPACAddr^(0+128)+1)
  4321                           
  4322                           ;UART_TX_SM.c: 185: }
  4323                           ;UART_TX_SM.c: 186: break;
  4324  0724  2F73               	goto	l3617
  4325  0725                     l3589:	
  4326                           ;UART_TX_SM.c: 188: case TX_SendMSG:
  4327                           
  4328                           
  4329                           ;UART_TX_SM.c: 189: if (ThisEvent.EventType == ES_TX_SEND_COMPLETE) {
  4330  0725  300C               	movlw	12
  4331  0726  1283               	bcf	3,5	;RP0=0, select bank0
  4332  0727  0644               	xorwf	RunUARTTXService@ThisEvent,w
  4333  0728  1D03               	btfss	3,2
  4334  0729  2F73               	goto	l3617
  4335                           
  4336                           ;UART_TX_SM.c: 190: currentState = TX_WaitStatus;
  4337  072A  3003               	movlw	3
  4338  072B  00C8               	movwf	??_RunUARTTXService
  4339  072C  00DF               	movwf	UART_TX_SM@currentState
  4340                           
  4341                           ;UART_TX_SM.c: 191: ES_Timer_InitTimer(1, (76 / 4));
  4342  072D  3013               	movlw	19
  4343  072E  00A0               	movwf	ES_Timer_InitTimer@NewTime
  4344  072F  3001               	movlw	1
  4345  0730  01A1               	clrf	ES_Timer_InitTimer@NewTime+1
  4346  0731  118A  2428  118A   	fcall	_ES_Timer_InitTimer
  4347                           
  4348                           ;UART_TX_SM.c: 192: }
  4349                           ;UART_TX_SM.c: 193: break;
  4350  0734  2F73               	goto	l3617
  4351  0735                     l3595:	
  4352                           ;UART_TX_SM.c: 195: case TX_WaitStatus:
  4353                           
  4354                           
  4355                           ;UART_TX_SM.c: 196: {
  4356                           ;UART_TX_SM.c: 198: if (ThisEvent.EventType == ES_TIMEOUT) {
  4357  0735  3004               	movlw	4
  4358  0736  1283               	bcf	3,5	;RP0=0, select bank0
  4359  0737  1303               	bcf	3,6	;RP1=0, select bank0
  4360  0738  0644               	xorwf	RunUARTTXService@ThisEvent,w
  4361  0739  1D03               	btfss	3,2
  4362  073A  2F44               	goto	l3603
  4363                           
  4364                           ;UART_TX_SM.c: 199: if (ThisEvent.EventParam == 1) {
  4365  073B  0345               	decf	RunUARTTXService@ThisEvent+1,w
  4366  073C  0446               	iorwf	RunUARTTXService@ThisEvent+2,w
  4367  073D  1D03               	btfss	3,2
  4368  073E  2F41               	goto	l3601
  4369  073F  30FB               	movlw	low u2637jt
  4370  0740  2FB5               	ljmp	_retrySend
  4371  0741                     u2637jf:	
  4372  0741                     l3601:	
  4373                           
  4374                           ;UART_TX_SM.c: 202: }
  4375                           ;UART_TX_SM.c: 203: currentState = TX_Idle;
  4376  0741  1283               	bcf	3,5	;RP0=0, select bank0
  4377  0742  1303               	bcf	3,6	;RP1=0, select bank0
  4378  0743  2F49               	goto	l546
  4379  0744                     l3603:	
  4380                           ;UART_TX_SM.c: 204: } else if (ThisEvent.EventType == ES_TX_STATUS) {
  4381                           
  4382  0744  300E               	movlw	14
  4383  0745  0644               	xorwf	RunUARTTXService@ThisEvent,w
  4384  0746  1903               	btfsc	3,2
  4385  0747  2F4F               	goto	l3611
  4386  0748  2F73               	goto	l3617
  4387  0749                     l546:	
  4388                           ;UART_TX_SM.c: 206: case 0:
  4389                           
  4390                           ;UART_TX_SM.c: 205: switch (ThisEvent.EventParam) {
  4391                           
  4392                           
  4393                           ;UART_TX_SM.c: 207: currentState = TX_Idle;
  4394  0749  01DF               	clrf	UART_TX_SM@currentState
  4395  074A  0ADF               	incf	UART_TX_SM@currentState,f
  4396                           
  4397                           ;UART_TX_SM.c: 208: break;
  4398  074B  2F73               	goto	l3617
  4399  074C                     l3607:	
  4400                           ;UART_TX_SM.c: 209: case 1:
  4401                           
  4402  074C  30FD               	movlw	low u2657jt
  4403  074D  2FB5               	ljmp	_retrySend
  4404  074E                     u2657jf:	
  4405                           
  4406                           ;UART_TX_SM.c: 216: }
  4407                           
  4408                           ;UART_TX_SM.c: 215: break;
  4409                           
  4410                           ;UART_TX_SM.c: 214: default:
  4411                           
  4412                           ;UART_TX_SM.c: 213: break;
  4413  074E  2F73               	goto	l3617
  4414  074F                     l3611:	
  4415                           
  4416                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4417                           ; Switch size 1, requested type "space"
  4418                           ; Number of cases is 1, Range of values is 0 to 0
  4419                           ; switch strategies available:
  4420                           ; Name         Instructions Cycles
  4421                           ; simple_byte            4     3 (average)
  4422                           ; direct_byte            9     7 (fixed)
  4423                           ; jumptable            260     6 (fixed)
  4424                           ;	Chosen strategy is simple_byte
  4425  074F  1283               	bcf	3,5	;RP0=0, select bank0
  4426  0750  1303               	bcf	3,6	;RP1=0, select bank0
  4427  0751  0846               	movf	RunUARTTXService@ThisEvent+2,w
  4428  0752  3A00               	xorlw	0	; case 0
  4429  0753  1903               	skipnz
  4430  0754  2F56               	goto	l3961
  4431  0755  2F73               	goto	l3617
  4432  0756                     l3961:	
  4433                           
  4434                           ; Switch size 1, requested type "space"
  4435                           ; Number of cases is 4, Range of values is 0 to 3
  4436                           ; switch strategies available:
  4437                           ; Name         Instructions Cycles
  4438                           ; simple_byte           13     7 (average)
  4439                           ; direct_byte           15     7 (fixed)
  4440                           ; jumptable            260     6 (fixed)
  4441                           ;	Chosen strategy is simple_byte
  4442  0756  0845               	movf	RunUARTTXService@ThisEvent+1,w
  4443  0757  3A00               	xorlw	0	; case 0
  4444  0758  1903               	skipnz
  4445  0759  2F49               	goto	l546
  4446  075A  3A01               	xorlw	1	; case 1
  4447  075B  1903               	skipnz
  4448  075C  2F4C               	goto	l3607
  4449  075D  3A03               	xorlw	3	; case 2
  4450  075E  1903               	skipnz
  4451  075F  2F4C               	goto	l3607
  4452  0760  3A01               	xorlw	1	; case 3
  4453  0761  1903               	skipnz
  4454  0762  2F4C               	goto	l3607
  4455  0763  2F73               	goto	l3617
  4456                           
  4457                           ;UART_TX_SM.c: 222: }
  4458                           
  4459                           ;UART_TX_SM.c: 217: }
  4460                           ;UART_TX_SM.c: 218: }
  4461                           ;UART_TX_SM.c: 219: break;
  4462  0764  2F73               	goto	l3617
  4463  0765                     l3615:	
  4464  0765  085F               	movf	UART_TX_SM@currentState,w
  4465                           
  4466                           ; Switch size 1, requested type "space"
  4467                           ; Number of cases is 4, Range of values is 0 to 3
  4468                           ; switch strategies available:
  4469                           ; Name         Instructions Cycles
  4470                           ; simple_byte           13     7 (average)
  4471                           ; direct_byte           15     7 (fixed)
  4472                           ; jumptable            260     6 (fixed)
  4473                           ;	Chosen strategy is simple_byte
  4474  0766  3A00               	xorlw	0	; case 0
  4475  0767  1903               	skipnz
  4476  0768  2ED0               	goto	l3549
  4477  0769  3A01               	xorlw	1	; case 1
  4478  076A  1903               	skipnz
  4479  076B  2ED5               	goto	l3553
  4480  076C  3A03               	xorlw	3	; case 2
  4481  076D  1903               	skipnz
  4482  076E  2F25               	goto	l3589
  4483  076F  3A01               	xorlw	1	; case 3
  4484  0770  1903               	skipnz
  4485  0771  2F35               	goto	l3595
  4486  0772  2F73               	goto	l3617
  4487  0773                     l3617:	
  4488                           
  4489                           ;UART_TX_SM.c: 225: if (currentState == TX_Idle) {
  4490  0773  1283               	bcf	3,5	;RP0=0, select bank0
  4491  0774  1303               	bcf	3,6	;RP1=0, select bank0
  4492  0775  0B5F               	decfsz	UART_TX_SM@currentState,w
  4493  0776  2F78               	goto	l3621
  4494                           
  4495                           ;UART_TX_SM.c: 226: index = 0;
  4496  0777  01E7               	clrf	_index
  4497  0778                     l3621:	
  4498                           
  4499                           ;UART_TX_SM.c: 227: }
  4500                           ;UART_TX_SM.c: 229: return ReturnEvent;
  4501  0778  0849               	movf	RunUARTTXService@ReturnEvent,w
  4502  0779  00C4               	movwf	?_RunUARTTXService
  4503  077A  084A               	movf	RunUARTTXService@ReturnEvent+1,w
  4504  077B  00C5               	movwf	?_RunUARTTXService+1
  4505  077C  084B               	movf	RunUARTTXService@ReturnEvent+2,w
  4506  077D  00C6               	movwf	?_RunUARTTXService+2
  4507  077E  3008               	movlw	high __pjmp_tab
  4508  077F  008A               	movwf	10
  4509  0780  0847               	movf	(?_RunUARTTXService+3)^0,w
  4510  0781  0082               	movwf	2
  4511  0782                     __end_of_RunUARTTXService:	
  4512  0782                     __ptext11:	
  4513 ;; *************** function _TX_appendXBeePacket *****************
  4514 ;; Defined at:
  4515 ;;		line 245 in file "UART_TX_SM.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  newByte         1    wreg     unsigned char 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  newByte         1    1[BANK0 ] unsigned char 
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  1    wreg      unsigned char 
  4522 ;; Registers used:
  4523 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4529 ;;      Params:         0       0       0       0
  4530 ;;      Locals:         0       1       0       0
  4531 ;;      Temps:          0       1       0       0
  4532 ;;      Totals:         0       2       0       0
  4533 ;;Total ram usage:        2 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    4
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_RunUARTTXService
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           
  4544                           ;psect for function _TX_appendXBeePacket
  4545  0782                     _TX_appendXBeePacket:	
  4546                           
  4547                           ;incstack = 0
  4548                           ; Regs used in _TX_appendXBeePacket: [wreg-fsr0h+status,2+status,0]
  4549                           ;TX_appendXBeePacket@newByte stored from wreg
  4550  0782  1283               	bcf	3,5	;RP0=0, select bank0
  4551  0783  1303               	bcf	3,6	;RP1=0, select bank0
  4552  0784  00A1               	movwf	TX_appendXBeePacket@newByte
  4553                           
  4554                           ;UART_TX_SM.c: 246: if ((length == 10) || (currentState != TX_Idle)) {
  4555  0785  300A               	movlw	10
  4556  0786  0668               	xorwf	_length,w
  4557  0787  1D03               	btfss	3,2
  4558  0788  0B5F               	decfsz	UART_TX_SM@currentState,w
  4559  0789  0008               	return
  4560                           
  4561                           ;UART_TX_SM.c: 249: XBeePacket[length++] = newByte;
  4562                           
  4563                           ;UART_TX_SM.c: 248: } else {
  4564                           
  4565                           ;UART_TX_SM.c: 247: return ((boolean) 0);
  4566                           ;	Return value of _TX_appendXBeePacket is never used
  4567  078A  0821               	movf	TX_appendXBeePacket@newByte,w
  4568  078B  00A0               	movwf	??_TX_appendXBeePacket
  4569  078C  0868               	movf	_length,w
  4570  078D  3EB0               	addlw	(low (_XBeePacket| 0))& (0+255)
  4571  078E  0084               	movwf	4
  4572  078F  0820               	movf	??_TX_appendXBeePacket,w
  4573  0790  1383               	bcf	3,7	;select IRP bank1
  4574  0791  0080               	movwf	0
  4575  0792  3001               	movlw	1
  4576  0793  00A0               	movwf	??_TX_appendXBeePacket
  4577  0794  07E8               	addwf	_length,f
  4578                           
  4579                           ;UART_TX_SM.c: 250: return ((boolean) !((boolean) 0));
  4580                           ;	Return value of _TX_appendXBeePacket is never used
  4581  0795  0008               	return
  4582  0796                     __end_of_TX_appendXBeePacket:	
  4583  0796                     __ptext10:	
  4584 ;; *************** function _TX_clearXBeePacket *****************
  4585 ;; Defined at:
  4586 ;;		line 236 in file "UART_TX_SM.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;		None
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;		None
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  1    wreg      unsigned char 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4600 ;;      Params:         0       0       0       0
  4601 ;;      Locals:         0       0       0       0
  4602 ;;      Temps:          0       0       0       0
  4603 ;;      Totals:         0       0       0       0
  4604 ;;Total ram usage:        0 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    4
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_RunUARTTXService
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           
  4615                           ;psect for function _TX_clearXBeePacket
  4616  0796                     _TX_clearXBeePacket:	
  4617                           
  4618                           ;UART_TX_SM.c: 237: if (currentState != TX_Idle) {
  4619                           
  4620                           ;incstack = 0
  4621                           ; Regs used in _TX_clearXBeePacket: [wreg+status,2+status,0]
  4622  0796  1283               	bcf	3,5	;RP0=0, select bank0
  4623  0797  1303               	bcf	3,6	;RP1=0, select bank0
  4624  0798  0B5F               	decfsz	UART_TX_SM@currentState,w
  4625  0799  0008               	return
  4626                           
  4627                           ;UART_TX_SM.c: 240: length = 0;
  4628                           
  4629                           ;UART_TX_SM.c: 239: } else {
  4630                           
  4631                           ;UART_TX_SM.c: 238: return ((boolean) 0);
  4632                           ;	Return value of _TX_clearXBeePacket is never used
  4633  079A  01E8               	clrf	_length
  4634                           
  4635                           ;UART_TX_SM.c: 241: return ((boolean) !((boolean) 0));
  4636                           ;	Return value of _TX_clearXBeePacket is never used
  4637  079B  0008               	return
  4638  079C                     __end_of_TX_clearXBeePacket:	
  4639  079C                     __ptext9:	
  4640 ;; *************** function _TX_getChecksum *****************
  4641 ;; Defined at:
  4642 ;;		line 254 in file "UART_TX_SM.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;		None
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  i               1    2[BANK0 ] unsigned char 
  4647 ;;  chk             1    1[BANK0 ] unsigned char 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      unsigned char 
  4650 ;; Registers used:
  4651 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4657 ;;      Params:         0       0       0       0
  4658 ;;      Locals:         0       2       0       0
  4659 ;;      Temps:          0       1       0       0
  4660 ;;      Totals:         0       3       0       0
  4661 ;;Total ram usage:        3 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    4
  4664 ;; This function calls:
  4665 ;;		Nothing
  4666 ;; This function is called by:
  4667 ;;		_RunUARTTXService
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           
  4672                           ;psect for function _TX_getChecksum
  4673  079C                     _TX_getChecksum:	
  4674                           
  4675                           ;UART_TX_SM.c: 255: uint8_t chk = 0;
  4676                           
  4677                           ;incstack = 0
  4678                           ; Regs used in _TX_getChecksum: [wreg-fsr0h+status,2+status,0]
  4679  079C  1283               	bcf	3,5	;RP0=0, select bank0
  4680  079D  3003               	movlw	3
  4681  079E  1303               	bcf	3,6	;RP1=0, select bank0
  4682  079F  01A1               	clrf	TX_getChecksum@chk
  4683                           
  4684                           ;UART_TX_SM.c: 256: uint8_t i;
  4685                           ;UART_TX_SM.c: 258: for (i = 3; i < length; i++) {
  4686  07A0  00A0               	movwf	??_TX_getChecksum
  4687  07A1  00A2               	movwf	TX_getChecksum@i
  4688  07A2                     l2445:	
  4689  07A2  0868               	movf	_length,w
  4690  07A3  0222               	subwf	TX_getChecksum@i,w
  4691  07A4  1803               	btfsc	3,0
  4692  07A5  2FB1               	goto	l2447
  4693                           
  4694                           ;UART_TX_SM.c: 259: chk += XBeePacket[i];
  4695  07A6  0822               	movf	TX_getChecksum@i,w
  4696  07A7  3EB0               	addlw	(low (_XBeePacket| 0))& (0+255)
  4697  07A8  0084               	movwf	4
  4698  07A9  1383               	bcf	3,7	;select IRP bank1
  4699  07AA  0800               	movf	0,w
  4700  07AB  00A0               	movwf	??_TX_getChecksum
  4701  07AC  07A1               	addwf	TX_getChecksum@chk,f
  4702  07AD  3001               	movlw	1
  4703  07AE  00A0               	movwf	??_TX_getChecksum
  4704  07AF  07A2               	addwf	TX_getChecksum@i,f
  4705  07B0  2FA2               	goto	l2445
  4706  07B1                     l2447:	
  4707                           
  4708                           ;UART_TX_SM.c: 260: }
  4709                           ;UART_TX_SM.c: 262: return 0xFF - chk;
  4710  07B1  0321               	decf	TX_getChecksum@chk,w
  4711  07B2  3AFF               	xorlw	255
  4712  07B3  3EFF               	addlw	255
  4713  07B4  0008               	return
  4714  07B5                     __end_of_TX_getChecksum:	
  4715  07B5                     __ptext8:	
  4716 ;; *************** function _retrySend *****************
  4717 ;; Defined at:
  4718 ;;		line 303 in file "UART_TX_SM.c"
  4719 ;; Parameters:    Size  Location     Type
  4720 ;;		None
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  LEDEvent        3   33[BANK0 ] struct ES_Event_t
  4723 ;; Return value:  Size  Location     Type
  4724 ;;		None               void
  4725 ;; Registers used:
  4726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4732 ;;      Params:         0       1       0       0
  4733 ;;      Locals:         0       3       0       0
  4734 ;;      Temps:          0       1       0       0
  4735 ;;      Totals:         0       5       0       0
  4736 ;;Total ram usage:        5 bytes
  4737 ;; Hardware stack levels required when called:    8
  4738 ;; This function calls:
  4739 ;;		_PostPACSystemService
  4740 ;; This function is called by:
  4741 ;;		_RunUARTTXService
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           
  4746                           ;psect for function _retrySend
  4747  07B5                     _retrySend:	
  4748                           
  4749                           ;incstack = 0
  4750                           ; Regs used in _retrySend: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4751  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  4752  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  4753  07B7  00BF               	movwf	?_retrySend^0
  4754                           
  4755                           ;UART_TX_SM.c: 304: ES_Event LEDEvent;
  4756                           ;UART_TX_SM.c: 305: LEDEvent.EventType = ES_TOGGLE_LED;
  4757  07B8  300F               	movlw	15
  4758  07B9  00C0               	movwf	??_retrySend
  4759  07BA  00C1               	movwf	retrySend@LEDEvent
  4760                           
  4761                           ;UART_TX_SM.c: 306: LEDEvent.EventParam = TX_ERR_TIMEOUT;
  4762  07BB  01C2               	clrf	retrySend@LEDEvent+1
  4763  07BC  01C3               	clrf	retrySend@LEDEvent+2
  4764                           
  4765                           ;UART_TX_SM.c: 307: PostPACSystemService(LEDEvent);
  4766  07BD  00BC               	movwf	PostPACSystemService@ThisEvent
  4767  07BE  0842               	movf	retrySend@LEDEvent+1,w
  4768  07BF  00BD               	movwf	PostPACSystemService@ThisEvent+1
  4769  07C0  0843               	movf	retrySend@LEDEvent+2,w
  4770  07C1  00BE               	movwf	PostPACSystemService@ThisEvent+2
  4771  07C2  27D2               	fcall	_PostPACSystemService
  4772                           
  4773                           ;UART_TX_SM.c: 310: index = 0;
  4774  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  4775  07C4  3002               	movlw	2
  4776  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  4777  07C6  01E7               	clrf	_index
  4778                           
  4779                           ;UART_TX_SM.c: 311: currentState = TX_SendMSG;
  4780  07C7  00C0               	movwf	??_retrySend
  4781  07C8  00DF               	movwf	UART_TX_SM@currentState
  4782                           
  4783                           ;UART_TX_SM.c: 312: TXIE = 1;
  4784  07C9  1683               	bsf	3,5	;RP0=1, select bank1
  4785  07CA  1303               	bcf	3,6	;RP1=0, select bank1
  4786  07CB  160C               	bsf	12,4	;volatile
  4787  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  4788  07CD  3007               	movlw	high __pjmp_tab__retrySend
  4789  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  4790  07CF  008A               	movwf	10
  4791  07D0  083F               	movf	?_retrySend^0,w
  4792  07D1  0082               	movwf	2
  4793  07D2                     __end_of_retrySend:	
  4794  07D2                     __ptext17:	
  4795 ;; *************** function _PostPACSystemService *****************
  4796 ;; Defined at:
  4797 ;;		line 92 in file "PACSystemService.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;  ThisEvent       3   28[BANK0 ] struct ES_Event_t
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;		None
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      unsigned char 
  4804 ;; Registers used:
  4805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4811 ;;      Params:         0       3       0       0
  4812 ;;      Locals:         0       0       0       0
  4813 ;;      Temps:          0       0       0       0
  4814 ;;      Totals:         0       3       0       0
  4815 ;;Total ram usage:        3 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    7
  4818 ;; This function calls:
  4819 ;;		_ES_PostToService
  4820 ;; This function is called by:
  4821 ;;		_retrySend
  4822 ;;		_ES_Timer_RTI_Resp
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           
  4827                           ;psect for function _PostPACSystemService
  4828  07D2                     _PostPACSystemService:	
  4829                           
  4830                           ;PACSystemService.c: 93: return ES_PostToService(MyPriority, ThisEvent);
  4831                           ;	Return value of _PostPACSystemService is never used
  4832                           
  4833                           ;incstack = 0
  4834                           ; Regs used in _PostPACSystemService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  4835  07D2  1283               	bcf	3,5	;RP0=0, select bank0
  4836  07D3  1303               	bcf	3,6	;RP1=0, select bank0
  4837  07D4  083C               	movf	PostPACSystemService@ThisEvent,w
  4838  07D5  00B3               	movwf	ES_PostToService@TheEvent
  4839  07D6  083D               	movf	PostPACSystemService@ThisEvent+1,w
  4840  07D7  00B4               	movwf	ES_PostToService@TheEvent+1
  4841  07D8  083E               	movf	PostPACSystemService@ThisEvent+2,w
  4842  07D9  00B5               	movwf	ES_PostToService@TheEvent+2
  4843  07DA  085B               	movf	PACSystemService@MyPriority,w
  4844  07DB  118A  2C4F         	ljmp	_ES_PostToService
  4845  07DD                     __end_of_PostPACSystemService:	
  4846  07DD                     __ptext7:	
  4847 ;; *************** function _superPACAddrSet *****************
  4848 ;; Defined at:
  4849 ;;		line 299 in file "UART_TX_SM.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;		None
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;		None
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  1    wreg      unsigned char 
  4856 ;; Registers used:
  4857 ;;		wreg, status,2, status,0
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4863 ;;      Params:         0       0       0       0
  4864 ;;      Locals:         0       2       0       0
  4865 ;;      Temps:          0       4       0       0
  4866 ;;      Totals:         0       6       0       0
  4867 ;;Total ram usage:        6 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:    4
  4870 ;; This function calls:
  4871 ;;		Nothing
  4872 ;; This function is called by:
  4873 ;;		_RunUARTTXService
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           
  4878                           ;psect for function _superPACAddrSet
  4879  07DD                     _superPACAddrSet:	
  4880                           
  4881                           ;UART_TX_SM.c: 300: return (superPACAddr[0] | superPACAddr[1] == 0) ? ((boolean) 0) : ((
      +                          boolean) !((boolean) 0));
  4882                           
  4883                           ;incstack = 0
  4884                           ; Regs used in _superPACAddrSet: [wreg+status,2+status,0]
  4885  07DD  1683               	bsf	3,5	;RP0=1, select bank1
  4886  07DE  1303               	bcf	3,6	;RP1=0, select bank1
  4887  07DF  083E               	movf	(UART_TX_SM@superPACAddr^(0+128)+1),w
  4888  07E0  1D03               	btfss	3,2
  4889  07E1  2FE4               	goto	u1350
  4890  07E2  3001               	movlw	1
  4891  07E3  2FE5               	goto	u1360
  4892  07E4                     u1350:	
  4893  07E4  3000               	movlw	0
  4894  07E5                     u1360:	
  4895  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  4896  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  4897  07E7  00A0               	movwf	??_superPACAddrSet
  4898  07E8  01A1               	clrf	??_superPACAddrSet+1
  4899  07E9  1683               	bsf	3,5	;RP0=1, select bank1
  4900  07EA  1303               	bcf	3,6	;RP1=0, select bank1
  4901  07EB  043D               	iorwf	UART_TX_SM@superPACAddr^(0+128),w
  4902  07EC  1283               	bcf	3,5	;RP0=0, select bank0
  4903  07ED  1303               	bcf	3,6	;RP1=0, select bank0
  4904  07EE  00A2               	movwf	??_superPACAddrSet+2
  4905  07EF  0821               	movf	??_superPACAddrSet+1,w
  4906  07F0  00A3               	movwf	??_superPACAddrSet+3
  4907  07F1  0422               	iorwf	??_superPACAddrSet+2,w
  4908  07F2  1D03               	btfss	3,2
  4909  07F3  2FF7               	goto	l2409
  4910  07F4  3001               	movlw	1
  4911  07F5  00A4               	movwf	_superPACAddrSet$696
  4912  07F6  2FF8               	goto	L3
  4913  07F7                     l2409:	
  4914  07F7  01A4               	clrf	_superPACAddrSet$696
  4915  07F8                     L3:	
  4916  07F8  01A5               	clrf	_superPACAddrSet$696+1
  4917  07F9  0824               	movf	_superPACAddrSet$696,w
  4918  07FA  0008               	return
  4919  07FB                     __end_of_superPACAddrSet:	
  4920                           
  4921                           	psect	jmp_tab__retrySend
  4922  07FB                     __pjmp_tab__retrySend:	
  4923                           ;UART_TX_SM.c: 201: retrySend();
  4924                           
  4925  07FB                     u2637jt:	
  4926  07FB  118A  2F41         	ljmp	u2637jf
  4927  07FD                     u2657jt:	
  4928                           ;UART_TX_SM.c: 210: case 2:
  4929                           ;UART_TX_SM.c: 211: case 3:
  4930                           ;UART_TX_SM.c: 212: retrySend();
  4931                           
  4932  07FD  118A  2F4E         	ljmp	u2657jf
  4933                           
  4934                           	psect	text14
  4935  0036                     __ptext14:	
  4936 ;; *************** function _ES_Timer_RTI_Resp *****************
  4937 ;; Defined at:
  4938 ;;		line 256 in file "ES_Timers.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;		None
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;		None
  4943 ;; Return value:  Size  Location     Type
  4944 ;;		None               void
  4945 ;; Registers used:
  4946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4947 ;; Tracked objects:
  4948 ;;		On entry : 0/0
  4949 ;;		On exit  : 0/0
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4952 ;;      Params:         0       1       0       0
  4953 ;;      Locals:         0       0       0       0
  4954 ;;      Temps:          0       3       0       0
  4955 ;;      Totals:         0       4       0       0
  4956 ;;Total ram usage:        4 bytes
  4957 ;; Hardware stack levels required when called:    8
  4958 ;; This function calls:
  4959 ;;		Absolute function
  4960 ;;		_ES_GetMSBitSet
  4961 ;;		_PostPACSystemService
  4962 ;;		_PostUARTRXService
  4963 ;;		_PostUARTTXService
  4964 ;; This function is called by:
  4965 ;;		_ES_Run
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           
  4970                           ;psect for function _ES_Timer_RTI_Resp
  4971  0036                     _ES_Timer_RTI_Resp:	
  4972                           
  4973                           ;incstack = 0
  4974 ;; using string table level
  4975                           ; Regs used in _ES_Timer_RTI_Resp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4976  0036  1283               	bcf	3,5	;RP0=0, select bank0
  4977  0037  1303               	bcf	3,6	;RP1=0, select bank0
  4978  0038  00BF               	movwf	?_ES_Timer_RTI_Resp^0
  4979                           
  4980                           ;ES_Timers.c: 257: static Tflag_t NeedsProcessing;
  4981                           ;ES_Timers.c: 258: static uint8_t NextTimer2Process;
  4982                           ;ES_Timers.c: 259: static ES_Event NewEvent;
  4983                           ;ES_Timers.c: 261: ++time;
  4984  0039  3001               	movlw	1
  4985  003A  1683               	bsf	3,5	;RP0=1, select bank1
  4986  003B  1303               	bcf	3,6	;RP1=0, select bank1
  4987  003C  07C1               	addwf	_time^(0+128),f	;volatile
  4988  003D  1803               	skipnc
  4989  003E  0AC2               	incf	(_time+1)^(0+128),f	;volatile
  4990  003F  3000               	movlw	0
  4991  0040  07C2               	addwf	(_time+1)^(0+128),f	;volatile
  4992                           
  4993                           ;ES_Timers.c: 262: if (TMR_ActiveFlags != 0) {
  4994  0041  1283               	bcf	3,5	;RP0=0, select bank0
  4995  0042  1303               	bcf	3,6	;RP1=0, select bank0
  4996  0043  0864               	movf	_TMR_ActiveFlags,w
  4997  0044  1903               	btfsc	3,2
  4998  0045  28A8               	goto	l263
  4999                           
  5000                           ;ES_Timers.c: 264: NeedsProcessing = TMR_ActiveFlags;
  5001  0046  0864               	movf	_TMR_ActiveFlags,w
  5002  0047  00C0               	movwf	??_ES_Timer_RTI_Resp
  5003  0048  00D9               	movwf	ES_Timer_RTI_Resp@NeedsProcessing
  5004  0049                     l3409:	
  5005                           ;ES_Timers.c: 265: do {
  5006                           
  5007                           
  5008                           ;ES_Timers.c: 267: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  5009  0049  0859               	movf	ES_Timer_RTI_Resp@NeedsProcessing,w
  5010  004A  20AC  118A         	fcall	_ES_GetMSBitSet
  5011  004C  1283               	bcf	3,5	;RP0=0, select bank0
  5012  004D  1303               	bcf	3,6	;RP1=0, select bank0
  5013  004E  00C0               	movwf	??_ES_Timer_RTI_Resp
  5014  004F  00DA               	movwf	ES_Timer_RTI_Resp@NextTimer2Process
  5015                           
  5016                           ;ES_Timers.c: 269: if (--TMR_TimerArray[NextTimer2Process] == 0) {
  5017  0050  00C0               	movwf	??_ES_Timer_RTI_Resp
  5018  0051  0740               	addwf	??_ES_Timer_RTI_Resp,w
  5019  0052  3EA0               	addlw	(low (_TMR_TimerArray| 0))& (0+255)
  5020  0053  0084               	movwf	4
  5021  0054  3001               	movlw	1
  5022  0055  1383               	bcf	3,7	;select IRP bank1
  5023  0056  0280               	subwf	0,f
  5024  0057  0F84               	incfsz	4,f
  5025  0058  3000               	movlw	0
  5026  0059  1C03               	skipc
  5027  005A  0380               	decf	0,f
  5028  005B  0280               	subwf	0,f
  5029  005C  0384               	decf	4,f
  5030  005D  0800               	movf	0,w
  5031  005E  00C1               	movwf	??_ES_Timer_RTI_Resp+1
  5032  005F  0A84               	incf	4,f
  5033  0060  0800               	movf	0,w
  5034  0061  00C2               	movwf	??_ES_Timer_RTI_Resp+2
  5035  0062  0441               	iorwf	??_ES_Timer_RTI_Resp+1,w
  5036  0063  1D03               	btfss	3,2
  5037  0064  289C               	goto	l3419
  5038                           
  5039                           ;ES_Timers.c: 270: NewEvent.EventType = ES_TIMEOUT;
  5040  0065  3004               	movlw	4
  5041  0066  00C0               	movwf	??_ES_Timer_RTI_Resp
  5042  0067  1683               	bsf	3,5	;RP0=1, select bank1
  5043  0068  1303               	bcf	3,6	;RP1=0, select bank1
  5044  0069  00BA               	movwf	ES_Timer_RTI_Resp@NewEvent^(0+128)
  5045                           
  5046                           ;ES_Timers.c: 271: NewEvent.EventParam = NextTimer2Process;
  5047  006A  1283               	bcf	3,5	;RP0=0, select bank0
  5048  006B  1303               	bcf	3,6	;RP1=0, select bank0
  5049  006C  085A               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  5050  006D  00C0               	movwf	??_ES_Timer_RTI_Resp
  5051  006E  01C1               	clrf	??_ES_Timer_RTI_Resp+1
  5052  006F  1683               	bsf	3,5	;RP0=1, select bank1
  5053  0070  1303               	bcf	3,6	;RP1=0, select bank1
  5054  0071  00BB               	movwf	(ES_Timer_RTI_Resp@NewEvent^(0+128)+1)
  5055  0072  1283               	bcf	3,5	;RP0=0, select bank0
  5056  0073  1303               	bcf	3,6	;RP1=0, select bank0
  5057  0074  0841               	movf	??_ES_Timer_RTI_Resp+1,w
  5058  0075  1683               	bsf	3,5	;RP0=1, select bank1
  5059  0076  1303               	bcf	3,6	;RP1=0, select bank1
  5060  0077  00BC               	movwf	((ES_Timer_RTI_Resp@NewEvent+1)^(0+128)+1)
  5061                           
  5062                           ;ES_Timers.c: 273: Timer2PostFunc[NextTimer2Process](NewEvent);
  5063  0078  083A               	movf	ES_Timer_RTI_Resp@NewEvent^(0+128),w
  5064  0079  1283               	bcf	3,5	;RP0=0, select bank0
  5065  007A  1303               	bcf	3,6	;RP1=0, select bank0
  5066  007B  00BC               	movwf	PostPACSystemService@ThisEvent
  5067  007C  1683               	bsf	3,5	;RP0=1, select bank1
  5068  007D  1303               	bcf	3,6	;RP1=0, select bank1
  5069  007E  083B               	movf	(ES_Timer_RTI_Resp@NewEvent+1)^(0+128),w
  5070  007F  1283               	bcf	3,5	;RP0=0, select bank0
  5071  0080  1303               	bcf	3,6	;RP1=0, select bank0
  5072  0081  00BD               	movwf	PostPACSystemService@ThisEvent+1
  5073  0082  1683               	bsf	3,5	;RP0=1, select bank1
  5074  0083  1303               	bcf	3,6	;RP1=0, select bank1
  5075  0084  083C               	movf	(ES_Timer_RTI_Resp@NewEvent+2)^(0+128),w
  5076  0085  1283               	bcf	3,5	;RP0=0, select bank0
  5077  0086  1303               	bcf	3,6	;RP1=0, select bank0
  5078  0087  00BE               	movwf	PostPACSystemService@ThisEvent+2
  5079  0088  085A               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  5080  0089  3E34               	addlw	low ((_Timer2PostFunc-__stringbase)| (0+32768))
  5081  008A  0084               	movwf	4
  5082  008B  158A  2000  118A   	fcall	stringdir
  5083  008E  118A  2100  118A   	fcall	fptable
  5084                           
  5085                           ;ES_Timers.c: 275: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  5086  0091  1283               	bcf	3,5	;RP0=0, select bank0
  5087  0092  1303               	bcf	3,6	;RP1=0, select bank0
  5088  0093  085A               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  5089  0094  3E1C               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  5090  0095  0084               	movwf	4
  5091  0096  158A  2000  118A   	fcall	stringdir
  5092  0099  3AFF               	xorlw	255
  5093  009A  00C0               	movwf	??_ES_Timer_RTI_Resp
  5094  009B  05E4               	andwf	_TMR_ActiveFlags,f
  5095  009C                     l3419:	
  5096                           
  5097                           ;ES_Timers.c: 276: }
  5098                           ;ES_Timers.c: 278: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  5099  009C  085A               	movf	ES_Timer_RTI_Resp@NextTimer2Process,w
  5100  009D  3E1C               	addlw	low ((_BitNum2SetMask-__stringbase)| (0+32768))
  5101  009E  0084               	movwf	4
  5102  009F  158A  2000  118A   	fcall	stringdir
  5103  00A2  3AFF               	xorlw	255
  5104  00A3  00C0               	movwf	??_ES_Timer_RTI_Resp
  5105  00A4  05D9               	andwf	ES_Timer_RTI_Resp@NeedsProcessing,f
  5106                           
  5107                           ;ES_Timers.c: 279: } while (NeedsProcessing != 0);
  5108  00A5  0859               	movf	ES_Timer_RTI_Resp@NeedsProcessing,w
  5109  00A6  1D03               	btfss	3,2
  5110  00A7  2849               	goto	l3409
  5111  00A8                     l263:	
  5112  00A8  3008               	movlw	high __pjmp_tab__ES_Timer_RTI_Resp
  5113  00A9  008A               	movwf	10
  5114  00AA  083F               	movf	?_ES_Timer_RTI_Resp^0,w
  5115  00AB  0082               	movwf	2
  5116  00AC                     __end_of_ES_Timer_RTI_Resp:	
  5117  00AC                     __ptext18:	
  5118 ;; *************** function _ES_GetMSBitSet *****************
  5119 ;; Defined at:
  5120 ;;		line 78 in file "ES_LookupTables.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;  Val2Check       1    wreg     unsigned char 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  Val2Check       1    3[BANK0 ] unsigned char 
  5125 ;;  LoopCntr        1    6[BANK0 ] char 
  5126 ;;  Nybble2Test     1    5[BANK0 ] unsigned char 
  5127 ;;  ReturnVal       1    4[BANK0 ] unsigned char 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      unsigned char 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5137 ;;      Params:         0       0       0       0
  5138 ;;      Locals:         0       4       0       0
  5139 ;;      Temps:          0       3       0       0
  5140 ;;      Totals:         0       7       0       0
  5141 ;;Total ram usage:        7 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    4
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_ES_Run
  5148 ;;		_ES_Timer_RTI_Resp
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           
  5153                           ;psect for function _ES_GetMSBitSet
  5154  00AC                     _ES_GetMSBitSet:	
  5155                           
  5156                           ;incstack = 0
  5157                           ; Regs used in _ES_GetMSBitSet: [wreg-fsr0h+status,2+status,0+pclath]
  5158                           ;ES_GetMSBitSet@Val2Check stored from wreg
  5159  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  5160  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  5161  00AE  00A3               	movwf	ES_GetMSBitSet@Val2Check
  5162                           
  5163                           ;ES_LookupTables.c: 80: int8_t LoopCntr;
  5164                           ;ES_LookupTables.c: 81: uint8_t Nybble2Test;
  5165                           ;ES_LookupTables.c: 82: uint8_t ReturnVal = 128;
  5166  00AF  3080               	movlw	128
  5167  00B0  00A0               	movwf	??_ES_GetMSBitSet
  5168  00B1  00A4               	movwf	ES_GetMSBitSet@ReturnVal
  5169                           
  5170                           ;ES_LookupTables.c: 85: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  5171  00B2  01A6               	clrf	ES_GetMSBitSet@LoopCntr
  5172  00B3  0AA6               	incf	ES_GetMSBitSet@LoopCntr,f
  5173                           
  5174                           ;ES_LookupTables.c: 86: LoopCntr >= 0; LoopCntr--) {
  5175  00B4  1BA6               	btfsc	ES_GetMSBitSet@LoopCntr,7
  5176  00B5  28E8               	goto	l2361
  5177  00B6                     l2353:	
  5178                           
  5179                           ;ES_LookupTables.c: 88: Nybble2Test = (uint8_t)
  5180                           ;ES_LookupTables.c: 89: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  5181                           ;ES_LookupTables.c: 90: 0x0F);
  5182  00B6  0823               	movf	ES_GetMSBitSet@Val2Check,w
  5183  00B7  00A0               	movwf	??_ES_GetMSBitSet
  5184  00B8  0826               	movf	ES_GetMSBitSet@LoopCntr,w
  5185  00B9  00A1               	movwf	??_ES_GetMSBitSet+1
  5186  00BA  3001               	movlw	1
  5187  00BB  1003               	clrc
  5188  00BC                     L4:	
  5189  00BC  0DA1               	rlf	??_ES_GetMSBitSet+1,f
  5190  00BD  3EFF               	addlw	-1
  5191  00BE  1003               	clrc
  5192  00BF  1D03               	skipz
  5193  00C0  28BC               	goto	L4
  5194  00C1  0D21               	rlf	??_ES_GetMSBitSet+1,w
  5195  00C2  3E01               	addlw	1
  5196  00C3  28C6               	goto	u1254
  5197  00C4                     u1255:	
  5198  00C4  1003               	clrc
  5199  00C5  0CA0               	rrf	??_ES_GetMSBitSet,f
  5200  00C6                     u1254:	
  5201  00C6  3EFF               	addlw	-1
  5202  00C7  1D03               	skipz
  5203  00C8  28C4               	goto	u1255
  5204  00C9  0820               	movf	??_ES_GetMSBitSet,w
  5205  00CA  390F               	andlw	15
  5206  00CB  00A2               	movwf	??_ES_GetMSBitSet+2
  5207  00CC  00A5               	movwf	ES_GetMSBitSet@Nybble2Test
  5208                           
  5209                           ;ES_LookupTables.c: 91: if ( Nybble2Test != 0){
  5210  00CD  0825               	movf	ES_GetMSBitSet@Nybble2Test,w
  5211  00CE  1903               	btfsc	3,2
  5212  00CF  28E3               	goto	l2357
  5213                           
  5214                           ;ES_LookupTables.c: 93: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  5215                           ;ES_LookupTables.c: 94: (LoopCntr * 4);
  5216  00D0  0826               	movf	ES_GetMSBitSet@LoopCntr,w
  5217  00D1  00A0               	movwf	??_ES_GetMSBitSet
  5218  00D2  3002               	movlw	2
  5219  00D3                     u1275:	
  5220  00D3  1003               	clrc
  5221  00D4  0DA0               	rlf	??_ES_GetMSBitSet,f
  5222  00D5  3EFF               	addlw	-1
  5223  00D6  1D03               	skipz
  5224  00D7  28D3               	goto	u1275
  5225  00D8  0825               	movf	ES_GetMSBitSet@Nybble2Test,w
  5226  00D9  3EFF               	addlw	255
  5227  00DA  3E01               	addlw	low ((_Nybble2MSBitNum-__stringbase)| (0+32768))
  5228  00DB  0084               	movwf	4
  5229  00DC  158A  2000  118A   	fcall	stringdir
  5230  00DF  0720               	addwf	??_ES_GetMSBitSet,w
  5231  00E0  00A1               	movwf	??_ES_GetMSBitSet+1
  5232  00E1  00A4               	movwf	ES_GetMSBitSet@ReturnVal
  5233                           
  5234                           ;ES_LookupTables.c: 95: break;
  5235  00E2  28E8               	goto	l2361
  5236  00E3                     l2357:	
  5237  00E3  30FF               	movlw	255
  5238  00E4  00A0               	movwf	??_ES_GetMSBitSet
  5239  00E5  07A6               	addwf	ES_GetMSBitSet@LoopCntr,f
  5240  00E6  1FA6               	btfss	ES_GetMSBitSet@LoopCntr,7
  5241  00E7  28B6               	goto	l2353
  5242  00E8                     l2361:	
  5243                           
  5244                           ;ES_LookupTables.c: 96: }
  5245                           ;ES_LookupTables.c: 97: }
  5246                           ;ES_LookupTables.c: 98: return ReturnVal;
  5247  00E8  0824               	movf	ES_GetMSBitSet@ReturnVal,w
  5248  00E9  0008               	return
  5249  00EA                     __end_of_ES_GetMSBitSet:	
  5250                           
  5251                           	psect	text19
  5252  0F59                     __ptext19:	
  5253 ;; *************** function _ES_DeQueue *****************
  5254 ;; Defined at:
  5255 ;;		line 125 in file "ES_Queue.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  pBlock          2    4[BANK0 ] PTR struct ES_Event_t
  5258 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  5259 ;;  pReturnEvent    1    6[BANK0 ] PTR struct ES_Event_t
  5260 ;;		 -> ES_Run@ThisEvent(3), 
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;  pThisQueue      2   19[BANK0 ] PTR struct .
  5263 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  5264 ;;  NumLeft         1   18[BANK0 ] unsigned char 
  5265 ;;  saveCrit        1   17[BANK0 ] unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      unsigned char 
  5268 ;; Registers used:
  5269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5275 ;;      Params:         0       3       0       0
  5276 ;;      Locals:         0       4       0       0
  5277 ;;      Temps:          0      10       0       0
  5278 ;;      Totals:         0      17       0       0
  5279 ;;Total ram usage:       17 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    5
  5282 ;; This function calls:
  5283 ;;		___bmul
  5284 ;; This function is called by:
  5285 ;;		_ES_Run
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           
  5290                           ;psect for function _ES_DeQueue
  5291  0F59                     _ES_DeQueue:	
  5292                           
  5293                           ;ES_Queue.c: 127: unsigned char saveCrit;
  5294                           ;ES_Queue.c: 128: pQueue_t pThisQueue;
  5295                           ;ES_Queue.c: 129: uint8_t NumLeft;
  5296                           ;ES_Queue.c: 131: pThisQueue = (pQueue_t)pBlock;
  5297                           
  5298                           ;incstack = 0
  5299                           ; Regs used in _ES_DeQueue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5300  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  5301  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  5302  0F5B  0824               	movf	ES_DeQueue@pBlock,w
  5303  0F5C  00B3               	movwf	ES_DeQueue@pThisQueue
  5304  0F5D  0825               	movf	ES_DeQueue@pBlock+1,w
  5305  0F5E  00B4               	movwf	ES_DeQueue@pThisQueue+1
  5306                           
  5307                           ;ES_Queue.c: 132: if ( pThisQueue->NumEntries > 0)
  5308  0F5F  3002               	movlw	2
  5309  0F60  0733               	addwf	ES_DeQueue@pThisQueue,w
  5310  0F61  00A7               	movwf	??_ES_DeQueue
  5311  0F62  0834               	movf	ES_DeQueue@pThisQueue+1,w
  5312  0F63  1803               	skipnc
  5313  0F64  3E01               	addlw	1
  5314  0F65  00A8               	movwf	??_ES_DeQueue+1
  5315  0F66  0827               	movf	??_ES_DeQueue,w
  5316  0F67  0084               	movwf	4
  5317  0F68  1783               	bsf	3,7
  5318  0F69  1C28               	btfss	??_ES_DeQueue+1,0
  5319  0F6A  1383               	bcf	3,7
  5320  0F6B  0800               	movf	0,w
  5321  0F6C  1903               	btfsc	3,2
  5322  0F6D  2FF4               	goto	l3393
  5323                           
  5324                           ;ES_Queue.c: 133: {
  5325                           ;ES_Queue.c: 134: do{ saveCrit = INTCON; GIE = 0;}while(0);
  5326  0F6E  080B               	movf	11,w	;volatile
  5327  0F6F  00A7               	movwf	??_ES_DeQueue
  5328  0F70  00B1               	movwf	ES_DeQueue@saveCrit
  5329  0F71  138B               	bcf	11,7	;volatile
  5330                           
  5331                           ;ES_Queue.c: 135: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  5332  0F72  3003               	movlw	3
  5333  0F73  00A7               	movwf	??_ES_DeQueue
  5334  0F74  00A0               	movwf	___bmul@multiplicand
  5335  0F75  3001               	movlw	1
  5336  0F76  0733               	addwf	ES_DeQueue@pThisQueue,w
  5337  0F77  00A8               	movwf	??_ES_DeQueue+1
  5338  0F78  0834               	movf	ES_DeQueue@pThisQueue+1,w
  5339  0F79  1803               	skipnc
  5340  0F7A  3E01               	addlw	1
  5341  0F7B  00A9               	movwf	??_ES_DeQueue+2
  5342  0F7C  0828               	movf	??_ES_DeQueue+1,w
  5343  0F7D  0084               	movwf	4
  5344  0F7E  1783               	bsf	3,7
  5345  0F7F  1C29               	btfss	??_ES_DeQueue+2,0
  5346  0F80  1383               	bcf	3,7
  5347  0F81  0800               	movf	0,w
  5348  0F82  3E01               	addlw	1
  5349  0F83  118A  23C0  158A   	fcall	___bmul
  5350  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  5351  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  5352  0F88  00AA               	movwf	??_ES_DeQueue+3
  5353  0F89  0724               	addwf	ES_DeQueue@pBlock,w
  5354  0F8A  00AC               	movwf	??_ES_DeQueue+5
  5355  0F8B  0825               	movf	ES_DeQueue@pBlock+1,w
  5356  0F8C  00AB               	movwf	??_ES_DeQueue+4
  5357  0F8D  1803               	skipnc
  5358  0F8E  0AAB               	incf	??_ES_DeQueue+4,f
  5359  0F8F  1BAA               	btfsc	??_ES_DeQueue+3,7
  5360  0F90  03AB               	decf	??_ES_DeQueue+4,f
  5361  0F91  082B               	movf	??_ES_DeQueue+4,w
  5362  0F92  00AD               	movwf	??_ES_DeQueue+6
  5363  0F93  082C               	movf	??_ES_DeQueue+5,w
  5364  0F94  0084               	movwf	4
  5365  0F95  1783               	bsf	3,7
  5366  0F96  1C2D               	btfss	??_ES_DeQueue+6,0
  5367  0F97  1383               	bcf	3,7
  5368  0F98  0800               	movf	0,w
  5369  0F99  00AE               	movwf	??_ES_DeQueue+7
  5370  0F9A  0A84               	incf	4,f
  5371  0F9B  0800               	movf	0,w
  5372  0F9C  00AF               	movwf	??_ES_DeQueue+8
  5373  0F9D  0A84               	incf	4,f
  5374  0F9E  0800               	movf	0,w
  5375  0F9F  00B0               	movwf	??_ES_DeQueue+9
  5376  0FA0  0826               	movf	ES_DeQueue@pReturnEvent,w
  5377  0FA1  0084               	movwf	4
  5378  0FA2  082E               	movf	??_ES_DeQueue+7,w
  5379  0FA3  1383               	bcf	3,7	;select IRP bank0
  5380  0FA4  0080               	movwf	0
  5381  0FA5  0A84               	incf	4,f
  5382  0FA6  082F               	movf	??_ES_DeQueue+8,w
  5383  0FA7  0080               	movwf	0
  5384  0FA8  0A84               	incf	4,f
  5385  0FA9  0830               	movf	??_ES_DeQueue+9,w
  5386  0FAA  0080               	movwf	0
  5387                           
  5388                           ;ES_Queue.c: 137: pThisQueue->CurrentIndex++;
  5389  0FAB  3001               	movlw	1
  5390  0FAC  00A7               	movwf	??_ES_DeQueue
  5391  0FAD  0733               	addwf	ES_DeQueue@pThisQueue,w
  5392  0FAE  00A8               	movwf	??_ES_DeQueue+1
  5393  0FAF  0834               	movf	ES_DeQueue@pThisQueue+1,w
  5394  0FB0  1803               	skipnc
  5395  0FB1  3E01               	addlw	1
  5396  0FB2  00A9               	movwf	??_ES_DeQueue+2
  5397  0FB3  0828               	movf	??_ES_DeQueue+1,w
  5398  0FB4  0084               	movwf	4
  5399  0FB5  1783               	bsf	3,7
  5400  0FB6  1C29               	btfss	??_ES_DeQueue+2,0
  5401  0FB7  1383               	bcf	3,7
  5402  0FB8  0827               	movf	??_ES_DeQueue,w
  5403  0FB9  0780               	addwf	0,f
  5404                           
  5405                           ;ES_Queue.c: 138: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  5406  0FBA  0833               	movf	ES_DeQueue@pThisQueue,w
  5407  0FBB  0084               	movwf	4
  5408  0FBC  1783               	bsf	3,7
  5409  0FBD  1C34               	btfss	ES_DeQueue@pThisQueue+1,0
  5410  0FBE  1383               	bcf	3,7
  5411  0FBF  0800               	movf	0,w
  5412  0FC0  00A7               	movwf	??_ES_DeQueue
  5413  0FC1  3001               	movlw	1
  5414  0FC2  0733               	addwf	ES_DeQueue@pThisQueue,w
  5415  0FC3  00A8               	movwf	??_ES_DeQueue+1
  5416  0FC4  0834               	movf	ES_DeQueue@pThisQueue+1,w
  5417  0FC5  1803               	skipnc
  5418  0FC6  3E01               	addlw	1
  5419  0FC7  00A9               	movwf	??_ES_DeQueue+2
  5420  0FC8  0828               	movf	??_ES_DeQueue+1,w
  5421  0FC9  0084               	movwf	4
  5422  0FCA  1783               	bsf	3,7
  5423  0FCB  1C29               	btfss	??_ES_DeQueue+2,0
  5424  0FCC  1383               	bcf	3,7
  5425  0FCD  0800               	movf	0,w
  5426  0FCE  00AA               	movwf	??_ES_DeQueue+3
  5427  0FCF  0827               	movf	??_ES_DeQueue,w
  5428  0FD0  022A               	subwf	??_ES_DeQueue+3,w
  5429  0FD1  1C03               	skipc
  5430  0FD2  2FE0               	goto	l200
  5431                           
  5432                           ;ES_Queue.c: 139: pThisQueue->CurrentIndex = 0;
  5433  0FD3  3001               	movlw	1
  5434  0FD4  0733               	addwf	ES_DeQueue@pThisQueue,w
  5435  0FD5  00A7               	movwf	??_ES_DeQueue
  5436  0FD6  0834               	movf	ES_DeQueue@pThisQueue+1,w
  5437  0FD7  1803               	skipnc
  5438  0FD8  3E01               	addlw	1
  5439  0FD9  00A8               	movwf	??_ES_DeQueue+1
  5440  0FDA  0827               	movf	??_ES_DeQueue,w
  5441  0FDB  0084               	movwf	4
  5442  0FDC  1783               	bsf	3,7
  5443  0FDD  1C28               	btfss	??_ES_DeQueue+1,0
  5444  0FDE  1383               	bcf	3,7
  5445  0FDF  0180               	clrf	0
  5446  0FE0                     l200:	
  5447                           
  5448                           ;ES_Queue.c: 141: NumLeft = --pThisQueue->NumEntries;
  5449  0FE0  3002               	movlw	2
  5450  0FE1  0733               	addwf	ES_DeQueue@pThisQueue,w
  5451  0FE2  00A7               	movwf	??_ES_DeQueue
  5452  0FE3  0834               	movf	ES_DeQueue@pThisQueue+1,w
  5453  0FE4  1803               	skipnc
  5454  0FE5  3E01               	addlw	1
  5455  0FE6  00A8               	movwf	??_ES_DeQueue+1
  5456  0FE7  0827               	movf	??_ES_DeQueue,w
  5457  0FE8  0084               	movwf	4
  5458  0FE9  1783               	bsf	3,7
  5459  0FEA  1C28               	btfss	??_ES_DeQueue+1,0
  5460  0FEB  1383               	bcf	3,7
  5461  0FEC  3001               	movlw	1
  5462  0FED  0280               	subwf	0,f
  5463  0FEE  0800               	movf	0,w
  5464  0FEF  00A9               	movwf	??_ES_DeQueue+2
  5465  0FF0  00B2               	movwf	ES_DeQueue@NumLeft
  5466                           
  5467                           ;ES_Queue.c: 142: {INTCON = saveCrit;};
  5468  0FF1  0831               	movf	ES_DeQueue@saveCrit,w
  5469  0FF2  008B               	movwf	11	;volatile
  5470                           
  5471                           ;ES_Queue.c: 143: }else {
  5472  0FF3  2FFE               	goto	l3399
  5473  0FF4                     l3393:	
  5474                           
  5475                           ;ES_Queue.c: 144: (*pReturnEvent).EventType = ES_NO_EVENT;
  5476  0FF4  0826               	movf	ES_DeQueue@pReturnEvent,w
  5477  0FF5  0084               	movwf	4
  5478  0FF6  1383               	bcf	3,7	;select IRP bank0
  5479  0FF7  0180               	clrf	0
  5480                           
  5481                           ;ES_Queue.c: 145: (*pReturnEvent).EventParam = 0;
  5482  0FF8  0A26               	incf	ES_DeQueue@pReturnEvent,w
  5483  0FF9  0084               	movwf	4
  5484  0FFA  0180               	clrf	0
  5485  0FFB  0A84               	incf	4,f
  5486  0FFC  0180               	clrf	0
  5487                           
  5488                           ;ES_Queue.c: 146: NumLeft = 0;
  5489  0FFD  01B2               	clrf	ES_DeQueue@NumLeft
  5490  0FFE                     l3399:	
  5491                           
  5492                           ;ES_Queue.c: 147: }
  5493                           ;ES_Queue.c: 148: return NumLeft;
  5494  0FFE  0832               	movf	ES_DeQueue@NumLeft,w
  5495  0FFF  0008               	return
  5496  1000                     __end_of_ES_DeQueue:	
  5497                           
  5498                           	psect	text20
  5499  0ED2                     __ptext20:	
  5500 ;; *************** function _ES_CheckUserEvents *****************
  5501 ;; Defined at:
  5502 ;;		line 46 in file "ES_CheckEvents.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;		None
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;		None
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  1   38[BANK0 ] unsigned char 
  5509 ;; Registers used:
  5510 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5516 ;;      Params:         0       1       0       0
  5517 ;;      Locals:         0       0       0       0
  5518 ;;      Temps:          0       0       0       0
  5519 ;;      Totals:         0       1       0       0
  5520 ;;Total ram usage:        1 bytes
  5521 ;; Hardware stack levels required when called:    8
  5522 ;; This function calls:
  5523 ;;		_CheckSPIEvent
  5524 ;;		_CheckUARTRXEvent
  5525 ;;		_CheckUARTTXEvent
  5526 ;; This function is called by:
  5527 ;;		_ES_Run
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           
  5532                           ;psect for function _ES_CheckUserEvents
  5533  0ED2                     _ES_CheckUserEvents:	
  5534                           
  5535                           ;incstack = 0
  5536                           ; Regs used in _ES_CheckUserEvents: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5537  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  5538  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  5539  0ED4  00C6               	movwf	?_ES_CheckUserEvents^0
  5540  0ED5  3047               	movlw	low u2367jt
  5541  0ED6  00C0               	movwf	(?_CheckSPIEvent+1)^0
  5542  0ED7  2F07               	ljmp	l3269
  5543  0ED8                     u2367jf:	
  5544  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  5545  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  5546  0EDA  083F               	movf	?_CheckSPIEvent,w
  5547  0EDB  3A00               	xorlw	0
  5548  0EDC  1D03               	btfss	3,2
  5549  0EDD  2EE8               	goto	l12
  5550                           
  5551                           ;	Return value of _ES_CheckUserEvents is never used
  5552  0EDE  3049               	movlw	low u2387jt
  5553  0EDF  00C0               	movwf	(?_CheckUARTRXEvent+1)^0
  5554  0EE0  2F32               	ljmp	l3285
  5555  0EE1                     u2387jf:	
  5556  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  5557  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  5558  0EE3  083F               	movf	?_CheckUARTRXEvent,w
  5559  0EE4  3A00               	xorlw	0
  5560  0EE5  1D03               	btfss	3,2
  5561  0EE6  2EE8               	goto	l12
  5562                           
  5563                           ;ES_CheckEvents.c: 52: if (CheckUARTTXEvent()) return ((boolean) !((boolean) 0));
  5564                           
  5565                           ;	Return value of _ES_CheckUserEvents is never used
  5566  0EE7  26EE               	fcall	_CheckUARTTXEvent
  5567  0EE8                     l12:	
  5568                           ;ES_CheckEvents.c: 53: return ((boolean) 0);
  5569                           ;	Return value of _ES_CheckUserEvents is never used
  5570                           
  5571                           ;	Return value of _ES_CheckUserEvents is never used
  5572                           
  5573  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  5574  0EE9  3008               	movlw	high __pjmp_tab__ES_CheckUserEvents
  5575  0EEA  1303               	bcf	3,6	;RP1=0, select bank0
  5576  0EEB  008A               	movwf	10
  5577  0EEC  0846               	movf	?_ES_CheckUserEvents^0,w
  5578  0EED  0082               	movwf	2
  5579  0EEE                     __end_of_ES_CheckUserEvents:	
  5580  0EEE                     __ptext21:	
  5581 ;; *************** function _CheckUARTTXEvent *****************
  5582 ;; Defined at:
  5583 ;;		line 282 in file "UART_TX_SM.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;		None
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  TXEvent         3   29[BANK0 ] struct ES_Event_t
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      unsigned char 
  5590 ;; Registers used:
  5591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5597 ;;      Params:         0       0       0       0
  5598 ;;      Locals:         0       3       0       0
  5599 ;;      Temps:          0       1       0       0
  5600 ;;      Totals:         0       4       0       0
  5601 ;;Total ram usage:        4 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    7
  5604 ;; This function calls:
  5605 ;;		_ES_PostToService
  5606 ;; This function is called by:
  5607 ;;		_ES_CheckUserEvents
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           
  5612                           ;psect for function _CheckUARTTXEvent
  5613  0EEE                     _CheckUARTTXEvent:	
  5614                           
  5615                           ;UART_TX_SM.c: 283: if (sendCompleteFlag) {
  5616                           
  5617                           ;incstack = 0
  5618                           ; Regs used in _CheckUARTTXEvent: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5619  0EEE  1683               	bsf	3,5	;RP0=1, select bank1
  5620  0EEF  1303               	bcf	3,6	;RP1=0, select bank1
  5621  0EF0  084C               	movf	_sendCompleteFlag^(0+128),w
  5622  0EF1  1903               	btfsc	3,2
  5623  0EF2  3400               	retlw	0
  5624                           
  5625                           ;UART_TX_SM.c: 284: ES_Event TXEvent;
  5626                           ;UART_TX_SM.c: 285: TXEvent.EventType = ES_TX_SEND_COMPLETE;
  5627  0EF3  300C               	movlw	12
  5628  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  5629  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  5630  0EF6  00BC               	movwf	??_CheckUARTTXEvent
  5631  0EF7  00BD               	movwf	CheckUARTTXEvent@TXEvent
  5632                           
  5633                           ;UART_TX_SM.c: 286: TXEvent.EventParam = 0;
  5634  0EF8  01BE               	clrf	CheckUARTTXEvent@TXEvent+1
  5635  0EF9  01BF               	clrf	CheckUARTTXEvent@TXEvent+2
  5636                           
  5637                           ;UART_TX_SM.c: 287: ES_PostToService(MyPriority, TXEvent);
  5638  0EFA  00B3               	movwf	ES_PostToService@TheEvent
  5639  0EFB  083E               	movf	CheckUARTTXEvent@TXEvent+1,w
  5640  0EFC  00B4               	movwf	ES_PostToService@TheEvent+1
  5641  0EFD  083F               	movf	CheckUARTTXEvent@TXEvent+2,w
  5642  0EFE  00B5               	movwf	ES_PostToService@TheEvent+2
  5643  0EFF  085E               	movf	UART_TX_SM@MyPriority,w
  5644  0F00  118A  244F         	fcall	_ES_PostToService
  5645                           
  5646                           ;UART_TX_SM.c: 289: sendCompleteFlag = ((boolean) 0);
  5647  0F02  1683               	bsf	3,5	;RP0=1, select bank1
  5648  0F03  3001               	movlw	1
  5649  0F04  1303               	bcf	3,6	;RP1=0, select bank1
  5650  0F05  01CC               	clrf	_sendCompleteFlag^(0+128)
  5651                           
  5652                           ;UART_TX_SM.c: 290: return ((boolean) !((boolean) 0));
  5653  0F06  0008               	return
  5654  0F07                     __end_of_CheckUARTTXEvent:	
  5655                           ;UART_TX_SM.c: 291: }
  5656                           ;UART_TX_SM.c: 292: return ((boolean) 0);
  5657                           
  5658  0F07                     __ptext23:	
  5659 ;; *************** function _CheckSPIEvent *****************
  5660 ;; Defined at:
  5661 ;;		line 287 in file "SPI_SM.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;		None
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  SPIEvent        3   35[BANK0 ] struct ES_Event_t
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1   31[BANK0 ] unsigned char 
  5668 ;; Registers used:
  5669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5675 ;;      Params:         0       2       0       0
  5676 ;;      Locals:         0       3       0       0
  5677 ;;      Temps:          0       2       0       0
  5678 ;;      Totals:         0       7       0       0
  5679 ;;Total ram usage:        7 bytes
  5680 ;; Hardware stack levels required when called:    8
  5681 ;; This function calls:
  5682 ;;		_PostUARTTXService
  5683 ;; This function is called by:
  5684 ;;		_ES_CheckUserEvents
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           
  5689                           ;psect for function _CheckSPIEvent
  5690  0F07                     _CheckSPIEvent:	
  5691  0F07                     l3269:	
  5692                           ;incstack = 0
  5693                           ; Regs used in _CheckSPIEvent: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5694                           
  5695                           
  5696                           ;SPI_SM.c: 288: if (newRequest) {
  5697  0F07  1683               	bsf	3,5	;RP0=1, select bank1
  5698  0F08  1303               	bcf	3,6	;RP1=0, select bank1
  5699  0F09  084A               	movf	_newRequest^(0+128),w
  5700  0F0A  1903               	btfsc	3,2
  5701  0F0B  2F2C               	goto	l3281
  5702                           
  5703                           ;SPI_SM.c: 289: ES_Event SPIEvent;
  5704                           ;SPI_SM.c: 290: SPIEvent.EventType = ES_TX_REQUEST_SEND;
  5705  0F0C  300D               	movlw	13
  5706  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  5707  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  5708  0F0F  00C1               	movwf	??_CheckSPIEvent
  5709  0F10  00C3               	movwf	CheckSPIEvent@SPIEvent
  5710                           
  5711                           ;SPI_SM.c: 291: SPIEvent.EventParam = colorRequestData;
  5712  0F11  1683               	bsf	3,5	;RP0=1, select bank1
  5713  0F12  1303               	bcf	3,6	;RP1=0, select bank1
  5714  0F13  0847               	movf	_colorRequestData^(0+128),w
  5715  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  5716  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  5717  0F16  00C1               	movwf	??_CheckSPIEvent
  5718  0F17  01C2               	clrf	??_CheckSPIEvent+1
  5719  0F18  00C4               	movwf	CheckSPIEvent@SPIEvent+1
  5720  0F19  0842               	movf	??_CheckSPIEvent+1,w
  5721  0F1A  00C5               	movwf	CheckSPIEvent@SPIEvent+2
  5722                           
  5723                           ;SPI_SM.c: 292: PostUARTTXService(SPIEvent);
  5724  0F1B  0843               	movf	CheckSPIEvent@SPIEvent,w
  5725  0F1C  00BC               	movwf	PostUARTTXService@ThisEvent
  5726  0F1D  0844               	movf	CheckSPIEvent@SPIEvent+1,w
  5727  0F1E  00BD               	movwf	PostUARTTXService@ThisEvent+1
  5728  0F1F  0845               	movf	CheckSPIEvent@SPIEvent+2,w
  5729  0F20  00BE               	movwf	PostUARTTXService@ThisEvent+2
  5730  0F21  118A  23D2  158A   	fcall	_PostUARTTXService
  5731                           
  5732                           ;SPI_SM.c: 294: newRequest = ((boolean) 0);
  5733  0F24  1683               	bsf	3,5	;RP0=1, select bank1
  5734  0F25  1303               	bcf	3,6	;RP1=0, select bank1
  5735  0F26  01CA               	clrf	_newRequest^(0+128)
  5736                           
  5737                           ;SPI_SM.c: 295: return ((boolean) !((boolean) 0));
  5738  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  5739  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  5740  0F29  01BF               	clrf	?_CheckSPIEvent
  5741  0F2A  0ABF               	incf	?_CheckSPIEvent,f
  5742  0F2B  2F2E               	goto	l715
  5743  0F2C                     l3281:	
  5744                           
  5745                           ;SPI_SM.c: 296: }
  5746                           ;SPI_SM.c: 297: return ((boolean) 0);
  5747  0F2C  1283               	bcf	3,5	;RP0=0, select bank0
  5748  0F2D  01BF               	clrf	?_CheckSPIEvent
  5749  0F2E                     l715:	
  5750  0F2E  3008               	movlw	high __pjmp_tab
  5751  0F2F  008A               	movwf	10
  5752  0F30  0840               	movf	(?_CheckSPIEvent+1)^0,w
  5753  0F31  0082               	movwf	2
  5754  0F32                     __end_of_CheckSPIEvent:	
  5755  0F32                     __ptext22:	
  5756 ;; *************** function _CheckUARTRXEvent *****************
  5757 ;; Defined at:
  5758 ;;		line 312 in file "UART_RX_SM.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;		None
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;  CommEvent       3   34[BANK0 ] struct ES_Event_t
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  1   31[BANK0 ] unsigned char 
  5765 ;; Registers used:
  5766 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5772 ;;      Params:         0       2       0       0
  5773 ;;      Locals:         0       3       0       0
  5774 ;;      Temps:          0       1       0       0
  5775 ;;      Totals:         0       6       0       0
  5776 ;;Total ram usage:        6 bytes
  5777 ;; Hardware stack levels required when called:    8
  5778 ;; This function calls:
  5779 ;;		_PostUARTRXService
  5780 ;; This function is called by:
  5781 ;;		_ES_CheckUserEvents
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           
  5786                           ;psect for function _CheckUARTRXEvent
  5787  0F32                     _CheckUARTRXEvent:	
  5788  0F32                     l3285:	
  5789                           ;incstack = 0
  5790                           ; Regs used in _CheckUARTRXEvent: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5791                           
  5792                           
  5793                           ;UART_RX_SM.c: 313: if (RXFlag) {
  5794  0F32  1283               	bcf	3,5	;RP0=0, select bank0
  5795  0F33  1303               	bcf	3,6	;RP1=0, select bank0
  5796  0F34  0861               	movf	_RXFlag,w
  5797  0F35  1903               	btfsc	3,2
  5798  0F36  2F49               	goto	l3299
  5799                           
  5800                           ;UART_RX_SM.c: 314: ES_Event CommEvent;
  5801                           ;UART_RX_SM.c: 316: CommEvent.EventType = ES_RX_NEW_PACKET;
  5802  0F37  3007               	movlw	7
  5803  0F38  00C1               	movwf	??_CheckUARTRXEvent
  5804  0F39  00C2               	movwf	CheckUARTRXEvent@CommEvent
  5805                           
  5806                           ;UART_RX_SM.c: 317: CommEvent.EventParam = 0;
  5807  0F3A  01C3               	clrf	CheckUARTRXEvent@CommEvent+1
  5808  0F3B  01C4               	clrf	CheckUARTRXEvent@CommEvent+2
  5809                           
  5810                           ;UART_RX_SM.c: 318: PostUARTRXService(CommEvent);
  5811  0F3C  00BC               	movwf	PostUARTRXService@ThisEvent
  5812  0F3D  0843               	movf	CheckUARTRXEvent@CommEvent+1,w
  5813  0F3E  00BD               	movwf	PostUARTRXService@ThisEvent+1
  5814  0F3F  0844               	movf	CheckUARTRXEvent@CommEvent+2,w
  5815  0F40  00BE               	movwf	PostUARTRXService@ThisEvent+2
  5816  0F41  274E  158A         	fcall	_PostUARTRXService
  5817                           
  5818                           ;UART_RX_SM.c: 320: RXFlag = ((boolean) 0);
  5819  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  5820  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  5821  0F45  01E1               	clrf	_RXFlag
  5822                           
  5823                           ;UART_RX_SM.c: 321: return ((boolean) !((boolean) 0));
  5824  0F46  01BF               	clrf	?_CheckUARTRXEvent
  5825  0F47  0ABF               	incf	?_CheckUARTRXEvent,f
  5826  0F48  2F4A               	goto	l464
  5827  0F49                     l3299:	
  5828                           
  5829                           ;UART_RX_SM.c: 322: }
  5830                           ;UART_RX_SM.c: 323: return ((boolean) 0);
  5831  0F49  01BF               	clrf	?_CheckUARTRXEvent
  5832  0F4A                     l464:	
  5833  0F4A  3008               	movlw	high __pjmp_tab
  5834  0F4B  008A               	movwf	10
  5835  0F4C  0840               	movf	(?_CheckUARTRXEvent+1)^0,w
  5836  0F4D  0082               	movwf	2
  5837  0F4E                     __end_of_CheckUARTRXEvent:	
  5838  0F4E                     __ptext16:	
  5839 ;; *************** function _PostUARTRXService *****************
  5840 ;; Defined at:
  5841 ;;		line 152 in file "UART_RX_SM.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;  ThisEvent       3   28[BANK0 ] struct ES_Event_t
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  1    wreg      unsigned char 
  5848 ;; Registers used:
  5849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5855 ;;      Params:         0       3       0       0
  5856 ;;      Locals:         0       0       0       0
  5857 ;;      Temps:          0       0       0       0
  5858 ;;      Totals:         0       3       0       0
  5859 ;;Total ram usage:        3 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    7
  5862 ;; This function calls:
  5863 ;;		_ES_PostToService
  5864 ;; This function is called by:
  5865 ;;		_CheckUARTRXEvent
  5866 ;;		_ES_Timer_RTI_Resp
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           
  5871                           ;psect for function _PostUARTRXService
  5872  0F4E                     _PostUARTRXService:	
  5873                           
  5874                           ;UART_RX_SM.c: 153: return ES_PostToService(MyPriority, ThisEvent);
  5875                           ;	Return value of _PostUARTRXService is never used
  5876                           
  5877                           ;incstack = 0
  5878                           ; Regs used in _PostUARTRXService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5879  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  5880  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  5881  0F50  083C               	movf	PostUARTRXService@ThisEvent,w
  5882  0F51  00B3               	movwf	ES_PostToService@TheEvent
  5883  0F52  083D               	movf	PostUARTRXService@ThisEvent+1,w
  5884  0F53  00B4               	movwf	ES_PostToService@TheEvent+1
  5885  0F54  083E               	movf	PostUARTRXService@ThisEvent+2,w
  5886  0F55  00B5               	movwf	ES_PostToService@TheEvent+2
  5887  0F56  0860               	movf	_MyPriority,w
  5888  0F57  118A  2C4F         	ljmp	_ES_PostToService
  5889  0F59                     __end_of_PostUARTRXService:	
  5890                           
  5891                           	psect	text25
  5892  00EA                     __ptext25:	
  5893 ;; *************** function _InitPACSystemService *****************
  5894 ;; Defined at:
  5895 ;;		line 61 in file "PACSystemService.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  Priority        1   28[BANK0 ] unsigned char 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  ThisEvent       3   30[BANK0 ] struct ES_Event_t
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      unsigned char 
  5902 ;; Registers used:
  5903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5909 ;;      Params:         0       1       0       0
  5910 ;;      Locals:         0       3       0       0
  5911 ;;      Temps:          0       1       0       0
  5912 ;;      Totals:         0       5       0       0
  5913 ;;Total ram usage:        5 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    7
  5916 ;; This function calls:
  5917 ;;		_ES_PostToService
  5918 ;; This function is called by:
  5919 ;;		_ES_Initialize
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           
  5924                           ;psect for function _InitPACSystemService
  5925  00EA                     _InitPACSystemService:	
  5926                           
  5927                           ;PACSystemService.c: 62: ES_Event ThisEvent;
  5928                           ;PACSystemService.c: 64: MyPriority = Priority;
  5929                           
  5930                           ;incstack = 0
  5931                           ; Regs used in _InitPACSystemService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  5932  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  5933  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  5934  00EC  083C               	movf	InitPACSystemService@Priority,w
  5935  00ED  00BD               	movwf	??_InitPACSystemService
  5936  00EE  00DB               	movwf	PACSystemService@MyPriority
  5937                           
  5938                           ;PACSystemService.c: 67: ThisEvent.EventType = ES_INIT;
  5939  00EF  3002               	movlw	2
  5940  00F0  00BD               	movwf	??_InitPACSystemService
  5941  00F1  00BE               	movwf	InitPACSystemService@ThisEvent
  5942                           
  5943                           ;PACSystemService.c: 68: if (ES_PostToService(MyPriority, ThisEvent) == ((boolean) !((bo
      +                          olean) 0))) {
  5944  00F2  00B3               	movwf	ES_PostToService@TheEvent
  5945  00F3  083F               	movf	InitPACSystemService@ThisEvent+1,w
  5946  00F4  00B4               	movwf	ES_PostToService@TheEvent+1
  5947  00F5  0840               	movf	InitPACSystemService@ThisEvent+2,w
  5948  00F6  00B5               	movwf	ES_PostToService@TheEvent+2
  5949  00F7  085B               	movf	PACSystemService@MyPriority,w
  5950  00F8  118A  244F  118A   	fcall	_ES_PostToService
  5951  00FB  3A01               	xorlw	1
  5952  00FC  1903               	btfsc	3,2
  5953                           
  5954                           ;PACSystemService.c: 69: return ((boolean) !((boolean) 0));
  5955  00FD  3401               	retlw	1
  5956                           
  5957                           ;PACSystemService.c: 71: return ((boolean) 0);
  5958                           
  5959                           ;PACSystemService.c: 70: } else {
  5960  00FE  3400               	retlw	0
  5961  00FF                     __end_of_InitPACSystemService:	
  5962                           
  5963                           	psect	text26
  5964  0DE8                     __ptext26:	
  5965 ;; *************** function _InitSPIService *****************
  5966 ;; Defined at:
  5967 ;;		line 83 in file "SPI_SM.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;  Priority        1   28[BANK0 ] unsigned char 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  ThisEvent       3   30[BANK0 ] struct ES_Event_t
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  1    wreg      unsigned char 
  5974 ;; Registers used:
  5975 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5981 ;;      Params:         0       1       0       0
  5982 ;;      Locals:         0       3       0       0
  5983 ;;      Temps:          0       1       0       0
  5984 ;;      Totals:         0       5       0       0
  5985 ;;Total ram usage:        5 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    7
  5988 ;; This function calls:
  5989 ;;		_ES_PostToService
  5990 ;; This function is called by:
  5991 ;;		_ES_Initialize
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           
  5996                           ;psect for function _InitSPIService
  5997  0DE8                     _InitSPIService:	
  5998                           
  5999                           ;SPI_SM.c: 84: ES_Event ThisEvent;
  6000                           ;SPI_SM.c: 86: MyPriority = Priority;
  6001                           
  6002                           ;incstack = 0
  6003                           ; Regs used in _InitSPIService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6004  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  6005  0DE9  1303               	bcf	3,6	;RP1=0, select bank0
  6006  0DEA  083C               	movf	InitSPIService@Priority,w
  6007  0DEB  00BD               	movwf	??_InitSPIService
  6008  0DEC  00DC               	movwf	SPI_SM@MyPriority
  6009                           
  6010                           ;SPI_SM.c: 88: radioPing = ((boolean) 0);
  6011  0DED  1683               	bsf	3,5	;RP0=1, select bank1
  6012  0DEE  1303               	bcf	3,6	;RP1=0, select bank1
  6013  0DEF  01CB               	clrf	_radioPing^(0+128)
  6014                           
  6015                           ;SPI_SM.c: 90: GIE = 0;
  6016  0DF0  138B               	bcf	11,7	;volatile
  6017                           
  6018                           ;SPI_SM.c: 94: SSPSTAT = 0b00000000;
  6019  0DF1  0194               	clrf	20	;volatile
  6020                           
  6021                           ;SPI_SM.c: 102: TRISC7 = 0;
  6022  0DF2  1387               	bcf	7,7	;volatile
  6023                           
  6024                           ;SPI_SM.c: 103: TRISB4 = 1;
  6025  0DF3  1606               	bsf	6,4	;volatile
  6026                           
  6027                           ;SPI_SM.c: 104: TRISB6 = 1;
  6028  0DF4  1706               	bsf	6,6	;volatile
  6029                           
  6030                           ;SPI_SM.c: 105: TRISC6 = 1;
  6031  0DF5  1707               	bsf	7,6	;volatile
  6032                           
  6033                           ;SPI_SM.c: 109: SSPBUF = 0xFF;
  6034  0DF6  30FF               	movlw	255
  6035  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  6036  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  6037  0DF9  0093               	movwf	19	;volatile
  6038                           
  6039                           ;SPI_SM.c: 114: SSPCON = 0b00110100;
  6040  0DFA  3034               	movlw	52
  6041  0DFB  0094               	movwf	20	;volatile
  6042                           
  6043                           ;SPI_SM.c: 117: currentState = Waiting4Command;
  6044  0DFC  1683               	bsf	3,5	;RP0=1, select bank1
  6045  0DFD  1303               	bcf	3,6	;RP1=0, select bank1
  6046  0DFE  01C3               	clrf	SPI_SM@currentState^(0+128)
  6047                           
  6048                           ;SPI_SM.c: 119: SSPIE = 0;
  6049  0DFF  118C               	bcf	12,3	;volatile
  6050                           
  6051                           ;SPI_SM.c: 120: PEIE = 0;
  6052  0E00  130B               	bcf	11,6	;volatile
  6053                           
  6054                           ;SPI_SM.c: 121: GIE = 1;
  6055  0E01  178B               	bsf	11,7	;volatile
  6056                           
  6057                           ;SPI_SM.c: 124: ThisEvent.EventType = ES_INIT;
  6058  0E02  3002               	movlw	2
  6059  0E03  1283               	bcf	3,5	;RP0=0, select bank0
  6060  0E04  1303               	bcf	3,6	;RP1=0, select bank0
  6061  0E05  00BD               	movwf	??_InitSPIService
  6062  0E06  00BE               	movwf	InitSPIService@ThisEvent
  6063                           
  6064                           ;SPI_SM.c: 125: if (ES_PostToService(MyPriority, ThisEvent) == ((boolean) !((boolean) 0)
      +                          )) {
  6065  0E07  00B3               	movwf	ES_PostToService@TheEvent
  6066  0E08  083F               	movf	InitSPIService@ThisEvent+1,w
  6067  0E09  00B4               	movwf	ES_PostToService@TheEvent+1
  6068  0E0A  0840               	movf	InitSPIService@ThisEvent+2,w
  6069  0E0B  00B5               	movwf	ES_PostToService@TheEvent+2
  6070  0E0C  085C               	movf	SPI_SM@MyPriority,w
  6071  0E0D  118A  244F  158A   	fcall	_ES_PostToService
  6072  0E10  3A01               	xorlw	1
  6073  0E11  1903               	btfsc	3,2
  6074                           
  6075                           ;SPI_SM.c: 126: return ((boolean) !((boolean) 0));
  6076  0E12  3401               	retlw	1
  6077                           
  6078                           ;SPI_SM.c: 128: return ((boolean) 0);
  6079                           
  6080                           ;SPI_SM.c: 127: } else {
  6081  0E13  3400               	retlw	0
  6082  0E14                     __end_of_InitSPIService:	
  6083                           
  6084                           	psect	text27
  6085  0E85                     __ptext27:	
  6086 ;; *************** function _InitUARTRXService *****************
  6087 ;; Defined at:
  6088 ;;		line 112 in file "UART_RX_SM.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;  Priority        1   28[BANK0 ] unsigned char 
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;  ThisEvent       3   30[BANK0 ] struct ES_Event_t
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  1    wreg      unsigned char 
  6095 ;; Registers used:
  6096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6102 ;;      Params:         0       1       0       0
  6103 ;;      Locals:         0       3       0       0
  6104 ;;      Temps:          0       1       0       0
  6105 ;;      Totals:         0       5       0       0
  6106 ;;Total ram usage:        5 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; Hardware stack levels required when called:    7
  6109 ;; This function calls:
  6110 ;;		_ES_PostToService
  6111 ;;		_toggleRXBuffer
  6112 ;;		_toggleRespBuffer
  6113 ;;		_toggleStatBuffer
  6114 ;; This function is called by:
  6115 ;;		_ES_Initialize
  6116 ;; This function uses a non-reentrant model
  6117 ;;
  6118                           
  6119                           
  6120                           ;psect for function _InitUARTRXService
  6121  0E85                     _InitUARTRXService:	
  6122                           
  6123                           ;UART_RX_SM.c: 113: ES_Event ThisEvent;
  6124                           ;UART_RX_SM.c: 115: MyPriority = Priority;
  6125                           
  6126                           ;incstack = 0
  6127                           ; Regs used in _InitUARTRXService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6128  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  6129  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  6130  0E87  083C               	movf	InitUARTRXService@Priority,w
  6131  0E88  00BD               	movwf	??_InitUARTRXService
  6132  0E89  00E0               	movwf	_MyPriority
  6133                           
  6134                           ;UART_RX_SM.c: 118: readRXIndex = readStatIndex = readRespIndex = 1;
  6135  0E8A  3001               	movlw	1
  6136  0E8B  00EB               	movwf	_readRespIndex
  6137  0E8C  00EC               	movwf	_readStatIndex
  6138  0E8D  00BD               	movwf	??_InitUARTRXService
  6139  0E8E  00EA               	movwf	_readRXIndex
  6140  0E8F                     i3L__ptext31:	
  6141                           ;UART_RX_SM.c: 119: toggleRXBuffer();
  6142                           
  6143                           
  6144                           ;psect for function _toggleRXBuffer
  6145  0E8F                     i3L_toggleRXBuffer:	
  6146  0E8F                     i3Ll2377:	
  6147                           
  6148                           ;UART_RX_SM.c: 331: if (readRXIndex == 0) {
  6149  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  6150  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  6151  0E91  086A               	movf	_readRXIndex,w
  6152  0E92  1D03               	btfss	3,2
  6153  0E93  2E9A               	ljmp	i3Ll2383
  6154  0E94  2E96               	ljmp	i3Ll2379
  6155  0E95                     i3Lu1321:	
  6156  0E95  2E9A               	ljmp	i3Ll2383
  6157  0E96                     i3Lu1320:	
  6158  0E96                     i3Ll2379:	
  6159                           
  6160                           ;UART_RX_SM.c: 332: readRXIndex = 1;
  6161  0E96  01EA               	clrf	_readRXIndex
  6162  0E97  0AEA               	incf	_readRXIndex,f
  6163  0E98                     i3Ll2381:	
  6164                           
  6165                           ;UART_RX_SM.c: 333: writeRXIndex = 0;
  6166  0E98  01ED               	clrf	_writeRXIndex
  6167  0E99  2E9E               	ljmp	i4L__ptext29
  6168  0E9A                     i3Ll467:	
  6169  0E9A                     i3Ll2383:	
  6170                           
  6171                           ;UART_RX_SM.c: 335: readRXIndex = 0;
  6172  0E9A  01EA               	clrf	_readRXIndex
  6173  0E9B                     i3Ll2385:	
  6174                           
  6175                           ;UART_RX_SM.c: 336: writeRXIndex = 1;
  6176  0E9B  01ED               	clrf	_writeRXIndex
  6177  0E9C  0AED               	incf	_writeRXIndex,f
  6178  0E9D  2E9E               	ljmp	i4L__ptext29
  6179  0E9E                     i3Ll468:	
  6180  0E9E                     i3Ll469:	
  6181  0E9E                     i4L__ptext29:	
  6182                           ;UART_RX_SM.c: 120: toggleStatBuffer();
  6183                           
  6184                           
  6185                           ;psect for function _toggleStatBuffer
  6186  0E9E                     i4L_toggleStatBuffer:	
  6187  0E9E                     i4Ll3333:	
  6188                           
  6189                           ;UART_RX_SM.c: 341: if (readStatIndex == 0) {
  6190  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  6191  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  6192  0EA0  086C               	movf	_readStatIndex,w
  6193  0EA1  1D03               	btfss	3,2
  6194  0EA2  2EA9               	ljmp	i4Ll3339
  6195  0EA3  2EA5               	ljmp	i4Ll3335
  6196  0EA4                     i4Lu2341:	
  6197  0EA4  2EA9               	ljmp	i4Ll3339
  6198  0EA5                     i4Lu2340:	
  6199  0EA5                     i4Ll3335:	
  6200                           
  6201                           ;UART_RX_SM.c: 342: readStatIndex = 1;
  6202  0EA5  01EC               	clrf	_readStatIndex
  6203  0EA6  0AEC               	incf	_readStatIndex,f
  6204  0EA7                     i4Ll3337:	
  6205                           
  6206                           ;UART_RX_SM.c: 343: writeStatIndex = 0;
  6207  0EA7  01EF               	clrf	_writeStatIndex
  6208  0EA8  2EAD               	ljmp	i5L__ptext30
  6209  0EA9                     i4Ll472:	
  6210  0EA9                     i4Ll3339:	
  6211                           
  6212                           ;UART_RX_SM.c: 345: readStatIndex = 0;
  6213  0EA9  01EC               	clrf	_readStatIndex
  6214  0EAA                     i4Ll3341:	
  6215                           
  6216                           ;UART_RX_SM.c: 346: writeStatIndex = 1;
  6217  0EAA  01EF               	clrf	_writeStatIndex
  6218  0EAB  0AEF               	incf	_writeStatIndex,f
  6219  0EAC  2EAD               	ljmp	i5L__ptext30
  6220  0EAD                     i4Ll473:	
  6221  0EAD                     i4Ll474:	
  6222  0EAD                     i5L__ptext30:	
  6223                           ;UART_RX_SM.c: 121: toggleRespBuffer();
  6224                           
  6225                           
  6226                           ;psect for function _toggleRespBuffer
  6227  0EAD                     i5L_toggleRespBuffer:	
  6228  0EAD                     i5Ll3343:	
  6229                           
  6230                           ;UART_RX_SM.c: 351: if (readRespIndex == 0) {
  6231  0EAD  1283               	bcf	3,5	;RP0=0, select bank0
  6232  0EAE  1303               	bcf	3,6	;RP1=0, select bank0
  6233  0EAF  086B               	movf	_readRespIndex,w
  6234  0EB0  1D03               	btfss	3,2
  6235  0EB1  2EB8               	ljmp	i5Ll477
  6236  0EB2  2EB4               	ljmp	i5Ll3345
  6237  0EB3                     i5Lu2351:	
  6238  0EB3  2EB8               	ljmp	i5Ll477
  6239  0EB4                     i5Lu2350:	
  6240  0EB4                     i5Ll3345:	
  6241                           
  6242                           ;UART_RX_SM.c: 352: readRespIndex = 1;
  6243  0EB4  01EB               	clrf	_readRespIndex
  6244  0EB5  0AEB               	incf	_readRespIndex,f
  6245  0EB6                     i5Ll3347:	
  6246                           
  6247                           ;UART_RX_SM.c: 353: writeRespIndex = 0;
  6248  0EB6  01EE               	clrf	_writeRespIndex
  6249  0EB7  2EBC               	ljmp	iL57
  6250  0EB8                     i5Ll477:	
  6251                           
  6252                           ;UART_RX_SM.c: 355: readRespIndex = 1;
  6253  0EB8  01EB               	clrf	_readRespIndex
  6254  0EB9  0AEB               	incf	_readRespIndex,f
  6255  0EBA                     i5Ll3349:	
  6256                           
  6257                           ;UART_RX_SM.c: 356: writeRespIndex = 0;
  6258  0EBA  01EE               	clrf	_writeRespIndex
  6259  0EBB  2EBC               	ljmp	iL57
  6260  0EBC                     i5Ll478:	
  6261  0EBC                     i5Ll479:	
  6262  0EBC                     iL57:	
  6263                           
  6264                           ;UART_RX_SM.c: 124: superPACAddr = 0;
  6265  0EBC  1683               	bsf	3,5	;RP0=1, select bank1
  6266  0EBD  3002               	movlw	2
  6267  0EBE  1303               	bcf	3,6	;RP1=0, select bank1
  6268  0EBF  01BF               	clrf	_superPACAddr^(0+128)
  6269  0EC0  01C0               	clrf	(_superPACAddr+1)^(0+128)
  6270                           
  6271                           ;UART_RX_SM.c: 127: ThisEvent.EventType = ES_INIT;
  6272  0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  6273  0EC2  1303               	bcf	3,6	;RP1=0, select bank0
  6274  0EC3  00BD               	movwf	??_InitUARTRXService
  6275  0EC4  00BE               	movwf	InitUARTRXService@ThisEvent
  6276                           
  6277                           ;UART_RX_SM.c: 128: if (ES_PostToService(MyPriority, ThisEvent) == ((boolean) !((boolean
      +                          ) 0))) {
  6278  0EC5  00B3               	movwf	ES_PostToService@TheEvent
  6279  0EC6  083F               	movf	InitUARTRXService@ThisEvent+1,w
  6280  0EC7  00B4               	movwf	ES_PostToService@TheEvent+1
  6281  0EC8  0840               	movf	InitUARTRXService@ThisEvent+2,w
  6282  0EC9  00B5               	movwf	ES_PostToService@TheEvent+2
  6283  0ECA  0860               	movf	_MyPriority,w
  6284  0ECB  118A  244F  158A   	fcall	_ES_PostToService
  6285  0ECE  3A01               	xorlw	1
  6286  0ECF  1903               	btfsc	3,2
  6287                           
  6288                           ;UART_RX_SM.c: 129: return ((boolean) !((boolean) 0));
  6289  0ED0  3401               	retlw	1
  6290                           
  6291                           ;UART_RX_SM.c: 131: return ((boolean) 0);
  6292                           
  6293                           ;UART_RX_SM.c: 130: } else {
  6294  0ED1  3400               	retlw	0
  6295  0ED2                     __end_of_InitUARTRXService:	
  6296                           
  6297                           	psect	text28
  6298  0DB7                     __ptext28:	
  6299 ;; *************** function _InitUARTTXService *****************
  6300 ;; Defined at:
  6301 ;;		line 89 in file "UART_TX_SM.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  Priority        1   28[BANK0 ] unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  ThisEvent       3   30[BANK0 ] struct ES_Event_t
  6306 ;; Return value:  Size  Location     Type
  6307 ;;                  1    wreg      unsigned char 
  6308 ;; Registers used:
  6309 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6315 ;;      Params:         0       1       0       0
  6316 ;;      Locals:         0       3       0       0
  6317 ;;      Temps:          0       1       0       0
  6318 ;;      Totals:         0       5       0       0
  6319 ;;Total ram usage:        5 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    7
  6322 ;; This function calls:
  6323 ;;		_ES_PostToService
  6324 ;; This function is called by:
  6325 ;;		_ES_Initialize
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           
  6330                           ;psect for function _InitUARTTXService
  6331  0DB7                     _InitUARTTXService:	
  6332                           
  6333                           ;UART_TX_SM.c: 90: ES_Event ThisEvent;
  6334                           ;UART_TX_SM.c: 92: MyPriority = Priority;
  6335                           
  6336                           ;incstack = 0
  6337                           ; Regs used in _InitUARTTXService: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6338  0DB7  1283               	bcf	3,5	;RP0=0, select bank0
  6339  0DB8  1303               	bcf	3,6	;RP1=0, select bank0
  6340  0DB9  083C               	movf	InitUARTTXService@Priority,w
  6341  0DBA  00BD               	movwf	??_InitUARTTXService
  6342  0DBB  00DE               	movwf	UART_TX_SM@MyPriority
  6343  0DBC  3002               	movlw	2
  6344                           
  6345                           ;UART_TX_SM.c: 94: length = 0;
  6346  0DBD  01E8               	clrf	_length
  6347  0DBE  01E7               	clrf	_index
  6348                           
  6349                           ;UART_TX_SM.c: 98: ThisEvent.EventType = ES_INIT;
  6350  0DBF  00BD               	movwf	??_InitUARTTXService
  6351  0DC0  00BE               	movwf	InitUARTTXService@ThisEvent
  6352                           
  6353                           ;UART_TX_SM.c: 99: if (ES_PostToService(MyPriority, ThisEvent) == ((boolean) !((boolean)
      +                           0))) {
  6354  0DC1  00B3               	movwf	ES_PostToService@TheEvent
  6355  0DC2  083F               	movf	InitUARTTXService@ThisEvent+1,w
  6356  0DC3  00B4               	movwf	ES_PostToService@TheEvent+1
  6357  0DC4  0840               	movf	InitUARTTXService@ThisEvent+2,w
  6358  0DC5  00B5               	movwf	ES_PostToService@TheEvent+2
  6359  0DC6  085E               	movf	UART_TX_SM@MyPriority,w
  6360  0DC7  118A  244F  158A   	fcall	_ES_PostToService
  6361  0DCA  3A01               	xorlw	1
  6362  0DCB  1903               	btfsc	3,2
  6363                           
  6364                           ;UART_TX_SM.c: 100: return ((boolean) !((boolean) 0));
  6365  0DCC  3401               	retlw	1
  6366                           
  6367                           ;UART_TX_SM.c: 102: return ((boolean) 0);
  6368                           
  6369                           ;UART_TX_SM.c: 101: } else {
  6370  0DCD  3400               	retlw	0
  6371  0DCE                     __end_of_InitUARTTXService:	
  6372                           
  6373                           	psect	text29
  6374  0000                     __ptext29:	
  6375 ;; *************** function _toggleStatBuffer *****************
  6376 ;; Defined at:
  6377 ;;		line 340 in file "UART_RX_SM.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;		None
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;		None
  6382 ;; Return value:  Size  Location     Type
  6383 ;;		None               void
  6384 ;; Registers used:
  6385 ;;		wreg, status,2, status,0
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6391 ;;      Params:         0       0       0       0
  6392 ;;      Locals:         0       0       0       0
  6393 ;;      Temps:          0       0       0       0
  6394 ;;      Totals:         0       0       0       0
  6395 ;;Total ram usage:        0 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    4
  6398 ;; This function calls:
  6399 ;;		Nothing
  6400 ;; This function is called by:
  6401 ;;		_InitUARTRXService
  6402 ;;		_RunUARTRXService
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406  0000                     _toggleStatBuffer:	
  6407                           ;psect for function _toggleStatBuffer
  6408                           
  6409  0000                     __end_of_toggleStatBuffer:	
  6410                           ;UART_RX_SM.c: 346: writeStatIndex = 1;
  6411                           
  6412                           ;UART_RX_SM.c: 345: readStatIndex = 0;
  6413                           
  6414                           ;UART_RX_SM.c: 344: } else {
  6415                           
  6416                           ;UART_RX_SM.c: 343: writeStatIndex = 0;
  6417                           
  6418                           ;UART_RX_SM.c: 342: readStatIndex = 1;
  6419                           
  6420                           ;UART_RX_SM.c: 341: if (readStatIndex == 0) {
  6421                           
  6422                           ;incstack = 0
  6423                           ; Regs used in _toggleStatBuffer: [wreg+status,2+status,0]
  6424                           
  6425                           
  6426                           	psect	text30
  6427  0000                     __ptext30:	
  6428 ;; *************** function _toggleRespBuffer *****************
  6429 ;; Defined at:
  6430 ;;		line 350 in file "UART_RX_SM.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;		None
  6435 ;; Return value:  Size  Location     Type
  6436 ;;		None               void
  6437 ;; Registers used:
  6438 ;;		wreg, status,2, status,0
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6444 ;;      Params:         0       0       0       0
  6445 ;;      Locals:         0       0       0       0
  6446 ;;      Temps:          0       0       0       0
  6447 ;;      Totals:         0       0       0       0
  6448 ;;Total ram usage:        0 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    4
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_InitUARTRXService
  6455 ;;		_RunUARTRXService
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459  0000                     _toggleRespBuffer:	
  6460                           ;psect for function _toggleRespBuffer
  6461                           
  6462  0000                     __end_of_toggleRespBuffer:	
  6463                           ;UART_RX_SM.c: 356: writeRespIndex = 0;
  6464                           
  6465                           ;UART_RX_SM.c: 355: readRespIndex = 1;
  6466                           
  6467                           ;UART_RX_SM.c: 354: } else {
  6468                           
  6469                           ;UART_RX_SM.c: 353: writeRespIndex = 0;
  6470                           
  6471                           ;UART_RX_SM.c: 352: readRespIndex = 1;
  6472                           
  6473                           ;UART_RX_SM.c: 351: if (readRespIndex == 0) {
  6474                           
  6475                           ;incstack = 0
  6476                           ; Regs used in _toggleRespBuffer: [wreg+status,2+status,0]
  6477                           
  6478                           
  6479                           	psect	text31
  6480  0000                     __ptext31:	
  6481 ;; *************** function _toggleRXBuffer *****************
  6482 ;; Defined at:
  6483 ;;		line 330 in file "UART_RX_SM.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;		None
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;		None
  6488 ;; Return value:  Size  Location     Type
  6489 ;;		None               void
  6490 ;; Registers used:
  6491 ;;		wreg, status,2, status,0
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6497 ;;      Params:         0       0       0       0
  6498 ;;      Locals:         0       0       0       0
  6499 ;;      Temps:          0       0       0       0
  6500 ;;      Totals:         0       0       0       0
  6501 ;;Total ram usage:        0 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:    4
  6504 ;; This function calls:
  6505 ;;		Nothing
  6506 ;; This function is called by:
  6507 ;;		_InitUARTRXService
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511  0000                     _toggleRXBuffer:	
  6512                           ;psect for function _toggleRXBuffer
  6513                           
  6514  0000                     __end_of_toggleRXBuffer:	
  6515                           ;UART_RX_SM.c: 336: writeRXIndex = 1;
  6516                           
  6517                           ;UART_RX_SM.c: 335: readRXIndex = 0;
  6518                           
  6519                           ;UART_RX_SM.c: 334: } else {
  6520                           
  6521                           ;UART_RX_SM.c: 333: writeRXIndex = 0;
  6522                           
  6523                           ;UART_RX_SM.c: 332: readRXIndex = 1;
  6524                           
  6525                           ;UART_RX_SM.c: 331: if (readRXIndex == 0) {
  6526                           
  6527                           ;incstack = 0
  6528                           ; Regs used in _toggleRXBuffer: [wreg+status,2+status,0]
  6529                           
  6530                           
  6531                           	psect	text37
  6532  0511                     __ptext37:	
  6533 ;; *************** function _ISR *****************
  6534 ;; Defined at:
  6535 ;;		line 54 in file "ES_Port.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;		None
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;		None               void
  6542 ;; Registers used:
  6543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6549 ;;      Params:         0       0       0       0
  6550 ;;      Locals:         0       0       0       0
  6551 ;;      Temps:          5       0       0       0
  6552 ;;      Totals:         5       0       0       0
  6553 ;;Total ram usage:        5 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    3
  6556 ;; This function calls:
  6557 ;;		_SPIIntResponse
  6558 ;;		_UARTRXIntResponse
  6559 ;;		_UARTTXIntResponse
  6560 ;; This function is called by:
  6561 ;;		Interrupt level 1
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function _ISR
  6567  0511                     _ISR:	
  6568                           
  6569                           ;ES_Port.c: 55: RC7 = 1;
  6570  0511  1787               	bsf	7,7	;volatile
  6571                           
  6572                           ;ES_Port.c: 57: if (T0IF) {
  6573  0512  1D0B               	btfss	11,2	;volatile
  6574  0513  2D19               	goto	i1l3903
  6575                           
  6576                           ;ES_Port.c: 58: T0IF = 0;
  6577  0514  110B               	bcf	11,2	;volatile
  6578                           
  6579                           ;ES_Port.c: 59: TickCount++;
  6580  0515  3001               	movlw	1
  6581  0516  00F8               	movwf	??_ISR
  6582  0517  07E5               	addwf	_TickCount,f
  6583                           
  6584                           ;ES_Port.c: 60: PORTC ^= 0x00000001;
  6585  0518  0687               	xorwf	7,f	;volatile
  6586  0519                     i1l3903:	
  6587                           
  6588                           ;ES_Port.c: 61: }
  6589                           ;ES_Port.c: 63: if (SSPIF) {
  6590  0519  1D8C               	btfss	12,3	;volatile
  6591  051A  2DF0               	goto	i1l3907
  6592                           
  6593                           ;psect for function _SPIIntResponse
  6594                           
  6595                           ;ES_Port.c: 64: SPIIntResponse();
  6596  051B                     i6L_SPIIntResponse:	
  6597  051B                     i6Li1l3759:	
  6598                           
  6599                           ;SPI_SM.c: 180: unsigned char readByte;
  6600                           ;SPI_SM.c: 182: if (BF == 1) {
  6601  051B  1683               	bsf	3,5	;RP0=1, select bank1
  6602  051C  1303               	bcf	3,6	;RP1=0, select bank1
  6603  051D  1C14               	btfss	20,0	;volatile
  6604  051E  2DF0               	ljmp	i1l3907
  6605  051F  2D21               	ljmp	i6Li1l3761
  6606  0520                     i6Lu282_21:	
  6607  0520  2DF0               	ljmp	i1l3907
  6608  0521                     i6Lu282_20:	
  6609  0521                     i6Li1l3761:	
  6610                           
  6611                           ;SPI_SM.c: 183: readByte = SSPBUF;
  6612  0521  1283               	bcf	3,5	;RP0=0, select bank0
  6613  0522  1303               	bcf	3,6	;RP1=0, select bank0
  6614  0523  0813               	movf	19,w	;volatile
  6615  0524  00F5               	movwf	??_SPIIntResponse
  6616  0525  00F6               	movwf	SPIIntResponse@readByte
  6617  0526  2DDA               	ljmp	i6Li1l3823
  6618  0527                     i6Li1l690:	
  6619  0527                     i6Li1l3763:	
  6620                           
  6621                           ;SPI_SM.c: 188: SSPBUF = 0xFF;
  6622  0527  30FF               	movlw	255
  6623  0528  1283               	bcf	3,5	;RP0=0, select bank0
  6624  0529  0093               	movwf	19	;volatile
  6625  052A                     i6Li1l3765:	
  6626                           
  6627                           ;SPI_SM.c: 189: if (!radioPing) {
  6628  052A  1683               	bsf	3,5	;RP0=1, select bank1
  6629  052B  1303               	bcf	3,6	;RP1=0, select bank1
  6630  052C  084B               	movf	_radioPing^(0+128),w
  6631  052D  1D03               	btfss	3,2
  6632  052E  2D3E               	ljmp	i6Li1l3769
  6633  052F  2D31               	ljmp	i6Li1l3767
  6634  0530                     i6Lu283_21:	
  6635  0530  2D3E               	ljmp	i6Li1l3769
  6636  0531                     i6Lu283_20:	
  6637  0531                     i6Li1l3767:	
  6638                           
  6639                           ;SPI_SM.c: 191: responseBytes[0] = 0xFF;
  6640  0531  30FF               	movlw	255
  6641  0532  00F5               	movwf	??_SPIIntResponse
  6642  0533  00E8               	movwf	_responseBytes^(0+128)
  6643                           
  6644                           ;SPI_SM.c: 192: responseBytes[1] = 0xFF;
  6645  0534  00F5               	movwf	??_SPIIntResponse
  6646  0535  00E9               	movwf	(_responseBytes^(0+128)+1)
  6647                           
  6648                           ;SPI_SM.c: 193: responseBytes[2] = 0xFF;
  6649  0536  00F5               	movwf	??_SPIIntResponse
  6650  0537  00EA               	movwf	(_responseBytes^(0+128)+2)
  6651                           
  6652                           ;SPI_SM.c: 194: SPIBuffer = &responseBytes;
  6653  0538  30E8               	movlw	(low (_responseBytes| 0))& (0+255)
  6654  0539  00F5               	movwf	??_SPIIntResponse
  6655  053A  1283               	bcf	3,5	;RP0=0, select bank0
  6656  053B  1303               	bcf	3,6	;RP1=0, select bank0
  6657  053C  00E3               	movwf	_SPIBuffer
  6658  053D  2DA6               	ljmp	i6Li1l3805
  6659  053E                     i6Li1l691:	
  6660  053E                     i6Li1l3769:	
  6661  053E  30C0               	movlw	192
  6662  053F  0576               	andwf	SPIIntResponse@readByte,w
  6663  0540  00F5               	movwf	??_SPIIntResponse
  6664  0541  3AC0               	xorlw	192
  6665  0542  1D03               	btfss	3,2
  6666  0543  2D4D               	ljmp	i6Li1l3773
  6667  0544  2D46               	ljmp	i6Li1l3771
  6668  0545                     i6Lu284_21:	
  6669  0545  2D4D               	ljmp	i6Li1l3773
  6670  0546                     i6Lu284_20:	
  6671  0546                     i6Li1l3771:	
  6672                           
  6673                           ;SPI_SM.c: 198: SPIBuffer = RX_getStatusBuffer();
  6674  0546  26C3  118A         	fcall	_RX_getStatusBuffer
  6675  0548  00F5               	movwf	??_SPIIntResponse
  6676  0549  1283               	bcf	3,5	;RP0=0, select bank0
  6677  054A  1303               	bcf	3,6	;RP1=0, select bank0
  6678  054B  00E3               	movwf	_SPIBuffer
  6679  054C  2DA6               	ljmp	i6Li1l3805
  6680  054D                     i6Li1l693:	
  6681  054D                     i6Li1l3773:	
  6682  054D  30C0               	movlw	192
  6683  054E  0576               	andwf	SPIIntResponse@readByte,w
  6684  054F  00F5               	movwf	??_SPIIntResponse
  6685  0550  3A80               	xorlw	128
  6686  0551  1D03               	btfss	3,2
  6687  0552  2D6E               	ljmp	i6Li1l3789
  6688  0553  2D55               	ljmp	i6Li1l3775
  6689  0554                     i6Lu285_21:	
  6690  0554  2D6E               	ljmp	i6Li1l3789
  6691  0555                     i6Lu285_20:	
  6692  0555                     i6Li1l3775:	
  6693                           
  6694                           ;SPI_SM.c: 209: if (!commOpen) {
  6695  0555  1683               	bsf	3,5	;RP0=1, select bank1
  6696  0556  1303               	bcf	3,6	;RP1=0, select bank1
  6697  0557  0848               	movf	_commOpen^(0+128),w
  6698  0558  1D03               	btfss	3,2
  6699  0559  2D65               	ljmp	i6Li1l3783
  6700  055A  2D5C               	ljmp	i6Li1l3777
  6701  055B                     i6Lu286_21:	
  6702  055B  2D65               	ljmp	i6Li1l3783
  6703  055C                     i6Lu286_20:	
  6704  055C                     i6Li1l3777:	
  6705                           
  6706                           ;SPI_SM.c: 211: colorRequestData = readByte & ~(0x00000080 | 0x00000040);
  6707  055C  0876               	movf	SPIIntResponse@readByte,w
  6708  055D  393F               	andlw	63
  6709  055E  00F5               	movwf	??_SPIIntResponse
  6710  055F  00C7               	movwf	_colorRequestData^(0+128)
  6711  0560                     i6Li1l3779:	
  6712                           
  6713                           ;SPI_SM.c: 212: newRequest = ((boolean) !((boolean) 0));
  6714  0560  01CA               	clrf	_newRequest^(0+128)
  6715  0561  0ACA               	incf	_newRequest^(0+128),f
  6716  0562                     i6Li1l3781:	
  6717                           
  6718                           ;SPI_SM.c: 213: commOpen = ((boolean) !((boolean) 0));
  6719  0562  01C8               	clrf	_commOpen^(0+128)
  6720  0563  0AC8               	incf	_commOpen^(0+128),f
  6721  0564  2D65               	ljmp	i6Li1l3783
  6722  0565                     i6Li1l696:	
  6723  0565                     i6Li1l3783:	
  6724                           
  6725                           ;SPI_SM.c: 214: }
  6726                           ;SPI_SM.c: 215: responseBytes[0] = 0x00;
  6727  0565  01E8               	clrf	_responseBytes^(0+128)
  6728  0566                     i6Li1l3785:	
  6729                           
  6730                           ;SPI_SM.c: 216: responseBytes[1] = 0x00;
  6731  0566  01E9               	clrf	(_responseBytes^(0+128)+1)
  6732  0567                     i6Li1l3787:	
  6733  0567  30E8               	movlw	(low (_responseBytes| 0))& (0+255)
  6734                           
  6735                           ;SPI_SM.c: 217: responseBytes[2] = 0x00;
  6736  0568  01EA               	clrf	(_responseBytes^(0+128)+2)
  6737                           
  6738                           ;SPI_SM.c: 218: SPIBuffer = &responseBytes;
  6739  0569  00F5               	movwf	??_SPIIntResponse
  6740  056A  1283               	bcf	3,5	;RP0=0, select bank0
  6741  056B  1303               	bcf	3,6	;RP1=0, select bank0
  6742  056C  00E3               	movwf	_SPIBuffer
  6743  056D  2DA6               	ljmp	i6Li1l3805
  6744  056E                     i6Li1l695:	
  6745  056E                     i6Li1l3789:	
  6746  056E  30C0               	movlw	192
  6747  056F  0576               	andwf	SPIIntResponse@readByte,w
  6748  0570  00F5               	movwf	??_SPIIntResponse
  6749  0571  3A40               	xorlw	64
  6750  0572  1D03               	btfss	3,2
  6751  0573  2D97               	ljmp	i6Li1l3803
  6752  0574  2D76               	ljmp	i9L__ptext42
  6753  0575                     i6Lu287_21:	
  6754  0575  2D97               	ljmp	i6Li1l3803
  6755  0576                     i6Lu287_20:	
  6756  0576                     i6Li1l3791:	
  6757  0576                     i9L__ptext42:	
  6758                           ;SPI_SM.c: 233: if (RX_newResponseReady()) {
  6759                           
  6760                           
  6761                           ;psect for function _RX_newResponseReady
  6762  0576                     i9L_RX_newResponseReady:	
  6763  0576                     i9Li1l2669:	
  6764                           
  6765                           ;UART_RX_SM.c: 242: return newResponseAvailable;
  6766  0576  1283               	bcf	3,5	;RP0=0, select bank0
  6767  0577  1303               	bcf	3,6	;RP1=0, select bank0
  6768  0578  0869               	movf	_newResponseAvailable,w
  6769  0579  2D7A               	ljmp	iL211
  6770  057A                     i9Li1l2671:	
  6771  057A                     i9Li1l426:	
  6772  057A                     iL211:	
  6773  057A  3A00               	xorlw	0
  6774  057B  1903               	btfsc	3,2
  6775  057C  2D8C               	ljmp	i6Li1l3799
  6776  057D  2D7F               	ljmp	i6Li1l3793
  6777  057E                     i6Lu288_21:	
  6778  057E  2D8C               	ljmp	i6Li1l3799
  6779  057F                     i6Lu288_20:	
  6780  057F                     i6Li1l3793:	
  6781                           
  6782                           ;SPI_SM.c: 234: SPIBuffer = RX_getResponseBuffer();
  6783  057F  26BA  118A         	fcall	_RX_getResponseBuffer
  6784  0581  00F5               	movwf	??_SPIIntResponse
  6785  0582  1283               	bcf	3,5	;RP0=0, select bank0
  6786  0583  1303               	bcf	3,6	;RP1=0, select bank0
  6787  0584  00E3               	movwf	_SPIBuffer
  6788  0585                     i6Li1l3795:	
  6789  0585                     i10L__ptext46:	
  6790                           ;SPI_SM.c: 235: RX_clearResponseReady();
  6791                           
  6792                           
  6793                           ;psect for function _RX_clearResponseReady
  6794  0585                     i10L_RX_clearResponseReady:	
  6795  0585                     i10Li1l2673:	
  6796                           
  6797                           ;UART_RX_SM.c: 246: newResponseAvailable = ((boolean) 0);
  6798  0585  1283               	bcf	3,5	;RP0=0, select bank0
  6799  0586  1303               	bcf	3,6	;RP1=0, select bank0
  6800  0587  01E9               	clrf	_newResponseAvailable
  6801  0588                     i10Li1l429:	
  6802  0588                     i6Li1l3797:	
  6803                           
  6804                           ;SPI_SM.c: 236: commOpen = ((boolean) 0);
  6805  0588  1683               	bsf	3,5	;RP0=1, select bank1
  6806  0589  1303               	bcf	3,6	;RP1=0, select bank1
  6807  058A  01C8               	clrf	_commOpen^(0+128)
  6808  058B  2DA6               	ljmp	i6Li1l3805
  6809  058C                     i6Li1l699:	
  6810  058C                     i6Li1l3799:	
  6811                           
  6812                           ;SPI_SM.c: 238: responseBytes[0] = 0x00;
  6813  058C  1683               	bsf	3,5	;RP0=1, select bank1
  6814  058D  1303               	bcf	3,6	;RP1=0, select bank1
  6815  058E  01E8               	clrf	_responseBytes^(0+128)
  6816                           
  6817                           ;SPI_SM.c: 239: responseBytes[1] = 0x00;
  6818  058F  01E9               	clrf	(_responseBytes^(0+128)+1)
  6819                           
  6820                           ;SPI_SM.c: 240: responseBytes[2] = 0x00;
  6821  0590  01EA               	clrf	(_responseBytes^(0+128)+2)
  6822  0591                     i6Li1l3801:	
  6823                           
  6824                           ;SPI_SM.c: 241: SPIBuffer = &responseBytes;
  6825  0591  30E8               	movlw	(low (_responseBytes| 0))& (0+255)
  6826  0592  00F5               	movwf	??_SPIIntResponse
  6827  0593  1283               	bcf	3,5	;RP0=0, select bank0
  6828  0594  1303               	bcf	3,6	;RP1=0, select bank0
  6829  0595  00E3               	movwf	_SPIBuffer
  6830  0596                     i6Li1l700:	
  6831  0596  2DA6               	ljmp	i6Li1l3805
  6832  0597                     i6Li1l698:	
  6833  0597                     i6Li1l3803:	
  6834                           
  6835                           ;SPI_SM.c: 252: responseBytes[0] = 0xFF;
  6836  0597  30FF               	movlw	255
  6837  0598  00F5               	movwf	??_SPIIntResponse
  6838  0599  1683               	bsf	3,5	;RP0=1, select bank1
  6839  059A  1303               	bcf	3,6	;RP1=0, select bank1
  6840  059B  00E8               	movwf	_responseBytes^(0+128)
  6841                           
  6842                           ;SPI_SM.c: 253: responseBytes[1] = 0xFF;
  6843  059C  00F5               	movwf	??_SPIIntResponse
  6844  059D  00E9               	movwf	(_responseBytes^(0+128)+1)
  6845                           
  6846                           ;SPI_SM.c: 254: responseBytes[2] = 0xFF;
  6847  059E  00F5               	movwf	??_SPIIntResponse
  6848  059F  00EA               	movwf	(_responseBytes^(0+128)+2)
  6849                           
  6850                           ;SPI_SM.c: 255: SPIBuffer = &responseBytes;
  6851  05A0  30E8               	movlw	(low (_responseBytes| 0))& (0+255)
  6852  05A1  00F5               	movwf	??_SPIIntResponse
  6853  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  6854  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  6855  05A4  00E3               	movwf	_SPIBuffer
  6856  05A5                     i6Li1l701:	
  6857  05A5                     i6Li1l697:	
  6858  05A5                     i6Li1l694:	
  6859  05A5  2DA6               	ljmp	i6Li1l3805
  6860  05A6                     i6Li1l692:	
  6861  05A6                     i6Li1l3805:	
  6862                           
  6863                           ;SPI_SM.c: 257: }
  6864                           ;SPI_SM.c: 258: currentState = Waiting4Dummy1;
  6865  05A6  1683               	bsf	3,5	;RP0=1, select bank1
  6866  05A7  1303               	bcf	3,6	;RP1=0, select bank1
  6867  05A8  01C3               	clrf	SPI_SM@currentState^(0+128)
  6868  05A9  0AC3               	incf	SPI_SM@currentState^(0+128),f
  6869  05AA  2DEC               	ljmp	i6Li1l702
  6870  05AB                     i6Li1l703:	
  6871  05AB                     i6Li1l3807:	
  6872                           
  6873                           ;SPI_SM.c: 261: SSPBUF = SPIBuffer[0];
  6874  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  6875  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  6876  05AD  0863               	movf	_SPIBuffer,w
  6877  05AE  0084               	movwf	4
  6878  05AF  1383               	bcf	3,7	;select IRP bank0
  6879  05B0  0800               	movf	0,w
  6880  05B1  0093               	movwf	19	;volatile
  6881  05B2                     i6Li1l3809:	
  6882                           
  6883                           ;SPI_SM.c: 262: currentState = Waiting4Dummy2;
  6884  05B2  3002               	movlw	2
  6885  05B3  00F5               	movwf	??_SPIIntResponse
  6886  05B4  1683               	bsf	3,5	;RP0=1, select bank1
  6887  05B5  1303               	bcf	3,6	;RP1=0, select bank1
  6888  05B6  00C3               	movwf	SPI_SM@currentState^(0+128)
  6889  05B7  2DEC               	ljmp	i6Li1l702
  6890  05B8                     i6Li1l704:	
  6891  05B8                     i6Li1l3811:	
  6892                           
  6893                           ;SPI_SM.c: 265: SSPBUF = SPIBuffer[1];
  6894  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  6895  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  6896  05BA  0A63               	incf	_SPIBuffer,w
  6897  05BB  0084               	movwf	4
  6898  05BC  1383               	bcf	3,7	;select IRP bank0
  6899  05BD  0800               	movf	0,w
  6900  05BE  0093               	movwf	19	;volatile
  6901  05BF                     i6Li1l3813:	
  6902                           
  6903                           ;SPI_SM.c: 266: currentState = Waiting4Dummy3;
  6904  05BF  3003               	movlw	3
  6905  05C0  00F5               	movwf	??_SPIIntResponse
  6906  05C1  1683               	bsf	3,5	;RP0=1, select bank1
  6907  05C2  1303               	bcf	3,6	;RP1=0, select bank1
  6908  05C3  00C3               	movwf	SPI_SM@currentState^(0+128)
  6909  05C4  2DEC               	ljmp	i6Li1l702
  6910  05C5                     i6Li1l705:	
  6911  05C5                     i6Li1l3815:	
  6912                           
  6913                           ;SPI_SM.c: 269: SSPBUF = SPIBuffer[2];
  6914  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  6915  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  6916  05C7  0863               	movf	_SPIBuffer,w
  6917  05C8  3E02               	addlw	2
  6918  05C9  0084               	movwf	4
  6919  05CA  1383               	bcf	3,7	;select IRP bank0
  6920  05CB  0800               	movf	0,w
  6921  05CC  0093               	movwf	19	;volatile
  6922  05CD                     i6Li1l3817:	
  6923                           
  6924                           ;SPI_SM.c: 270: currentState = Waiting4Dummy4;
  6925  05CD  3004               	movlw	4
  6926  05CE  00F5               	movwf	??_SPIIntResponse
  6927  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  6928  05D0  1303               	bcf	3,6	;RP1=0, select bank1
  6929  05D1  00C3               	movwf	SPI_SM@currentState^(0+128)
  6930  05D2  2DEC               	ljmp	i6Li1l702
  6931  05D3                     i6Li1l706:	
  6932  05D3                     i6Li1l3819:	
  6933                           
  6934                           ;SPI_SM.c: 273: SSPBUF = 0x00;
  6935  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  6936  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  6937  05D5  0193               	clrf	19	;volatile
  6938                           
  6939                           ;SPI_SM.c: 274: currentState = Waiting4Command;
  6940  05D6  1683               	bsf	3,5	;RP0=1, select bank1
  6941  05D7  1303               	bcf	3,6	;RP1=0, select bank1
  6942  05D8  01C3               	clrf	SPI_SM@currentState^(0+128)
  6943  05D9                     i6Li1l707:	
  6944  05D9                     i6Li1l3821:	
  6945  05D9  2DEC               	ljmp	i6Li1l702
  6946  05DA                     i6Li1l689:	
  6947  05DA                     i6Li1l3823:	
  6948  05DA  1683               	bsf	3,5	;RP0=1, select bank1
  6949  05DB  1303               	bcf	3,6	;RP1=0, select bank1
  6950  05DC  0843               	movf	SPI_SM@currentState^(0+128),w
  6951                           
  6952                           ; Switch size 1, requested type "space"
  6953                           ; Number of cases is 5, Range of values is 0 to 4
  6954                           ; switch strategies available:
  6955                           ; Name         Instructions Cycles
  6956                           ; simple_byte           16     9 (average)
  6957                           ; direct_byte           17     7 (fixed)
  6958                           ; jumptable            260     6 (fixed)
  6959                           ;	Chosen strategy is simple_byte
  6960  05DD  3A00               	xorlw	0	; case 0
  6961  05DE  1903               	btfsc	3,2
  6962  05DF  2D27               	ljmp	i6Li1l3763
  6963  05E0  3A01               	xorlw	1	; case 1
  6964  05E1  1903               	btfsc	3,2
  6965  05E2  2DAB               	ljmp	i6Li1l3807
  6966  05E3  3A03               	xorlw	3	; case 2
  6967  05E4  1903               	btfsc	3,2
  6968  05E5  2DB8               	ljmp	i6Li1l3811
  6969  05E6  3A01               	xorlw	1	; case 3
  6970  05E7  1903               	btfsc	3,2
  6971  05E8  2DC5               	ljmp	i6Li1l3815
  6972  05E9  3A07               	xorlw	7	; case 4
  6973  05EA  1903               	btfsc	3,2
  6974  05EB  2DD3               	ljmp	i6Li1l3819
  6975  05EC                     i6Li1l702:	
  6976                           
  6977                           ;SPI_SM.c: 279: SSPIF = 0;
  6978  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  6979  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  6980  05EE  118C               	bcf	12,3	;volatile
  6981  05EF  2DF0               	ljmp	i1l3907
  6982  05F0                     i6Li1l688:	
  6983  05F0                     i6Li1l708:	
  6984  05F0                     i1l3907:	
  6985                           
  6986                           ;ES_Port.c: 65: }
  6987                           ;ES_Port.c: 67: if (RCIF) {
  6988  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  6989  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  6990  05F2  1E8C               	btfss	12,5	;volatile
  6991  05F3  2E7F               	goto	i1l3911
  6992                           
  6993                           ;psect for function _UARTRXIntResponse
  6994                           
  6995                           ;ES_Port.c: 68: UARTRXIntResponse();
  6996  05F4                     i7L_UARTRXIntResponse:	
  6997  05F4                     i7Li1l3825:	
  6998                           
  6999                           ;UART_RX_SM.c: 258: static uint8_t currentByteIndex;
  7000                           ;UART_RX_SM.c: 259: static uint8_t bodyByteCount;
  7001                           ;UART_RX_SM.c: 260: static uint8_t checksum;
  7002                           ;UART_RX_SM.c: 262: uint8_t newByte = RCREG;
  7003  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  7004  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  7005  05F6  081A               	movf	26,w	;volatile
  7006  05F7  00F4               	movwf	??_UARTRXIntResponse
  7007  05F8  00F7               	movwf	UARTRXIntResponse@newByte
  7008  05F9  2E6E               	ljmp	i7Li1l3869
  7009  05FA                     i7Li1l445:	
  7010  05FA                     i7Li1l3827:	
  7011                           
  7012                           ;UART_RX_SM.c: 266: if (newByte == 0x7E)
  7013  05FA  307E               	movlw	126
  7014  05FB  0677               	xorwf	UARTRXIntResponse@newByte,w
  7015  05FC  1D03               	btfss	3,2
  7016  05FD  2E7F               	ljmp	i1l3911
  7017  05FE  2E00               	ljmp	i7Li1l3829
  7018  05FF                     i7Lu289_21:	
  7019  05FF  2E7F               	ljmp	i1l3911
  7020  0600                     i7Lu289_20:	
  7021  0600                     i7Li1l3829:	
  7022                           
  7023                           ;UART_RX_SM.c: 267: currentState = WaitForMSB;
  7024  0600  01E6               	clrf	_currentState
  7025  0601  0AE6               	incf	_currentState,f
  7026  0602                     i7Li1l446:	
  7027  0602  2E7F               	ljmp	i1l3911
  7028  0603                     i7Li1l448:	
  7029  0603                     i7Li1l3831:	
  7030                           
  7031                           ;UART_RX_SM.c: 271: if (newByte == 0)
  7032  0603  0877               	movf	UARTRXIntResponse@newByte,w
  7033  0604  1D03               	btfss	3,2
  7034  0605  2E0C               	ljmp	i7Li1l3835
  7035  0606  2E08               	ljmp	i7Li1l3833
  7036  0607                     i7Lu290_21:	
  7037  0607  2E0C               	ljmp	i7Li1l3835
  7038  0608                     i7Lu290_20:	
  7039  0608                     i7Li1l3833:	
  7040                           
  7041                           ;UART_RX_SM.c: 272: currentState = WaitForLSB;
  7042  0608  3002               	movlw	2
  7043  0609  00F4               	movwf	??_UARTRXIntResponse
  7044  060A  00E6               	movwf	_currentState
  7045  060B  2E7F               	ljmp	i1l3911
  7046  060C                     i7Li1l449:	
  7047  060C                     i7Li1l3835:	
  7048                           
  7049                           ;UART_RX_SM.c: 273: else
  7050                           ;UART_RX_SM.c: 274: currentState = WaitFor7E;
  7051  060C  01E6               	clrf	_currentState
  7052  060D                     i7Li1l450:	
  7053  060D  2E7F               	ljmp	i1l3911
  7054  060E                     i7Li1l451:	
  7055  060E                     i7Li1l3837:	
  7056                           
  7057                           ;UART_RX_SM.c: 278: bodyByteCount = newByte;
  7058  060E  0877               	movf	UARTRXIntResponse@newByte,w
  7059  060F  00F4               	movwf	??_UARTRXIntResponse
  7060  0610  00DD               	movwf	UARTRXIntResponse@bodyByteCount
  7061                           
  7062                           ;UART_RX_SM.c: 279: if (bodyByteCount > 10) {
  7063  0611  300B               	movlw	11
  7064  0612  025D               	subwf	UARTRXIntResponse@bodyByteCount,w
  7065  0613  1C03               	btfss	3,0
  7066  0614  2E19               	ljmp	i7Li1l3841
  7067  0615  2E17               	ljmp	i7Li1l3839
  7068  0616                     i7Lu291_21:	
  7069  0616  2E19               	ljmp	i7Li1l3841
  7070  0617                     i7Lu291_20:	
  7071  0617                     i7Li1l3839:	
  7072                           
  7073                           ;UART_RX_SM.c: 280: currentState = WaitFor7E;
  7074  0617  01E6               	clrf	_currentState
  7075  0618  2E7F               	ljmp	i1l3911
  7076  0619                     i7Li1l452:	
  7077  0619                     i7Li1l3841:	
  7078                           
  7079                           ;UART_RX_SM.c: 282: currentByteIndex = 0;
  7080  0619  01FD               	clrf	UARTRXIntResponse@currentByteIndex
  7081                           
  7082                           ;UART_RX_SM.c: 283: checksum = 0;
  7083  061A  1683               	bsf	3,5	;RP0=1, select bank1
  7084  061B  1303               	bcf	3,6	;RP1=0, select bank1
  7085  061C  01C4               	clrf	UARTRXIntResponse@checksum^(0+128)
  7086  061D                     i7Li1l3843:	
  7087                           
  7088                           ;UART_RX_SM.c: 284: currentState = SuckUpData;
  7089  061D  3004               	movlw	4
  7090  061E  00F4               	movwf	??_UARTRXIntResponse
  7091  061F  1283               	bcf	3,5	;RP0=0, select bank0
  7092  0620  1303               	bcf	3,6	;RP1=0, select bank0
  7093  0621  00E6               	movwf	_currentState
  7094  0622                     i7Li1l453:	
  7095  0622  2E7F               	ljmp	i1l3911
  7096  0623                     i7Li1l454:	
  7097  0623                     i7Li1l3845:	
  7098                           
  7099                           ;UART_RX_SM.c: 289: if (currentByteIndex < 10) {
  7100  0623  300A               	movlw	10
  7101  0624  027D               	subwf	UARTRXIntResponse@currentByteIndex,w
  7102  0625  1803               	btfsc	3,0
  7103  0626  2E3C               	ljmp	i7Li1l3851
  7104  0627  2E29               	ljmp	i7Li1l3847
  7105  0628                     i7Lu292_21:	
  7106  0628  2E3C               	ljmp	i7Li1l3851
  7107  0629                     i7Lu292_20:	
  7108  0629                     i7Li1l3847:	
  7109                           
  7110                           ;UART_RX_SM.c: 290: RXBuffer[writeRXIndex][currentByteIndex] = newByte;
  7111  0629  0877               	movf	UARTRXIntResponse@newByte,w
  7112  062A  00F4               	movwf	??_UARTRXIntResponse
  7113  062B  300A               	movlw	10
  7114  062C  00F5               	movwf	??_UARTRXIntResponse+1
  7115  062D  00F0               	movwf	i1___bmul@multiplicand
  7116  062E  086D               	movf	_writeRXIndex,w
  7117  062F  26AA  118A         	fcall	i1___bmul
  7118  0631  3E20               	addlw	(low (_RXBuffer| (0+256)))& (0+255)
  7119  0632  077D               	addwf	UARTRXIntResponse@currentByteIndex,w
  7120  0633  00F6               	movwf	??_UARTRXIntResponse+2
  7121  0634  0084               	movwf	4
  7122  0635  0874               	movf	??_UARTRXIntResponse,w
  7123  0636  1783               	bsf	3,7	;select IRP bank2
  7124  0637  0080               	movwf	0
  7125  0638                     i7Li1l3849:	
  7126                           
  7127                           ;UART_RX_SM.c: 291: ++currentByteIndex;
  7128  0638  3001               	movlw	1
  7129  0639  00F4               	movwf	??_UARTRXIntResponse
  7130  063A  07FD               	addwf	UARTRXIntResponse@currentByteIndex,f
  7131  063B  2E3C               	ljmp	i7Li1l3851
  7132  063C                     i7Li1l455:	
  7133  063C                     i7Li1l3851:	
  7134                           
  7135                           ;UART_RX_SM.c: 292: }
  7136                           ;UART_RX_SM.c: 293: checksum += newByte;
  7137  063C  0877               	movf	UARTRXIntResponse@newByte,w
  7138  063D  00F4               	movwf	??_UARTRXIntResponse
  7139  063E  1683               	bsf	3,5	;RP0=1, select bank1
  7140  063F  1303               	bcf	3,6	;RP1=0, select bank1
  7141  0640  07C4               	addwf	UARTRXIntResponse@checksum^(0+128),f
  7142  0641                     i7Li1l3853:	
  7143                           
  7144                           ;UART_RX_SM.c: 294: if (currentByteIndex == bodyByteCount) {
  7145  0641  087D               	movf	UARTRXIntResponse@currentByteIndex,w
  7146  0642  1283               	bcf	3,5	;RP0=0, select bank0
  7147  0643  1303               	bcf	3,6	;RP1=0, select bank0
  7148  0644  065D               	xorwf	UARTRXIntResponse@bodyByteCount,w
  7149  0645  1D03               	btfss	3,2
  7150  0646  2E7F               	ljmp	i1l3911
  7151  0647  2E49               	ljmp	i7Li1l3855
  7152  0648                     i7Lu293_21:	
  7153  0648  2E7F               	ljmp	i1l3911
  7154  0649                     i7Lu293_20:	
  7155  0649                     i7Li1l3855:	
  7156                           
  7157                           ;UART_RX_SM.c: 295: currentByteIndex = 0;
  7158  0649  01FD               	clrf	UARTRXIntResponse@currentByteIndex
  7159  064A                     i7Li1l3857:	
  7160                           
  7161                           ;UART_RX_SM.c: 296: currentState = WaitForCkSum;
  7162  064A  3005               	movlw	5
  7163  064B  00F4               	movwf	??_UARTRXIntResponse
  7164  064C  00E6               	movwf	_currentState
  7165  064D                     i7Li1l456:	
  7166  064D  2E7F               	ljmp	i1l3911
  7167  064E                     i7Li1l457:	
  7168  064E                     i7Li1l3859:	
  7169                           
  7170                           ;UART_RX_SM.c: 300: checksum += newByte;
  7171  064E  0877               	movf	UARTRXIntResponse@newByte,w
  7172  064F  00F4               	movwf	??_UARTRXIntResponse
  7173  0650  1683               	bsf	3,5	;RP0=1, select bank1
  7174  0651  1303               	bcf	3,6	;RP1=0, select bank1
  7175  0652  07C4               	addwf	UARTRXIntResponse@checksum^(0+128),f
  7176                           
  7177                           ;UART_RX_SM.c: 301: if (0xFF == checksum) {
  7178  0653  0F44               	incfsz	UARTRXIntResponse@checksum^(0+128),w
  7179  0654  2E6B               	ljmp	i7Li1l3865
  7180  0655  2E57               	ljmp	i11L__ptext40
  7181  0656                     i7Lu294_21:	
  7182  0656  2E6B               	ljmp	i7Li1l3865
  7183  0657                     i7Lu294_20:	
  7184  0657                     i7Li1l3861:	
  7185  0657                     i11L__ptext40:	
  7186                           ;UART_RX_SM.c: 302: toggleRXBuffer();
  7187                           
  7188                           
  7189                           ;psect for function i1_toggleRXBuffer
  7190  0657                     i11Li1_toggleRXBuffer:	
  7191  0657                     i11Li1l2863:	
  7192                           
  7193                           ;UART_RX_SM.c: 331: if (readRXIndex == 0) {
  7194  0657  1283               	bcf	3,5	;RP0=0, select bank0
  7195  0658  1303               	bcf	3,6	;RP1=0, select bank0
  7196  0659  086A               	movf	_readRXIndex,w
  7197  065A  1D03               	btfss	3,2
  7198  065B  2E62               	ljmp	i11Li1l2869
  7199  065C  2E5E               	ljmp	i11Li1l2865
  7200  065D                     i11Lu179_21:	
  7201  065D  2E62               	ljmp	i11Li1l2869
  7202  065E                     i11Lu179_20:	
  7203  065E                     i11Li1l2865:	
  7204                           
  7205                           ;UART_RX_SM.c: 332: readRXIndex = 1;
  7206  065E  01EA               	clrf	_readRXIndex
  7207  065F  0AEA               	incf	_readRXIndex,f
  7208  0660                     i11Li1l2867:	
  7209                           
  7210                           ;UART_RX_SM.c: 333: writeRXIndex = 0;
  7211  0660  01ED               	clrf	_writeRXIndex
  7212  0661  2E66               	ljmp	i7Li1l3863
  7213  0662                     i11Li1l467:	
  7214  0662                     i11Li1l2869:	
  7215                           
  7216                           ;UART_RX_SM.c: 335: readRXIndex = 0;
  7217  0662  01EA               	clrf	_readRXIndex
  7218  0663                     i11Li1l2871:	
  7219                           
  7220                           ;UART_RX_SM.c: 336: writeRXIndex = 1;
  7221  0663  01ED               	clrf	_writeRXIndex
  7222  0664  0AED               	incf	_writeRXIndex,f
  7223  0665  2E66               	ljmp	i7Li1l3863
  7224  0666                     i11Li1l468:	
  7225  0666                     i11Li1l469:	
  7226  0666                     i7Li1l3863:	
  7227                           
  7228                           ;UART_RX_SM.c: 303: RXFlag = ((boolean) !((boolean) 0));
  7229  0666  1283               	bcf	3,5	;RP0=0, select bank0
  7230  0667  1303               	bcf	3,6	;RP1=0, select bank0
  7231  0668  01E1               	clrf	_RXFlag
  7232  0669  0AE1               	incf	_RXFlag,f
  7233  066A  2E6B               	ljmp	i7Li1l3865
  7234  066B                     i7Li1l458:	
  7235  066B                     i7Li1l3865:	
  7236                           
  7237                           ;UART_RX_SM.c: 304: }
  7238                           ;UART_RX_SM.c: 305: currentState = WaitFor7E;
  7239  066B  1283               	bcf	3,5	;RP0=0, select bank0
  7240  066C  01E6               	clrf	_currentState
  7241  066D                     i7Li1l459:	
  7242  066D                     i7Li1l3867:	
  7243  066D  2E7F               	ljmp	i1l3911
  7244  066E                     i7Li1l444:	
  7245  066E                     i7Li1l3869:	
  7246  066E  0866               	movf	_currentState,w
  7247                           
  7248                           ; Switch size 1, requested type "space"
  7249                           ; Number of cases is 5, Range of values is 0 to 5
  7250                           ; switch strategies available:
  7251                           ; Name         Instructions Cycles
  7252                           ; simple_byte           16     9 (average)
  7253                           ; direct_byte           19     7 (fixed)
  7254                           ; jumptable            260     6 (fixed)
  7255                           ;	Chosen strategy is simple_byte
  7256  066F  3A00               	xorlw	0	; case 0
  7257  0670  1903               	btfsc	3,2
  7258  0671  2DFA               	ljmp	i7Li1l3827
  7259  0672  3A01               	xorlw	1	; case 1
  7260  0673  1903               	btfsc	3,2
  7261  0674  2E03               	ljmp	i7Li1l3831
  7262  0675  3A03               	xorlw	3	; case 2
  7263  0676  1903               	btfsc	3,2
  7264  0677  2E0E               	ljmp	i7Li1l3837
  7265  0678  3A06               	xorlw	6	; case 4
  7266  0679  1903               	btfsc	3,2
  7267  067A  2E23               	ljmp	i7Li1l3845
  7268  067B  3A01               	xorlw	1	; case 5
  7269  067C  1903               	btfsc	3,2
  7270  067D  2E4E               	ljmp	i7Li1l3859
  7271  067E  2E7F               	ljmp	i1l3911
  7272  067F                     i7Li1l447:	
  7273  067F                     i7Li1l460:	
  7274  067F                     i1l3911:	
  7275                           
  7276                           ;ES_Port.c: 69: }
  7277                           ;ES_Port.c: 71: if (TXIF) {
  7278  067F  1283               	bcf	3,5	;RP0=0, select bank0
  7279  0680  1303               	bcf	3,6	;RP1=0, select bank0
  7280  0681  1E0C               	btfss	12,4	;volatile
  7281  0682  2E9C               	goto	i1l3915
  7282                           
  7283                           ;psect for function _UARTTXIntResponse
  7284                           
  7285                           ;ES_Port.c: 72: UARTTXIntResponse();
  7286  0683                     i8L_UARTTXIntResponse:	
  7287  0683                     i8Li1l3041:	
  7288                           
  7289                           ;UART_TX_SM.c: 274: if (index >= length) {
  7290  0683  1283               	bcf	3,5	;RP0=0, select bank0
  7291  0684  1303               	bcf	3,6	;RP1=0, select bank0
  7292  0685  0868               	movf	_length,w
  7293  0686  0267               	subwf	_index,w
  7294  0687  1C03               	btfss	3,0
  7295  0688  2E91               	ljmp	i8Li1l3045
  7296  0689  2E8B               	ljmp	i8Li1l3043
  7297  068A                     i8Lu205_21:	
  7298  068A  2E91               	ljmp	i8Li1l3045
  7299  068B                     i8Lu205_20:	
  7300  068B                     i8Li1l3043:	
  7301                           
  7302                           ;UART_TX_SM.c: 275: sendCompleteFlag = ((boolean) !((boolean) 0));
  7303  068B  1683               	bsf	3,5	;RP0=1, select bank1
  7304  068C  1303               	bcf	3,6	;RP1=0, select bank1
  7305  068D  01CC               	clrf	_sendCompleteFlag^(0+128)
  7306  068E  0ACC               	incf	_sendCompleteFlag^(0+128),f
  7307                           
  7308                           ;UART_TX_SM.c: 276: TXIE = 0;
  7309  068F  120C               	bcf	12,4	;volatile
  7310  0690  2E9C               	ljmp	i1l3915
  7311  0691                     i8Li1l580:	
  7312  0691                     i8Li1l3045:	
  7313                           
  7314                           ;UART_TX_SM.c: 278: TXREG = XBeePacket[index++];
  7315  0691  1283               	bcf	3,5	;RP0=0, select bank0
  7316  0692  0867               	movf	_index,w
  7317  0693  3EB0               	addlw	(low (_XBeePacket| 0))& (0+255)
  7318  0694  0084               	movwf	4
  7319  0695  1383               	bcf	3,7	;select IRP bank1
  7320  0696  0800               	movf	0,w
  7321  0697  0099               	movwf	25	;volatile
  7322  0698                     i8Li1l3047:	
  7323  0698  3001               	movlw	1
  7324  0699  00F0               	movwf	??_UARTTXIntResponse
  7325  069A  07E7               	addwf	_index,f
  7326  069B  2E9C               	ljmp	i1l3915
  7327  069C                     i8Li1l581:	
  7328  069C                     i8Li1l582:	
  7329  069C                     i1l3915:	
  7330                           
  7331                           ;ES_Port.c: 73: }
  7332                           ;ES_Port.c: 75: RC7 = 0;
  7333  069C  1283               	bcf	3,5	;RP0=0, select bank0
  7334  069D  1303               	bcf	3,6	;RP1=0, select bank0
  7335  069E  1387               	bcf	7,7	;volatile
  7336  069F  087C               	movf	??_ISR+4,w
  7337  06A0  00FF               	movwf	127
  7338  06A1  087B               	movf	??_ISR+3,w
  7339  06A2  008A               	movwf	10
  7340  06A3  087A               	movf	??_ISR+2,w
  7341  06A4  0084               	movwf	4
  7342  06A5  0E79               	swapf	(??_ISR+1)^(0+-128),w
  7343  06A6  0083               	movwf	3
  7344  06A7  0EFE               	swapf	126,f
  7345  06A8  0E7E               	swapf	126,w
  7346  06A9  0009               	retfie
  7347  06AA                     __end_of_ISR:	
  7348  06AA                     __ptext45:	
  7349 ;; *************** function i1___bmul *****************
  7350 ;; Defined at:
  7351 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul8.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;  multiplier      1    wreg     unsigned char 
  7354 ;;  multiplicand    1    0[COMMON] unsigned char 
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;  multiplier      1    2[COMMON] unsigned char 
  7357 ;;  __bmul          1    3[COMMON] unsigned char 
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  1    wreg      unsigned char 
  7360 ;; Registers used:
  7361 ;;		wreg, status,2, status,0
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7367 ;;      Params:         1       0       0       0
  7368 ;;      Locals:         2       0       0       0
  7369 ;;      Temps:          1       0       0       0
  7370 ;;      Totals:         4       0       0       0
  7371 ;;Total ram usage:        4 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; This function calls:
  7374 ;;		Nothing
  7375 ;; This function is called by:
  7376 ;;		_RX_getStatusBuffer
  7377 ;;		_RX_getResponseBuffer
  7378 ;;		_UARTRXIntResponse
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           
  7383                           ;psect for function i1___bmul
  7384  06AA                     i1___bmul:	
  7385                           
  7386                           ;incstack = 0
  7387                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  7388                           ;i1___bmul@multiplier stored from wreg
  7389  06AA  00F2               	movwf	i1___bmul@multiplier
  7390  06AB  01F3               	clrf	i1___bmul@product
  7391  06AC                     i1l2465:	
  7392  06AC  1C72               	btfss	i1___bmul@multiplier,0
  7393  06AD  2EB1               	goto	i1l2469
  7394  06AE  0870               	movf	i1___bmul@multiplicand,w
  7395  06AF  00F1               	movwf	??i1___bmul
  7396  06B0  07F3               	addwf	i1___bmul@product,f
  7397  06B1                     i1l2469:	
  7398  06B1  1003               	clrc
  7399  06B2  0DF0               	rlf	i1___bmul@multiplicand,f
  7400  06B3  1003               	clrc
  7401  06B4  0CF2               	rrf	i1___bmul@multiplier,f
  7402  06B5  0872               	movf	i1___bmul@multiplier,w
  7403  06B6  1D03               	btfss	3,2
  7404  06B7  2EAC               	goto	i1l2465
  7405  06B8  0873               	movf	i1___bmul@product,w
  7406  06B9  0008               	return
  7407  06BA                     __end_ofi1___bmul:	
  7408  06BA                     __ptext44:	
  7409 ;; *************** function _RX_getResponseBuffer *****************
  7410 ;; Defined at:
  7411 ;;		line 253 in file "UART_RX_SM.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;		None
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;		None
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      PTR unsigned char 
  7418 ;; Registers used:
  7419 ;;		wreg, status,2, status,0, pclath, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7425 ;;      Params:         0       0       0       0
  7426 ;;      Locals:         0       0       0       0
  7427 ;;      Temps:          1       0       0       0
  7428 ;;      Totals:         1       0       0       0
  7429 ;;Total ram usage:        1 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    1
  7432 ;; This function calls:
  7433 ;;		i1___bmul
  7434 ;; This function is called by:
  7435 ;;		_SPIIntResponse
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           
  7440                           ;psect for function _RX_getResponseBuffer
  7441  06BA                     _RX_getResponseBuffer:	
  7442                           
  7443                           ;UART_RX_SM.c: 254: return &responseBuffer[readRespIndex];
  7444                           
  7445                           ;incstack = 0
  7446                           ; Regs used in _RX_getResponseBuffer: [wreg+status,2+status,0+pclath+cstack]
  7447  06BA  3003               	movlw	3
  7448  06BB  00F4               	movwf	??_RX_getResponseBuffer
  7449  06BC  00F0               	movwf	i1___bmul@multiplicand
  7450  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  7451  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  7452  06BF  086B               	movf	_readRespIndex,w
  7453  06C0  26AA               	fcall	i1___bmul
  7454  06C1  3ED9               	addlw	(low (_responseBuffer| 0))& (0+255)
  7455  06C2  0008               	return
  7456  06C3                     __end_of_RX_getResponseBuffer:	
  7457  06C3                     __ptext43:	
  7458 ;; *************** function _RX_getStatusBuffer *****************
  7459 ;; Defined at:
  7460 ;;		line 249 in file "UART_RX_SM.c"
  7461 ;; Parameters:    Size  Location     Type
  7462 ;;		None
  7463 ;; Auto vars:     Size  Location     Type
  7464 ;;		None
  7465 ;; Return value:  Size  Location     Type
  7466 ;;                  1    wreg      PTR unsigned char 
  7467 ;; Registers used:
  7468 ;;		wreg, status,2, status,0, pclath, cstack
  7469 ;; Tracked objects:
  7470 ;;		On entry : 0/0
  7471 ;;		On exit  : 0/0
  7472 ;;		Unchanged: 0/0
  7473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7474 ;;      Params:         0       0       0       0
  7475 ;;      Locals:         0       0       0       0
  7476 ;;      Temps:          1       0       0       0
  7477 ;;      Totals:         1       0       0       0
  7478 ;;Total ram usage:        1 bytes
  7479 ;; Hardware stack levels used:    1
  7480 ;; Hardware stack levels required when called:    1
  7481 ;; This function calls:
  7482 ;;		i1___bmul
  7483 ;; This function is called by:
  7484 ;;		_SPIIntResponse
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           
  7489                           ;psect for function _RX_getStatusBuffer
  7490  06C3                     _RX_getStatusBuffer:	
  7491                           
  7492                           ;UART_RX_SM.c: 250: return &statusBuffer[readStatIndex];
  7493                           
  7494                           ;incstack = 0
  7495                           ; Regs used in _RX_getStatusBuffer: [wreg+status,2+status,0+pclath+cstack]
  7496  06C3  3003               	movlw	3
  7497  06C4  00F4               	movwf	??_RX_getStatusBuffer
  7498  06C5  00F0               	movwf	i1___bmul@multiplicand
  7499  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  7500  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  7501  06C8  086C               	movf	_readStatIndex,w
  7502  06C9  26AA               	fcall	i1___bmul
  7503  06CA  3EE2               	addlw	(low (_statusBuffer| 0))& (0+255)
  7504  06CB  0008               	return
  7505  06CC                     __end_of_RX_getStatusBuffer:	
  7506                           
  7507                           	psect	intentry
  7508  0004                     __pintentry:	
  7509                           ;incstack = 0
  7510                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7511                           
  7512  0004                     interrupt_function:	
  7513  007E                     saved_w	set	btemp
  7514  0004  00FE               	movwf	btemp
  7515  0005  0E03               	swapf	3,w
  7516  0006  00F9               	movwf	??_ISR+1
  7517  0007  0804               	movf	4,w
  7518  0008  00FA               	movwf	??_ISR+2
  7519  0009  080A               	movf	10,w
  7520  000A  00FB               	movwf	??_ISR+3
  7521  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7522  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7523  000D  087F               	movf	btemp+1,w
  7524  000E  00FC               	movwf	??_ISR+4
  7525  000F  118A  2D11         	ljmp	_ISR
  7526                           
  7527                           	psect	text38
  7528  0000                     __ptext38:	
  7529 ;; *************** function _UARTTXIntResponse *****************
  7530 ;; Defined at:
  7531 ;;		line 273 in file "UART_TX_SM.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;		None
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;		None               void
  7538 ;; Registers used:
  7539 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7545 ;;      Params:         0       0       0       0
  7546 ;;      Locals:         0       0       0       0
  7547 ;;      Temps:          1       0       0       0
  7548 ;;      Totals:         1       0       0       0
  7549 ;;Total ram usage:        1 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; This function calls:
  7552 ;;		Nothing
  7553 ;; This function is called by:
  7554 ;;		_ISR
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558  0000                     _UARTTXIntResponse:	
  7559                           ;psect for function _UARTTXIntResponse
  7560                           
  7561  0000                     __end_of_UARTTXIntResponse:	
  7562                           ;UART_TX_SM.c: 278: TXREG = XBeePacket[index++];
  7563                           
  7564                           ;UART_TX_SM.c: 277: } else {
  7565                           
  7566                           ;UART_TX_SM.c: 276: TXIE = 0;
  7567                           
  7568                           ;UART_TX_SM.c: 275: sendCompleteFlag = ((boolean) !((boolean) 0));
  7569                           
  7570                           ;UART_TX_SM.c: 274: if (index >= length) {
  7571                           
  7572                           ;incstack = 0
  7573                           ; Regs used in _UARTTXIntResponse: [wreg-fsr0h+status,2+status,0]
  7574                           
  7575                           
  7576                           	psect	text39
  7577  0000                     __ptext39:	
  7578 ;; *************** function _UARTRXIntResponse *****************
  7579 ;; Defined at:
  7580 ;;		line 257 in file "UART_RX_SM.c"
  7581 ;; Parameters:    Size  Location     Type
  7582 ;;		None
  7583 ;; Auto vars:     Size  Location     Type
  7584 ;;  newByte         1    7[COMMON] unsigned char 
  7585 ;; Return value:  Size  Location     Type
  7586 ;;		None               void
  7587 ;; Registers used:
  7588 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7594 ;;      Params:         0       0       0       0
  7595 ;;      Locals:         1       0       0       0
  7596 ;;      Temps:          3       0       0       0
  7597 ;;      Totals:         4       0       0       0
  7598 ;;Total ram usage:        4 bytes
  7599 ;; Hardware stack levels used:    1
  7600 ;; Hardware stack levels required when called:    1
  7601 ;; This function calls:
  7602 ;;		i1___bmul
  7603 ;;		i1_toggleRXBuffer
  7604 ;; This function is called by:
  7605 ;;		_ISR
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609  0000                     _UARTRXIntResponse:	
  7610                           ;psect for function _UARTRXIntResponse
  7611                           
  7612  0000                     __end_of_UARTRXIntResponse:	
  7613                           ; Switch size 1, requested type "space"
  7614                           ; Number of cases is 5, Range of values is 0 to 5
  7615                           ; switch strategies available:
  7616                           ; Name         Instructions Cycles
  7617                           ; simple_byte           16     9 (average)
  7618                           ; direct_byte           19     7 (fixed)
  7619                           ; jumptable            260     6 (fixed)
  7620                           ;	Chosen strategy is simple_byte
  7621                           
  7622                           ;UART_RX_SM.c: 309: }
  7623                           
  7624                           ;UART_RX_SM.c: 308: break;
  7625                           
  7626                           ;UART_RX_SM.c: 307: default:
  7627                           
  7628                           ;UART_RX_SM.c: 306: break;
  7629                           
  7630                           ;UART_RX_SM.c: 304: }
  7631                           ;UART_RX_SM.c: 305: currentState = WaitFor7E;
  7632                           
  7633                           ;UART_RX_SM.c: 303: RXFlag = ((boolean) !((boolean) 0));
  7634                           
  7635                           ;UART_RX_SM.c: 336: writeRXIndex = 1;
  7636                           
  7637                           ;UART_RX_SM.c: 335: readRXIndex = 0;
  7638                           
  7639                           ;UART_RX_SM.c: 333: writeRXIndex = 0;
  7640                           
  7641                           ;UART_RX_SM.c: 332: readRXIndex = 1;
  7642                           
  7643                           ;UART_RX_SM.c: 331: if (readRXIndex == 0) {
  7644                           
  7645                           ;psect for function i1_toggleRXBuffer
  7646                           
  7647                           ;UART_RX_SM.c: 302: toggleRXBuffer();
  7648                           
  7649                           ;UART_RX_SM.c: 301: if (0xFF == checksum) {
  7650                           
  7651                           ;UART_RX_SM.c: 300: checksum += newByte;
  7652                           
  7653                           ;UART_RX_SM.c: 299: case WaitForCkSum:
  7654                           
  7655                           ;UART_RX_SM.c: 297: }
  7656                           ;UART_RX_SM.c: 298: break;
  7657                           
  7658                           ;UART_RX_SM.c: 296: currentState = WaitForCkSum;
  7659                           
  7660                           ;UART_RX_SM.c: 295: currentByteIndex = 0;
  7661                           
  7662                           ;UART_RX_SM.c: 294: if (currentByteIndex == bodyByteCount) {
  7663                           
  7664                           ;UART_RX_SM.c: 292: }
  7665                           ;UART_RX_SM.c: 293: checksum += newByte;
  7666                           
  7667                           ;UART_RX_SM.c: 291: ++currentByteIndex;
  7668                           
  7669                           ;UART_RX_SM.c: 290: RXBuffer[writeRXIndex][currentByteIndex] = newByte;
  7670                           
  7671                           ;UART_RX_SM.c: 289: if (currentByteIndex < 10) {
  7672                           
  7673                           ;UART_RX_SM.c: 288: case SuckUpData:
  7674                           
  7675                           ;UART_RX_SM.c: 285: }
  7676                           ;UART_RX_SM.c: 286: break;
  7677                           
  7678                           ;UART_RX_SM.c: 284: currentState = SuckUpData;
  7679                           
  7680                           ;UART_RX_SM.c: 283: checksum = 0;
  7681                           
  7682                           ;UART_RX_SM.c: 282: currentByteIndex = 0;
  7683                           
  7684                           ;UART_RX_SM.c: 281: } else {
  7685                           
  7686                           ;UART_RX_SM.c: 280: currentState = WaitFor7E;
  7687                           
  7688                           ;UART_RX_SM.c: 279: if (bodyByteCount > 10) {
  7689                           
  7690                           ;UART_RX_SM.c: 278: bodyByteCount = newByte;
  7691                           
  7692                           ;UART_RX_SM.c: 277: case WaitForLSB:
  7693                           
  7694                           ;UART_RX_SM.c: 275: break;
  7695                           
  7696                           ;UART_RX_SM.c: 273: else
  7697                           ;UART_RX_SM.c: 274: currentState = WaitFor7E;
  7698                           
  7699                           ;UART_RX_SM.c: 272: currentState = WaitForLSB;
  7700                           
  7701                           ;UART_RX_SM.c: 271: if (newByte == 0)
  7702                           
  7703                           ;UART_RX_SM.c: 270: case WaitForMSB:
  7704                           
  7705                           ;UART_RX_SM.c: 268: break;
  7706                           
  7707                           ;UART_RX_SM.c: 267: currentState = WaitForMSB;
  7708                           
  7709                           ;UART_RX_SM.c: 266: if (newByte == 0x7E)
  7710                           
  7711                           ;UART_RX_SM.c: 265: case WaitFor7E:
  7712                           
  7713                           ;UART_RX_SM.c: 264: switch (currentState) {
  7714                           
  7715                           ;UART_RX_SM.c: 258: static uint8_t currentByteIndex;
  7716                           ;UART_RX_SM.c: 259: static uint8_t bodyByteCount;
  7717                           ;UART_RX_SM.c: 260: static uint8_t checksum;
  7718                           ;UART_RX_SM.c: 262: uint8_t newByte = RCREG;
  7719                           
  7720                           ;incstack = 0
  7721                           ; Regs used in _UARTRXIntResponse: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7722                           
  7723                           
  7724                           	psect	text40
  7725  0000                     __ptext40:	
  7726 ;; *************** function i1_toggleRXBuffer *****************
  7727 ;; Defined at:
  7728 ;;		line 330 in file "UART_RX_SM.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;		None
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;		None
  7733 ;; Return value:  Size  Location     Type
  7734 ;;		None               void
  7735 ;; Registers used:
  7736 ;;		wreg, status,2, status,0
  7737 ;; Tracked objects:
  7738 ;;		On entry : 0/0
  7739 ;;		On exit  : 0/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7742 ;;      Params:         0       0       0       0
  7743 ;;      Locals:         0       0       0       0
  7744 ;;      Temps:          0       0       0       0
  7745 ;;      Totals:         0       0       0       0
  7746 ;;Total ram usage:        0 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; This function calls:
  7749 ;;		Nothing
  7750 ;; This function is called by:
  7751 ;;		_UARTRXIntResponse
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755  0000                     __end_ofi1_toggleRXBuffer:	
  7756                           ;UART_RX_SM.c: 336: writeRXIndex = 1;
  7757                           
  7758                           ;UART_RX_SM.c: 335: readRXIndex = 0;
  7759                           
  7760                           ;UART_RX_SM.c: 334: } else {
  7761                           
  7762                           ;UART_RX_SM.c: 333: writeRXIndex = 0;
  7763                           
  7764                           ;UART_RX_SM.c: 332: readRXIndex = 1;
  7765                           
  7766                           ;UART_RX_SM.c: 331: if (readRXIndex == 0) {
  7767                           
  7768                           ;incstack = 0
  7769                           ; Regs used in i1_toggleRXBuffer: [wreg+status,2+status,0]
  7770                           
  7771                           ;psect for function i1_toggleRXBuffer
  7772                           
  7773                           
  7774                           	psect	text41
  7775  0000                     __ptext41:	
  7776 ;; *************** function _SPIIntResponse *****************
  7777 ;; Defined at:
  7778 ;;		line 179 in file "SPI_SM.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;		None
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;  readByte        1    6[COMMON] unsigned char 
  7783 ;; Return value:  Size  Location     Type
  7784 ;;		None               void
  7785 ;; Registers used:
  7786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7787 ;; Tracked objects:
  7788 ;;		On entry : 0/0
  7789 ;;		On exit  : 0/0
  7790 ;;		Unchanged: 0/0
  7791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7792 ;;      Params:         0       0       0       0
  7793 ;;      Locals:         1       0       0       0
  7794 ;;      Temps:          1       0       0       0
  7795 ;;      Totals:         2       0       0       0
  7796 ;;Total ram usage:        2 bytes
  7797 ;; Hardware stack levels used:    1
  7798 ;; Hardware stack levels required when called:    2
  7799 ;; This function calls:
  7800 ;;		_RX_clearResponseReady
  7801 ;;		_RX_getResponseBuffer
  7802 ;;		_RX_getStatusBuffer
  7803 ;;		_RX_newResponseReady
  7804 ;; This function is called by:
  7805 ;;		_ISR
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809  0000                     _SPIIntResponse:	
  7810                           ;psect for function _SPIIntResponse
  7811                           
  7812  0000                     __end_of_SPIIntResponse:	
  7813                           ;SPI_SM.c: 279: SSPIF = 0;
  7814                           
  7815                           ; Switch size 1, requested type "space"
  7816                           ; Number of cases is 5, Range of values is 0 to 4
  7817                           ; switch strategies available:
  7818                           ; Name         Instructions Cycles
  7819                           ; simple_byte           16     9 (average)
  7820                           ; direct_byte           17     7 (fixed)
  7821                           ; jumptable            260     6 (fixed)
  7822                           ;	Chosen strategy is simple_byte
  7823                           
  7824                           ;SPI_SM.c: 278: }
  7825                           
  7826                           ;SPI_SM.c: 277: break;
  7827                           
  7828                           ;SPI_SM.c: 276: default:
  7829                           
  7830                           ;SPI_SM.c: 275: break;
  7831                           
  7832                           ;SPI_SM.c: 274: currentState = Waiting4Command;
  7833                           
  7834                           ;SPI_SM.c: 273: SSPBUF = 0x00;
  7835                           
  7836                           ;SPI_SM.c: 272: case Waiting4Dummy4:
  7837                           
  7838                           ;SPI_SM.c: 271: break;
  7839                           
  7840                           ;SPI_SM.c: 270: currentState = Waiting4Dummy4;
  7841                           
  7842                           ;SPI_SM.c: 269: SSPBUF = SPIBuffer[2];
  7843                           
  7844                           ;SPI_SM.c: 268: case Waiting4Dummy3:
  7845                           
  7846                           ;SPI_SM.c: 267: break;
  7847                           
  7848                           ;SPI_SM.c: 266: currentState = Waiting4Dummy3;
  7849                           
  7850                           ;SPI_SM.c: 265: SSPBUF = SPIBuffer[1];
  7851                           
  7852                           ;SPI_SM.c: 264: case Waiting4Dummy2:
  7853                           
  7854                           ;SPI_SM.c: 263: break;
  7855                           
  7856                           ;SPI_SM.c: 262: currentState = Waiting4Dummy2;
  7857                           
  7858                           ;SPI_SM.c: 261: SSPBUF = SPIBuffer[0];
  7859                           
  7860                           ;SPI_SM.c: 260: case Waiting4Dummy1:
  7861                           
  7862                           ;SPI_SM.c: 259: break;
  7863                           
  7864                           ;SPI_SM.c: 257: }
  7865                           ;SPI_SM.c: 258: currentState = Waiting4Dummy1;
  7866                           
  7867                           ;SPI_SM.c: 255: SPIBuffer = &responseBytes;
  7868                           
  7869                           ;SPI_SM.c: 254: responseBytes[2] = 0xFF;
  7870                           
  7871                           ;SPI_SM.c: 253: responseBytes[1] = 0xFF;
  7872                           
  7873                           ;SPI_SM.c: 252: responseBytes[0] = 0xFF;
  7874                           
  7875                           ;SPI_SM.c: 242: }
  7876                           ;SPI_SM.c: 251: } else {
  7877                           
  7878                           ;SPI_SM.c: 241: SPIBuffer = &responseBytes;
  7879                           
  7880                           ;SPI_SM.c: 240: responseBytes[2] = 0x00;
  7881                           
  7882                           ;SPI_SM.c: 239: responseBytes[1] = 0x00;
  7883                           
  7884                           ;SPI_SM.c: 238: responseBytes[0] = 0x00;
  7885                           
  7886                           ;SPI_SM.c: 237: } else {
  7887                           
  7888                           ;SPI_SM.c: 236: commOpen = ((boolean) 0);
  7889                           
  7890                           ;UART_RX_SM.c: 246: newResponseAvailable = ((boolean) 0);
  7891                           
  7892                           ;psect for function _RX_clearResponseReady
  7893                           
  7894                           ;SPI_SM.c: 235: RX_clearResponseReady();
  7895                           
  7896                           ;SPI_SM.c: 234: SPIBuffer = RX_getResponseBuffer();
  7897                           
  7898                           ;UART_RX_SM.c: 242: return newResponseAvailable;
  7899                           
  7900                           ;psect for function _RX_newResponseReady
  7901                           
  7902                           ;SPI_SM.c: 233: if (RX_newResponseReady()) {
  7903                           
  7904                           ;SPI_SM.c: 230: } else if ((readByte & (0x00000080 | 0x00000040)) == (0x00000040)) {
  7905                           
  7906                           ;SPI_SM.c: 218: SPIBuffer = &responseBytes;
  7907                           
  7908                           ;SPI_SM.c: 217: responseBytes[2] = 0x00;
  7909                           
  7910                           ;SPI_SM.c: 216: responseBytes[1] = 0x00;
  7911                           
  7912                           ;SPI_SM.c: 214: }
  7913                           ;SPI_SM.c: 215: responseBytes[0] = 0x00;
  7914                           
  7915                           ;SPI_SM.c: 213: commOpen = ((boolean) !((boolean) 0));
  7916                           
  7917                           ;SPI_SM.c: 212: newRequest = ((boolean) !((boolean) 0));
  7918                           
  7919                           ;SPI_SM.c: 211: colorRequestData = readByte & ~(0x00000080 | 0x00000040);
  7920                           
  7921                           ;SPI_SM.c: 209: if (!commOpen) {
  7922                           
  7923                           ;SPI_SM.c: 206: } else if ((readByte & (0x00000080 | 0x00000040)) == (0x00000080)) {
  7924                           
  7925                           ;SPI_SM.c: 198: SPIBuffer = RX_getStatusBuffer();
  7926                           
  7927                           ;SPI_SM.c: 195: } else if ((readByte & (0x00000080 | 0x00000040)) == (0x00000080 | 0x000
      +                          00040)) {
  7928                           
  7929                           ;SPI_SM.c: 194: SPIBuffer = &responseBytes;
  7930                           
  7931                           ;SPI_SM.c: 193: responseBytes[2] = 0xFF;
  7932                           
  7933                           ;SPI_SM.c: 192: responseBytes[1] = 0xFF;
  7934                           
  7935                           ;SPI_SM.c: 191: responseBytes[0] = 0xFF;
  7936                           
  7937                           ;SPI_SM.c: 189: if (!radioPing) {
  7938                           
  7939                           ;SPI_SM.c: 188: SSPBUF = 0xFF;
  7940                           
  7941                           ;SPI_SM.c: 187: case Waiting4Command:
  7942                           
  7943                           ;SPI_SM.c: 186: switch (currentState) {
  7944                           
  7945                           ;SPI_SM.c: 183: readByte = SSPBUF;
  7946                           
  7947                           ;SPI_SM.c: 180: unsigned char readByte;
  7948                           ;SPI_SM.c: 182: if (BF == 1) {
  7949                           
  7950                           ;incstack = 0
  7951                           ; Regs used in _SPIIntResponse: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7952                           
  7953                           
  7954                           	psect	text42
  7955  0000                     __ptext42:	
  7956 ;; *************** function _RX_newResponseReady *****************
  7957 ;; Defined at:
  7958 ;;		line 241 in file "UART_RX_SM.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;		None
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;		None
  7963 ;; Return value:  Size  Location     Type
  7964 ;;                  1    wreg      unsigned char 
  7965 ;; Registers used:
  7966 ;;		wreg
  7967 ;; Tracked objects:
  7968 ;;		On entry : 0/0
  7969 ;;		On exit  : 0/0
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7972 ;;      Params:         0       0       0       0
  7973 ;;      Locals:         0       0       0       0
  7974 ;;      Temps:          0       0       0       0
  7975 ;;      Totals:         0       0       0       0
  7976 ;;Total ram usage:        0 bytes
  7977 ;; Hardware stack levels used:    1
  7978 ;; This function calls:
  7979 ;;		Nothing
  7980 ;; This function is called by:
  7981 ;;		_SPIIntResponse
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985  0000                     _RX_newResponseReady:	
  7986                           ;psect for function _RX_newResponseReady
  7987                           
  7988  0000                     __end_of_RX_newResponseReady:	
  7989                           ;UART_RX_SM.c: 242: return newResponseAvailable;
  7990                           
  7991                           ;incstack = 0
  7992                           ; Regs used in _RX_newResponseReady: [wreg]
  7993                           
  7994                           
  7995                           	psect	text46
  7996  0000                     __ptext46:	
  7997 ;; *************** function _RX_clearResponseReady *****************
  7998 ;; Defined at:
  7999 ;;		line 245 in file "UART_RX_SM.c"
  8000 ;; Parameters:    Size  Location     Type
  8001 ;;		None
  8002 ;; Auto vars:     Size  Location     Type
  8003 ;;		None
  8004 ;; Return value:  Size  Location     Type
  8005 ;;		None               void
  8006 ;; Registers used:
  8007 ;;		status,2
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8013 ;;      Params:         0       0       0       0
  8014 ;;      Locals:         0       0       0       0
  8015 ;;      Temps:          0       0       0       0
  8016 ;;      Totals:         0       0       0       0
  8017 ;;Total ram usage:        0 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; This function calls:
  8020 ;;		Nothing
  8021 ;; This function is called by:
  8022 ;;		_SPIIntResponse
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026  0000                     _RX_clearResponseReady:	
  8027                           ;psect for function _RX_clearResponseReady
  8028                           
  8029  0000                     __end_of_RX_clearResponseReady:	
  8030                           ;UART_RX_SM.c: 246: newResponseAvailable = ((boolean) 0);
  8031                           
  8032                           ;incstack = 0
  8033                           ; Regs used in _RX_clearResponseReady: [status,2]
  8034                           
  8035                           
  8036                           	psect	functab
  8037  0100                     __pfunctab:	
  8038  0100                     __fptable:	
  8039  0100                     fptable:	
  8040  0100  00FF               	movwf	(btemp+1)& (0+127)
  8041  0101  3001               	movlw	high fptable
  8042  0102  008A               	movwf	10
  8043  0103  087F               	movf	(btemp+1)& (0+127),w
  8044  0104  0782               	addwf	2,f
  8045  0105                     fpbase:	
  8046  0105  2905               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  8047  0106                     fp__InitUARTTXService:	
  8048  0106  158A  2DB7         	ljmp	_InitUARTTXService
  8049  0108                     fp__InitUARTRXService:	
  8050  0108  158A  2E85         	ljmp	_InitUARTRXService
  8051  010A                     fp__InitSPIService:	
  8052  010A  158A  2DE8         	ljmp	_InitSPIService
  8053  010C                     fp__InitPACSystemService:	
  8054  010C  118A  28EA         	ljmp	_InitPACSystemService
  8055  010E                     fp__CheckSPIEvent:	
  8056  010E  158A  2F07         	ljmp	_CheckSPIEvent
  8057  0110                     fp__CheckUARTRXEvent:	
  8058  0110  158A  2F32         	ljmp	_CheckUARTRXEvent
  8059  0112                     fp__CheckUARTTXEvent:	
  8060  0112                     entry__CheckUARTTXEvent:	
  8061  0112  158A  2EEE         	ljmp	_CheckUARTTXEvent
  8062  0114                     fp__PostPACSystemService:	
  8063  0114                     entry__PostPACSystemService:	
  8064  0114  118A  2FD2         	ljmp	_PostPACSystemService
  8065  0116                     fp__PostUARTRXService:	
  8066  0116                     entry__PostUARTRXService:	
  8067  0116  158A  2F4E         	ljmp	_PostUARTRXService
  8068  0118                     fp__PostUARTTXService:	
  8069  0118                     entry__PostUARTTXService:	
  8070  0118  118A  2BD2         	ljmp	_PostUARTTXService
  8071  011A                     fp__RunUARTTXService:	
  8072  011A  118A  2ECC         	ljmp	_RunUARTTXService
  8073  011C                     fp__RunUARTRXService:	
  8074  011C  118A  2A0A         	ljmp	_RunUARTRXService
  8075  011E                     fp__RunSPIService:	
  8076  011E  158A  2D9A         	ljmp	_RunSPIService
  8077  0120                     fp__RunPACSystemService:	
  8078  0120  158A  2E41         	ljmp	_RunPACSystemService
  8079  0122                     __end_of__fptable:	
  8080  007E                     btemp	set	126	;btemp
  8081  007E                     wtemp	set	126
  8082  007E                     wtemp0	set	126
  8083  0080                     wtemp1	set	128
  8084  0082                     wtemp2	set	130
  8085  0084                     wtemp3	set	132
  8086  0086                     wtemp4	set	134
  8087  0088                     wtemp5	set	136
  8088  007F                     wtemp6	set	127
  8089  007E                     ttemp	set	126
  8090  007E                     ttemp0	set	126
  8091  0081                     ttemp1	set	129
  8092  0084                     ttemp2	set	132
  8093  0087                     ttemp3	set	135
  8094  007F                     ttemp4	set	127
  8095  007E                     ltemp	set	126
  8096  007E                     ltemp0	set	126
  8097  0082                     ltemp1	set	130
  8098  0086                     ltemp2	set	134
  8099  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    63
    Data        9
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     57      80
    BANK1            80      0      75
    BANK2            80     13      69

Pointer List with Targets:

    ES_PostToService$1340	const PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    ES_Run$1334	const PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    ES_Timer_RTI_Resp$1298	const PTR FTN(struct ES_Event_t,)unsigned char  size(1) Largest target is 1
		 -> PostPACSystemService(), PostUARTTXService(), PostUARTRXService(), Absolute function(), 

    ES_PostToService$1293	const PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    ES_Run$1287	const PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    SPIBuffer	PTR unsigned char  size(1) Largest target is 6
		 -> NULL(NULL[0]), responseBytes(BANK1[3]), responseBuffer(BANK1[6]), statusBuffer(BANK1[6]), 

    sp__RX_getResponseBuffer	PTR unsigned char  size(1) Largest target is 6
		 -> responseBuffer(BANK1[6]), 

    sp__RX_getStatusBuffer	PTR unsigned char  size(1) Largest target is 6
		 -> statusBuffer(BANK1[6]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [8] size(1) Largest target is 1
		 -> PostPACSystemService(), PostUARTTXService(), PostUARTRXService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(1) Largest target is 3
		 -> ES_Run@ThisEvent(BANK1[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    S113$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(BANK2[12]), Queue2(BANK2[12]), Queue1(BANK2[12]), Queue0(BANK1[12]), 

    pPostKeyFunc	const PTR FTN(struct ES_Event_t,)unsigned char  size(1) Largest target is 1
		 -> ES_PostAll(), 

    S57$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(1) Largest target is 3
		 -> RunPACSystemService(), RunSPIService(), RunUARTTXService(), RunUARTRXService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(1) Largest target is 3
		 -> RunPACSystemService(), RunSPIService(), RunUARTTXService(), RunUARTRXService(), 

    S57$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> InitPACSystemService(), InitSPIService(), InitUARTTXService(), InitUARTRXService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> InitPACSystemService(), InitSPIService(), InitUARTTXService(), InitUARTRXService(), 

    ES_EventList	const PTR FTN()unsigned char [3] size(1) Largest target is 1
		 -> CheckSPIEvent(), CheckUARTTXEvent(), CheckUARTRXEvent(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_UARTRXIntResponse
    _UARTRXIntResponse->i1___bmul
    _SPIIntResponse->_RX_getResponseBuffer
    _SPIIntResponse->_RX_getStatusBuffer
    _RX_getStatusBuffer->i1___bmul
    _RX_getResponseBuffer->i1___bmul

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunUARTRXService
    _RunUARTTXService->_retrySend
    _retrySend->_PostPACSystemService
    _ES_Timer_RTI_Resp->_PostPACSystemService
    _ES_Timer_RTI_Resp->_PostUARTRXService
    _ES_Timer_RTI_Resp->_PostUARTTXService
    _PostPACSystemService->_ES_PostToService
    _ES_DeQueue->___bmul
    _ES_CheckUserEvents->_CheckSPIEvent
    _CheckUARTTXEvent->_ES_PostToService
    _CheckUARTRXEvent->_PostUARTRXService
    _PostUARTRXService->_ES_PostToService
    _CheckSPIEvent->_PostUARTTXService
    _PostUARTTXService->_ES_PostToService
    _ES_Initialize->_InitPACSystemService
    _ES_Initialize->_InitSPIService
    _ES_Initialize->_InitUARTRXService
    _ES_Initialize->_InitUARTTXService
    _InitUARTTXService->_ES_PostToService
    _InitUARTRXService->_ES_PostToService
    _InitSPIService->_ES_PostToService
    _InitPACSystemService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___bmul
    _ES_InitQueue->___bmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _ES_Run->_RunUARTRXService

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   49567
                                             55 BANK0      2     2      0
                      _ES_Initialize
                             _ES_Run
                         _USART_Init
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (0) _ES_Run                                               8     6      2   34731
                                             47 BANK0      8     6      2
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                  _ES_Timer_RTI_Resp
                     _IsTimerPending
                _RunPACSystemService *
                      _RunSPIService *
                   _RunUARTRXService *
                   _RunUARTTXService *
                             ___bmul
 ---------------------------------------------------------------------------------
 (0) _RunUARTTXService                                     8     4      4    4684
                                             36 BANK0      8     4      4
                 _ES_Timer_InitTimer
                _TX_appendXBeePacket
                 _TX_clearXBeePacket
                     _TX_getChecksum
                          _retrySend
                    _superPACAddrSet
 ---------------------------------------------------------------------------------
 (1) _superPACAddrSet                                      6     6      0      24
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (0) _retrySend                                            5     4      1    3539
                                             31 BANK0      5     4      1
               _PostPACSystemService
 ---------------------------------------------------------------------------------
 (1) _TX_getChecksum                                       3     3      0      70
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _TX_clearXBeePacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TX_appendXBeePacket                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (0) _RunUARTRXService                                    24    20      4    5582
                                             36 BANK0     11     7      4
                                              0 BANK2     13    13      0
                 _ES_Timer_InitTimer
                  _PostUARTTXService
                             ___bmul
                   _toggleRespBuffer
                   _toggleStatBuffer
 ---------------------------------------------------------------------------------
 (0) _RunSPIService                                        7     3      4      23
                                             36 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (0) _RunPACSystemService                                  8     4      4     800
                                             36 BANK0      8     4      4
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (1) _ES_Timer_InitTimer                                   4     2      2     636
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _IsTimerPending                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (0) _ES_Timer_RTI_Resp                                    4     3      1   10635
                                             31 BANK0      4     3      1
                   Absolute function *
                     _ES_GetMSBitSet
               _PostPACSystemService *
                  _PostUARTRXService *
                  _PostUARTTXService *
 ---------------------------------------------------------------------------------
 (1) _PostPACSystemService                                 3     0      3    3468
                                             28 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (1) _ES_GetMSBitSet                                       7     7      0     181
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _ES_DeQueue                                          17    14      3    1401
                                              4 BANK0     17    14      3
                             ___bmul
 ---------------------------------------------------------------------------------
 (0) _ES_CheckUserEvents                                   1     0      1   10481
                                             38 BANK0      1     0      1
                      _CheckSPIEvent
                   _CheckUARTRXEvent
                   _CheckUARTTXEvent
 ---------------------------------------------------------------------------------
 (1) _CheckUARTTXEvent                                     4     4      0    3353
                                             28 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (0) _CheckUARTRXEvent                                     6     4      2    3474
                                             31 BANK0      6     4      2
                  _PostUARTRXService
 ---------------------------------------------------------------------------------
 (1) _PostUARTRXService                                    3     0      3    3403
                                             28 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (0) _CheckSPIEvent                                        7     5      2    3654
                                             31 BANK0      7     5      2
                  _PostUARTTXService
 ---------------------------------------------------------------------------------
 (1) _PostUARTTXService                                    3     0      3    3583
                                             28 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (0) _ES_Initialize                                        8     6      2   14768
                                             33 BANK0      8     6      2
                       _ES_InitQueue
                  _ES_Sys_Timer_Init
               _InitPACSystemService *
                     _InitSPIService *
                  _InitUARTRXService *
                  _InitUARTTXService *
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _InitUARTTXService                                    5     4      1    3347
                                             28 BANK0      5     4      1
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (1) _InitUARTRXService                                    5     4      1    3347
                                             28 BANK0      5     4      1
                   _ES_PostToService
                     _toggleRXBuffer
                   _toggleRespBuffer
                   _toggleStatBuffer
 ---------------------------------------------------------------------------------
 (1) _toggleStatBuffer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _toggleRespBuffer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _toggleRXBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSPIService                                       5     4      1    3347
                                             28 BANK0      5     4      1
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (1) _InitPACSystemService                                 5     4      1    3412
                                             28 BANK0      5     4      1
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _ES_PostToService                                     9     6      3    3282
                                             19 BANK0      9     6      3
                     _ES_EnQueueFIFO
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _ES_EnQueueFIFO                                      15    10      5    1500
                                              4 BANK0     15    10      5
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     825
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _ES_Sys_Timer_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_InitQueue                                         7     4      3     227
                                              4 BANK0      7     4      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  5     5      0     691
                                              8 COMMON     5     5      0
                     _SPIIntResponse
                  _UARTRXIntResponse
                  _UARTTXIntResponse
 ---------------------------------------------------------------------------------
 (6) _UARTTXIntResponse                                    1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _UARTRXIntResponse                                    4     4      0     314
                                              4 COMMON     4     4      0
                           i1___bmul
                   i1_toggleRXBuffer
 ---------------------------------------------------------------------------------
 (7) i1_toggleRXBuffer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _SPIIntResponse                                       2     2      0     377
                                              5 COMMON     2     2      0
              _RX_clearResponseReady
               _RX_getResponseBuffer
                 _RX_getStatusBuffer
                _RX_newResponseReady
 ---------------------------------------------------------------------------------
 (7) _RX_newResponseReady                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _RX_getStatusBuffer                                   1     1      0     125
                                              4 COMMON     1     1      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (7) _RX_getResponseBuffer                                 1     1      0     125
                                              4 COMMON     1     1      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (7) i1___bmul                                             4     3      1     125
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (7) _RX_clearResponseReady                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
       ___bmul (ARG)
     _ES_Sys_Timer_Init
     _InitPACSystemService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
         ___bmul
     _InitSPIService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
         ___bmul
     _InitUARTRXService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
         ___bmul
       _toggleRXBuffer
       _toggleRespBuffer
       _toggleStatBuffer
     _InitUARTTXService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___bmul
         ___bmul
     ___bmul *
   _ES_Run
     _ES_CheckUserEvents
       _CheckSPIEvent
         _PostUARTTXService
           _ES_PostToService
             _ES_EnQueueFIFO
               ___bmul
             ___bmul
       _CheckUARTRXEvent
         _PostUARTRXService
           _ES_PostToService
             _ES_EnQueueFIFO
               ___bmul
             ___bmul
       _CheckUARTTXEvent
         _ES_PostToService
           _ES_EnQueueFIFO
             ___bmul
           ___bmul
     _ES_DeQueue
       ___bmul
     _ES_GetMSBitSet
     _ES_Timer_RTI_Resp
       Absolute function(Fake) *
       _ES_GetMSBitSet *
       _PostPACSystemService *
         _ES_PostToService
           _ES_EnQueueFIFO
             ___bmul
           ___bmul
       _PostUARTRXService *
         _ES_PostToService
           _ES_EnQueueFIFO
             ___bmul
           ___bmul
       _PostUARTTXService *
         _ES_PostToService
           _ES_EnQueueFIFO
             ___bmul
           ___bmul
     _IsTimerPending
     _RunPACSystemService *
       _ES_Timer_InitTimer
     _RunSPIService *
     _RunUARTRXService *
       _ES_Timer_InitTimer
       _PostUARTTXService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___bmul
           ___bmul
       ___bmul
       _toggleRespBuffer
       _toggleStatBuffer
     _RunUARTTXService *
       _ES_Timer_InitTimer
       _TX_appendXBeePacket
       _TX_clearXBeePacket
       _TX_getChecksum
       _retrySend
         _PostPACSystemService
           _ES_PostToService
             _ES_EnQueueFIFO
               ___bmul
             ___bmul
       _superPACAddrSet
     ___bmul *
   _USART_Init

 _ISR (ROOT)
   _SPIIntResponse
     _RX_clearResponseReady
     _RX_getResponseBuffer
       i1___bmul
     _RX_getStatusBuffer
       i1___bmul
     _RX_newResponseReady
   _UARTRXIntResponse
     i1___bmul
     i1_toggleRXBuffer
   _UARTTXIntResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      D      45       7       86.3%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4B       5       93.8%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     39      50       3      100.0%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      EE      10        0.0%
ABS                  0      0      EE       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Feb 04 20:34:42 2016

                                 pc 0002                      ___bmul@product 0022  
        __size_of_ES_Sys_Timer_Init 0021                         __CFG_CP$OFF 0000  
                                l12 0EE8                                  _BF 04A0  
                                l74 0206                                  l85 0197  
                   ?_toggleRXBuffer 0070                                  fsr 0004  
            ?_RX_clearResponseReady 0070                                 l200 0FE0  
                               l263 00A8                                 l347 0E40  
                               l534 070E                                 l472 000B  
                               l464 0F4A                                 l473 000F  
                               l474 000F                                 l546 0749  
                               l467 000B                                 l715 0F2E  
                               l468 000F                                 l469 000F  
                               l477 000B                                 l478 000F  
                               l479 000F               __end_of_ES_Initialize 020A  
                               _GIE 005F                                 _RC0 0038  
                               _RC3 003B                                 _RC7 003F  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                        __CFG_CPD$OFF 0000  
                               _ISR 0511                                 _PSA 040B  
                SPI_SM@currentState 00C3                                 fsr0 0004  
                               indf 0000                        __CFG_FOSC$HS 0000  
           ES_EnQueueFIFO@Event2Add 0026              __end_of_InitSPIService 0E14  
                 ?_ES_PostToService 0033                                ?_ISR 0070  
                   ?_SPIIntResponse 0070                                l3201 03C9  
                              l2361 00E8                                l2353 00B6  
                              l2409 07F7                                l3219 04D1  
                              l2381 0009                                l3341 000C  
                              l3333 0000                                l2357 00E3  
                              l2445 07A2                                l2383 000B  
                              l3343 0000                                l3335 0007  
                              l2447 07B1                                l2385 000C  
                              l2377 0000                                l3345 0007  
                              l3337 0009                                l3281 0F2C  
                              l3409 0049                                l3601 0741  
                              l2379 0007                                l3347 0009  
                              l3339 000B                                l3419 009C  
                              l3611 074F                                l3603 0744  
                              l3515 03A0                                l3197 03C4  
                              l3349 000D                                l3269 0F07  
                              l3285 0F32                                l3621 0778  
                              l3509 0394                                l3517 03AA  
                              l3711 01A7                                l3607 074C  
                              l3615 0765                                l3393 0FF4  
                              l3553 06D5                                l3617 0773  
                              l3481 02DA                                l3449 020E  
                              l3715 01BC                                l3299 0F49  
                              l3459 0233                                l3725 01FC  
                              l3549 06D0                                l3493 0326  
                              l3653 0E5F                                l3661 0E79  
                              l3645 0E45                                l3741 0161  
                              l3719 01BE                                l3399 0FFE  
                              l3583 0713                                l3647 0E4D  
                              l3751 018C                                l3729 0205  
                              l3595 0735                                l3659 0E6C  
                              l3747 0125                                l3589 0725  
                              l3749 0189                                l3935 0E38  
                              l3961 0756                                _ANS4 08F4  
                              _ANS7 08F7                                _ANS9 08F9  
                              _BRGH 04C2                                _T0IE 005D  
                              _T0IF 005A                                _CREN 00C4  
                              _T0CS 040D                                u1320 0007  
                              u1321 0006                                u1254 00C6  
                              u1350 07E4                                u1255 00C4  
                              u1360 07E5                                u1275 00D3  
                              u2340 0007                                u2341 0006  
                              u2350 0007                                u2351 0006  
                              u2505 031D                                _PEIE 005E  
                              _RCIE 0465                                _RCIF 0065  
                              _TMR0 0001                                _SPEN 00C7  
                ??_ES_PostToService 0036                                _TXIE 0464  
                              _TXEN 04C5                                _TXIF 0064  
                              _SYNC 04C4                          _XBeePacket 00B0  
                              _main 0E14                         ?_ES_DeQueue 0024  
                              _time 00C1                                btemp 007E  
                     main@ErrorType 0058                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                       __CFG_IESO$OFF 0000  
                      _statusBuffer 00E2                   ___bmul@multiplier 0023  
                     __CFG_MCLRE$ON 0000              ??_RX_getResponseBuffer 0074  
                             ??_ISR 0078                UART_TX_SM@MyPriority 005E  
        __size_of_ES_Timer_RTI_Resp 0076                  ES_Run@HighestPrior 0056  
                  _CheckUARTRXEvent 0F32               _ES_PostToService$1340 0039  
                  _CheckUARTTXEvent 0EEE                        _superPACAddr 00BF  
                             ?_main 0070                               _ANS11 08FB  
                             _BRG16 04DB                       __CFG_WDTE$OFF 0000  
                             i1l426 0004                               i1l450 001D  
                             i1l451 001E                               i1l700 008C  
                             i1l444 0080                               i1l452 002A  
                             i1l460 0091                               i1l429 0003  
                             i1l701 00A2                               i1l453 0035  
                             i1l445 0007                               i1l702 00F1  
                             i1l454 0036                               i1l446 0010  
                             i1l703 00AA                               i1l447 0091  
                             i1l455 0053                               i1l704 00B8  
                             i1l456 0067                               i1l448 0011  
                             i1l705 00C6                               i1l457 0068  
                             i1l449 001B                               i1l706 00D5  
                             i1l458 007B                               i1l707 00DC  
                             i1l467 000B                               i1l459 007E  
                             i1l708 00F5                               i1l468 000F  
                             i1l580 000E                               i1l469 000F  
                             i1l581 001A                               i1l582 001A  
                             i1l690 000D                               i1l691 002A  
                             i1l692 00A5                               i1l693 003C  
                             i1l694 00A4                               i1l695 0060  
                             i1l688 00F5                               i1l696 0056  
                             i1l689 00DE                               i1l697 00A3  
                             i1l698 008D                               i1l699 0080  
                             _RCREG 001A                               _SPBRG 0099  
                             _PORTC 0007                               _SSPIE 0463  
                             _SSPIF 0063                               _TXREG 0019  
                             _Ready 0062                      __CFG_FCMEN$OFF 0000  
            ES_EnQueueFIFO@saveCrit 002F                     ?_InitSPIService 003C  
                             _index 0067                       _TMR_MaskArray 0831  
                  ??_TX_getChecksum 0020                               fpbase 0105  
                  __end_ofi1___bmul 06BA                      __CFG_BOREN$OFF 0000  
                             pclath 000A         __end_of_TX_appendXBeePacket 0796  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
        __end_of_TX_clearXBeePacket 079C         RunUARTRXService@ReturnEvent 0158  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                  _RX_getStatusBuffer 06C3  
                       ?_USART_Init 0070          PACSystemService@MyPriority 005B  
                   __initialization 0013              ES_GetMSBitSet@LoopCntr 0026  
        __end_of_ES_CheckUserEvents 0EEE                        __end_of_main 0E41  
               ?_RX_getStatusBuffer 0070           ES_Timer_RTI_Resp@NewEvent 00BA  
               _RX_newResponseReady 0000        ES_EnQueueFIFO@InsertionPoint 0030  
               __end_of_EventQueues 0821                              ??_main 0057  
               __size_of_ES_DeQueue 00A7                     _Nybble2MSBitNum 0806  
                 RunUARTRXService@i 0163                        _writeRXIndex 006D  
             __end_of_RunSPIService 0DA7            RunSPIService@ReturnEvent 0048  
              ??_RX_getStatusBuffer 0074              __size_of_CheckSPIEvent 002B  
                  fp__CheckSPIEvent 010E                ?_RX_newResponseReady 0070  
    UARTRXIntResponse@bodyByteCount 005D                          _MyPriority 0060  
                  ??_ES_GetMSBitSet 0020             fp__InitPACSystemService 010C  
                            i1l3041 0000                              i1l3043 0008  
                            i1l3045 000E                              i1l3047 0015  
                            i1l2465 06AC                              i1l2469 06B1  
                            i1l2671 0004                              i1l2673 0000  
                            i1l3801 0085                              i1l3811 00B8  
                            i1l3803 008D                              i1l2669 0000  
                            i1l3821 00DD                              i1l3813 00BF  
                            i1l3805 00A5                              i1l3815 00C6  
                            i1l3807 00AA                              i1l3823 00DE  
                            i1l2871 000C                              i1l2863 0000  
                            i1l3831 0011                              i1l3911 067F  
                            i1l3903 0519                              i1l3817 00CE  
                            i1l3809 00B1                              i1l3761 0006  
                            i1l2865 0007                              i1l3841 002A  
                            i1l3833 0016                              i1l3825 0000  
                            i1l3819 00D5                              i1l3771 0033  
                            i1l3763 000D                              i1l2867 0009  
                            i1l3851 0053                              i1l3843 002E  
                            i1l3835 001B                              i1l3827 0007  
                            i1l3915 069C                              i1l3907 05F0  
                            i1l3781 0053                              i1l3773 003C  
                            i1l3765 0010                              i1l2869 000B  
                            i1l3861 0073                              i1l3853 0059  
                            i1l3845 0036                              i1l3837 001E  
                            i1l3829 000D                              i1l3791 0069  
                            i1l3783 0056                              i1l3775 0045  
                            i1l3767 0017                              i1l3759 0000  
                            i1l3863 0076                              i1l3855 0061  
                            i1l3847 003C                              i1l3839 0028  
                            u205_20 0008                              i1l3793 0071  
                            i1l3785 0057                              i1l3777 004C  
                            i1l3769 002A                              i1l3865 007B  
                            i1l3857 0062                              i1l3849 004E  
                            u205_21 0007                              i1l3795 0079  
                            i1l3787 0058                              i1l3779 0051  
                            i1l3867 007F                              i1l3859 0068  
                            i1l3797 007C                              i1l3789 0060  
                            i1l3869 0080                              i1l3799 0080  
                            u3027jf 0E28                              u3027jt 0002  
                            u3047jf 0E33                              _INTCON 000B  
                            u3047jt 084B                              u2367jf 0ED8  
                            u2367jt 0847                              u2387jf 0EE1  
                            u2637jf 0741                              u2387jt 0849  
                            u2637jt 07FB                              u2657jf 074E  
                            u2817jf 0194                              u282_20 0006  
                            u290_20 0016                    i1_toggleRXBuffer 0000  
                            u282_21 0005                              u290_21 0015  
                            u283_20 0017                              u179_20 0007  
                            u291_20 0028                              u283_21 0016  
                            u179_21 0006                              u291_21 0027  
                            u2657jt 07FD                              u2817jt 084F  
                            u284_20 0033                              u292_20 003C  
                            u284_21 0032                              u292_21 003B  
                            u2767jf 0180                              u285_20 0045  
                            u293_20 0061                              u285_21 0044  
                            u293_21 0060                              u286_20 004C  
                            u294_20 0073                              u286_21 004B  
                            u294_21 0072                              u2767jt 0845  
                            u287_20 0069                              u287_21 0068  
                            u2797jf 018C                              u288_20 0071  
                            u288_21 0070                              u289_20 000D  
                            u289_21 000C                              u2797jt 084D  
                            _OSCCON 008F                              _ES_Run 0122  
                            _SPBRGH 009A                              _TRISC0 0438  
                            _TRISB4 0434                              _TRISC3 043B  
                            _TRISB6 0436                              _TRISC6 043E  
                            _TRISC7 043F                              _SSPCON 0014  
                            _SSPBUF 0013                   ?_toggleRespBuffer 0070  
                  ??_IsTimerPending 0020                    __end_of__fptable 0122  
                            _RXFlag 0061                    ??_ES_EnQueueFIFO 0029  
                    _Timer2PostFunc 0839                      __CFG_PWRTE$OFF 0000  
                ??_toggleRespBuffer 0020                              _Queue0 00CD  
                            _Queue1 0134                              _Queue2 0140  
                            _Queue3 014C                              ___bmul 03C0  
              __end_of_pPostKeyFunc 0845                              _length 0068  
       __size_of_ES_Timer_InitTimer 0027                   ?_RunUARTRXService 0044  
         ES_Timer_InitTimer@NewTime 0020                  ??_RunUARTRXService 0048  
                 ?_RunUARTTXService 0044                              fptable 0100  
                 ?_toggleStatBuffer 0070                    _sendCompleteFlag 00CC  
                            fptotal 001C              ES_InitQueue@pThisQueue 0029  
                            saved_w 007E                  ??_RunUARTTXService 0048  
                ??_toggleStatBuffer 0020                 __size_of_USART_Init 001A  
              _newResponseAvailable 0069               ??_RX_newResponseReady 0070  
              ES_DeQueue@pThisQueue 0033             ES_GetMSBitSet@Val2Check 0023  
            UART_TX_SM@currentState 005F             __end_of__initialization 0033  
            __end_of_Timer2PostFunc 0841            __size_of_superPACAddrSet 001E  
               ___bmul@multiplicand 0020                    ??_toggleRXBuffer 0020  
                       _EventQueues 0815                      __pcstackCOMMON 0070  
                     _CheckSPIEvent 0F07        __end_of_PostPACSystemService 07DD  
                      __pidataBANK1 0D91                       ?_ES_InitQueue 0024  
           ??_RX_clearResponseReady 0070             __end_of_Nybble2MSBitNum 0815  
                 _PostUARTRXService 0F4E                       _readRespIndex 006B  
                 __pjmp_tab__ES_Run 084B                     _TMR_ActiveFlags 0064  
      RunPACSystemService@ThisEvent 0044                           ?i1___bmul 0070  
                ?_PostUARTRXService 003C                   _PostUARTTXService 03D2  
        PostUARTTXService@ThisEvent 003C             ES_GetMSBitSet@ReturnVal 0024  
               fp__CheckUARTRXEvent 0110           RunUARTTXService@ThisEvent 0044  
               fp__CheckUARTTXEvent 0112                    ??_SPIIntResponse 0075  
         CheckUARTRXEvent@CommEvent 0042                  ?_PostUARTTXService 003C  
                     _readStatIndex 006C                      _TMR_TimerArray 00A0  
               ??_PostUARTRXService 003F                    i1___bmul@product 0073  
     __size_of_InitPACSystemService 0015                        _hasHeartbeat 00C9  
                 _UARTRXIntResponse 0000            ES_EnQueueFIFO@pThisQueue 0031  
       __end_of_RunPACSystemService 0E85                 ??_PostUARTTXService 003F  
          __end_of_CheckUARTRXEvent 0F4E                          __pbssBANK0 0059  
                        __pbssBANK1 00A0                          __pbssBANK2 0120  
          __end_of_CheckUARTTXEvent 0F07                  ?_UARTRXIntResponse 0070  
                           ?_ES_Run 004F                        ??_ES_DeQueue 0027  
         InitUARTTXService@Priority 003C                 ??_UARTRXIntResponse 0074  
                    ?_CheckSPIEvent 003F                          __pmaintext 0E14  
         __size_of_ES_PostToService 0035                             ?___bmul 0020  
                    ??_ES_InitQueue 0027           __end_of_PostUARTRXService 0F59  
    RunPACSystemService@ReturnEvent 0049              entry__CheckUARTTXEvent 0112  
                        __pintentry 0004           __end_of_PostUARTTXService 03DC  
                        ??i1___bmul 0071          entry__PostPACSystemService 0114  
                  ??_InitSPIService 003D                  __size_of_retrySend 001D  
                __end_of_ES_DeQueue 1000           __end_of_UARTRXIntResponse 0000  
                           _SSPSTAT 0094                          __stringtab 0800  
                           _TXError 00C6                     __size_of_ES_Run 0079  
      InitPACSystemService@Priority 003C              __size_of_ES_Initialize 006F  
                      ??_USART_Init 0020                     __size_of___bmul 0012  
                 ??_superPACAddrSet 0020                  _TX_clearXBeePacket 0796  
     __size_of_RX_getResponseBuffer 0009               ES_Timer_InitTimer@Num 0023  
          __end_ofi1_toggleRXBuffer 0000                          _newRequest 00CA  
                           __ptext1 0DCE                             __ptext2 0122  
                           __ptext3 0E41                             __ptext4 0D9A  
                           __ptext5 020A                             __ptext6 06CC  
                           __ptext7 07DD                             __ptext8 07B5  
                           __ptext9 079C                        __size_of_ISR 0199  
     __pjmp_tab__ES_CheckUserEvents 084F                 ?_TX_clearXBeePacket 0070  
                _ES_CheckUserEvents 0ED2                 i1___bmul@multiplier 0072  
                   ES_Run@ThisEvent 00DF           UARTRXIntResponse@checksum 00C4  
               _superPACAddrSet$696 0024                  __end_of_USART_Init 0DE8  
                      _pPostKeyFunc 0844                             clrloop0 0D8A  
              _PostPACSystemService 07D2                   _UARTTXIntResponse 0000  
              end_of_initialization 0033                   _InitUARTRXService 0E85  
               ?_ES_CheckUserEvents 0046                  ?_UARTTXIntResponse 0070  
                ?_InitUARTRXService 003C                   _InitUARTTXService 0DB7  
      ES_PostToService@WhichService 003B                     ??_CheckSPIEvent 0041  
              ??_TX_clearXBeePacket 0020                   __end_of_retrySend 07D2  
                ?_InitUARTTXService 003C        __size_of_TX_appendXBeePacket 0014  
               ??_UARTTXIntResponse 0070                 ??_InitUARTRXService 003D  
        __size_of_PostUARTRXService 000B   UARTRXIntResponse@currentByteIndex 007D  
              ??_ES_CheckUserEvents 0047                 ??_InitUARTTXService 003D  
        __size_of_PostUARTTXService 000A           __size_of_toggleRespBuffer 0000  
           RunUARTRXService@TXEvent 0160                       _ES_Initialize 019B  
                         _SPIBuffer 0063          __size_of_UARTRXIntResponse 0000  
         __end_of_UARTTXIntResponse 0000                __end_of_ES_EventList 0844  
         __end_of_InitUARTRXService 0ED2         __size_of_RX_getStatusBuffer 0009  
             ?_PostPACSystemService 003C                __end_of_ES_InitQueue 0407  
                    ES_Initialize@i 0048           __size_of_RunUARTRXService 01B6  
         __end_of_InitUARTTXService 0DCE           __size_of_RunUARTTXService 00B6  
              __pjmp_tab__retrySend 07FB           __size_of_toggleStatBuffer 0000  
                    __end_of_ES_Run 019B             __size_of_TX_getChecksum 0019  
                  _ES_PostToService 044F             RunUARTRXService@msgAddr 015B  
            RunSPIService@ThisEvent 0044          __end_of_ES_Timer_InitTimer 044F  
            __size_of_RunSPIService 000D                    fp__RunSPIService 011E  
              __end_of_ServDescList 0831                      __end_of___bmul 03D2  
    __size_of_RX_clearResponseReady 0000       __end_of_RX_clearResponseReady 0000  
       __end_of_RX_newResponseReady 0000                      ?_ES_Initialize 0041  
                 __size_ofi1___bmul 0010                 start_initialization 0013  
                         _ByteCount 00C5                         __end_of_ISR 06AA  
                 ?_CheckUARTRXEvent 003F    ES_Timer_RTI_Resp@NeedsProcessing 0059  
                 ?_CheckUARTTXEvent 0070                            ??_ES_Run 0051  
                ??_CheckUARTRXEvent 0041                           _TickCount 0065  
                ??_CheckUARTTXEvent 003C              fp__RunPACSystemService 0120  
           __size_of_ES_GetMSBitSet 003E        __end_of_InitPACSystemService 00FF  
                          ??___bmul 0021                          init_fetch0 0DA7  
                       __pdataBANK1 00E2             __size_of_IsTimerPending 0008  
           __size_of_ES_EnQueueFIFO 0085          PostUARTRXService@ThisEvent 003C  
     PostPACSystemService@ThisEvent 003C           RunUARTRXService@ThisEvent 0044  
             RunUARTRXService@i_567 0164                         __pbssCOMMON 007D  
                         ___latbits 0001                       __pcstackBANK0 0020  
        InitUARTTXService@ThisEvent 003E                       __pcstackBANK2 0158  
            ??_PostPACSystemService 003F          __size_of_UARTTXIntResponse 0000  
                ES_InitQueue@pBlock 0024                       _RunSPIService 0D9A  
                 __size_of__fptable 0022               __end_of_TMR_MaskArray 0839  
        __size_of_InitUARTRXService 004D                      _responseBuffer 00D9  
        __size_of_InitUARTTXService 0017                     _superPACAddrSet 07DD  
                      _currentState 0066        __size_of_RunPACSystemService 0044  
         RunUARTRXService@addrEvent 015D                           __pfunctab 0100  
                         __pjmp_tab 0845              UART_TX_SM@superPACAddr 00BD  
                   ??_ES_Initialize 0043                    _toggleRespBuffer 0000  
          ES_PostToService@TheEvent 0033                           __pstrings 0800  
                 ?i1_toggleRXBuffer 0070             __size_of_toggleRXBuffer 0000  
             __size_of_ES_InitQueue 002B                  ??i1_toggleRXBuffer 0070  
                    ?_RunSPIService 0044                 _TX_appendXBeePacket 0782  
              fp__PostUARTRXService 0116                           _radioPing 00CB  
      __end_of_RX_getResponseBuffer 06C3                    _RunUARTRXService 020A  
              ES_Initialize@NewRate 0041                fp__PostUARTTXService 0118  
         ES_GetMSBitSet@Nybble2Test 0025                   interrupt_function 0004  
           __size_of_SPIIntResponse 0000                    _RunUARTTXService 06CC  
                  _toggleStatBuffer 0000                           clear_ram0 0D89  
                    _writeRespIndex 006E               i1___bmul@multiplicand 0070  
                    _TX_getChecksum 079C                ?_TX_appendXBeePacket 0070  
                      _ES_EventList 0841                           _retrySend 07B5  
                      _ES_InitQueue 03DC                      _writeStatIndex 006F  
                          i1___bmul 06AA                         __stringbase 0805  
                          _RXBuffer 0120                ES_EnQueueFIFO@pBlock 0024  
                  SPI_SM@MyPriority 005C            __end_of_ES_PostToService 0484  
           __end_of_superPACAddrSet 07FB       InitPACSystemService@ThisEvent 003E  
        TX_appendXBeePacket@newByte 0021                _InitPACSystemService 00EA  
                    _BitNum2SetMask 0821                        _ServDescList 0829  
           __size_of_InitSPIService 002C                   fp__InitSPIService 010A  
       RunUARTTXService@ReturnEvent 0049              __end_of_TX_getChecksum 07B5  
       __size_of_TX_clearXBeePacket 0006               ??_TX_appendXBeePacket 0020  
           entry__PostUARTRXService 0116               __end_of_CheckSPIEvent 0F32  
                    _ES_GetMSBitSet 00AC                    _colorRequestData 00C7  
                       _readRXIndex 006A             entry__PostUARTTXService 0118  
                        ?_retrySend 003F                      _IsTimerPending 0509  
       __size_of_ES_CheckUserEvents 001C                      _ES_EnQueueFIFO 0484  
                 _ES_Sys_Timer_Init 0407                  __end_of__stringtab 0806  
                     _responseBytes 00E8                     ??_RunSPIService 0048  
                ?_ES_Sys_Timer_Init 0070                            __fptable 0100  
        __end_of_RX_getStatusBuffer 06CC                  _ES_Timer_InitTimer 0428  
                ES_DeQueue@saveCrit 0031              __end_of_BitNum2SetMask 0829  
                          __ptext10 0796                            __ptext11 0782  
                          __ptext20 0ED2                            __ptext12 0428  
                          __ptext21 0EEE                            __ptext13 0509  
                          __ptext30 0000                            __ptext22 0F32  
                          __ptext14 0036                            __ptext31 0000  
                          __ptext23 0F07                            __ptext15 03D2  
                          __ptext40 0000                            __ptext32 044F  
                          __ptext24 019B                            __ptext16 0F4E  
                          __ptext41 0000                            __ptext33 0484  
                          __ptext25 00EA                            __ptext17 07D2  
                          __ptext42 0000                            __ptext34 03C0  
                          __ptext26 0DE8                            __ptext18 00AC  
                          __ptext43 06C3                            __ptext35 0407  
                          __ptext27 0E85                            __ptext19 0F59  
                          __ptext44 06BA                            __ptext36 03DC  
                          __ptext28 0DB7                            __ptext45 06AA  
                          __ptext37 0511                            __ptext29 0000  
                          __ptext46 0000                            __ptext38 0000  
                          __ptext39 0000               ?_InitPACSystemService 003C  
                          _commOpen 00C8                 ??_ES_Sys_Timer_Init 0020  
               ?_ES_Timer_InitTimer 0020             fp__PostPACSystemService 0114  
                     __size_of_main 002D                     ?_TX_getChecksum 0070  
            __end_of_ES_GetMSBitSet 00EA                   retrySend@LEDEvent 0041  
            __end_of_IsTimerPending 0511                         _ES_Run$1334 0054  
              fp__InitUARTRXService 0108              __end_of_ES_EnQueueFIFO 0509  
         __end_of_ES_Sys_Timer_Init 0428                ??_ES_Timer_InitTimer 0022  
         __size_of_CheckUARTRXEvent 001C             InitSPIService@ThisEvent 003E  
              fp__InitUARTTXService 0106           __size_of_CheckUARTTXEvent 0019  
              _RX_getResponseBuffer 06BA        __pjmp_tab__ES_Timer_RTI_Resp 084D  
                 ES_DeQueue@NumLeft 0032                   _ES_Timer_RTI_Resp 0036  
                    _toggleRXBuffer 0000                  ?_ES_Timer_RTI_Resp 003F  
             _RX_clearResponseReady 0000                 _RunPACSystemService 0E41  
                          init_ram0 0DAB                    ?_superPACAddrSet 0070  
             CheckSPIEvent@SPIEvent 0043        __size_of_RX_newResponseReady 0000  
               ??_ES_Timer_RTI_Resp 0040                            intlevel1 0100  
ES_Timer_RTI_Resp@NextTimer2Process 005A                      _SPIIntResponse 0000  
          __end_of_toggleRespBuffer 0000                          _ES_DeQueue 0F59  
               fp__RunUARTRXService 011C                     ?_ES_GetMSBitSet 0070  
              ?_RunPACSystemService 0044                           stringcode 0800  
               fp__RunUARTTXService 011A            UARTRXIntResponse@newByte 0077  
                   ?_IsTimerPending 0070                         ??_retrySend 0040  
                   ?_ES_EnQueueFIFO 0024           __end_of_ES_Timer_RTI_Resp 00AC  
             ?_RX_getResponseBuffer 0070              __end_of_toggleRXBuffer 0000  
                        _ES_PostAll 0000            __end_of_RunUARTRXService 03C0  
            InitSPIService@Priority 003C              SPIIntResponse@readByte 0076  
                  ES_DeQueue@pBlock 0024            __end_of_RunUARTTXService 0782  
          __end_of_toggleStatBuffer 0000                            stringdir 0800  
        InitUARTRXService@ThisEvent 003E                            stringtab 0800  
            ??_InitPACSystemService 003D             CheckUARTTXEvent@TXEvent 003D  
            ES_DeQueue@pReturnEvent 0026               ES_InitQueue@BlockSize 0026  
            __end_of_SPIIntResponse 0000       __size_of_PostPACSystemService 000B  
                    _InitSPIService 0DE8           __size_ofi1_toggleRXBuffer 0000  
          __pjmp_tab__ES_Initialize 0002           InitUARTRXService@Priority 003C  
             ??_RunPACSystemService 0048                   TX_getChecksum@chk 0021  
                        _USART_Init 0DCE                     TX_getChecksum@i 0022  
